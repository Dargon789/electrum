versions pytest-8.3.4, python-3.11.9.final.0
invocation_dir=/home/reconfigure/electrum
cwd=/home/reconfigure/electrum
args=('tests', '-v', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7fb950228490>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7fb950228490>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7fb9500f0f90>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7fb93a9670d0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
          plugin_name: 140433890793680
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7fb950228490>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'jaxtyping._pytest_plugin' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/jaxtyping/_pytest_plugin.py'>
          plugin_name: jaxtyping
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'typeguard.pytest_plugin' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/typeguard/pytest_plugin.py'>
          plugin_name: typeguard
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7fb9500f0f90>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7fb93a9670d0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7fb93a960250>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7fb93a9c51d0>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
          plugin_name: 140433890793680
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7fb950228490>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'jaxtyping._pytest_plugin' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/jaxtyping/_pytest_plugin.py'>
          plugin_name: jaxtyping
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'typeguard.pytest_plugin' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/typeguard/pytest_plugin.py'>
          plugin_name: typeguard
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7fb9500f0f90>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7fb93a9670d0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7fb93a960250>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7fb93a9c51d0>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7fb93a965d50>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x7fb9502cd8d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7fb950228490>
          start_path: /home/reconfigure/electrum
          startdir: /home/reconfigure/electrum
      finish pytest_report_header --> [['rootdir: /home/reconfigure/electrum', 'plugins: jaxtyping-0.2.36, typeguard-2.13.3'], 'cachedir: .pytest_cache', ['using: pytest-8.3.4', 'registered third-party plugins:', '  jaxtyping-0.2.36 at /home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/jaxtyping/_pytest_plugin.py', '  typeguard-2.13.3 at /home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/typeguard/pytest_plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=PosixPath('/home/reconfigure/electrum/tests'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: /home/reconfigure/electrum
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir electrum> [hook]
            pytest_collectstart [hook]
                collector: <Dir electrum>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Dir electrum>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.cirrus.yml
                  path: /home/reconfigure/electrum/.cirrus.yml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/.cirrus.yml
                  path: /home/reconfigure/electrum/.cirrus.yml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.coverage
                  path: /home/reconfigure/electrum/.coverage
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/.coverage
                  path: /home/reconfigure/electrum/.coverage
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.dockerignore
                  path: /home/reconfigure/electrum/.dockerignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/.dockerignore
                  path: /home/reconfigure/electrum/.dockerignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.editorconfig
                  path: /home/reconfigure/electrum/.editorconfig
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/.editorconfig
                  path: /home/reconfigure/electrum/.editorconfig
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.git
                  path: /home/reconfigure/electrum/.git
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.gitattributes
                  path: /home/reconfigure/electrum/.gitattributes
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/.gitattributes
                  path: /home/reconfigure/electrum/.gitattributes
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.github
                  path: /home/reconfigure/electrum/.github
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.gitignore
                  path: /home/reconfigure/electrum/.gitignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/.gitignore
                  path: /home/reconfigure/electrum/.gitignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.gitmodules
                  path: /home/reconfigure/electrum/.gitmodules
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/.gitmodules
                  path: /home/reconfigure/electrum/.gitmodules
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.pytest_cache
                  path: /home/reconfigure/electrum/.pytest_cache
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/.tox
                  path: /home/reconfigure/electrum/.tox
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/AUTHORS
                  path: /home/reconfigure/electrum/AUTHORS
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/AUTHORS
                  path: /home/reconfigure/electrum/AUTHORS
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/Electrum-4.5.8
                  path: /home/reconfigure/electrum/Electrum-4.5.8
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/Electrum-4.5.8
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Dir Electrum-4.5.8> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz
                  path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz
                  path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz.asc
                  path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz.asc
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz.asc
                  path: /home/reconfigure/electrum/Electrum-4.5.8.tar.gz.asc
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/Electrum.egg-info
                  path: /home/reconfigure/electrum/Electrum.egg-info
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/Electrum.egg-info
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Dir Electrum.egg-info> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/LICENCE
                  path: /home/reconfigure/electrum/LICENCE
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/LICENCE
                  path: /home/reconfigure/electrum/LICENCE
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/MANIFEST.in
                  path: /home/reconfigure/electrum/MANIFEST.in
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/MANIFEST.in
                  path: /home/reconfigure/electrum/MANIFEST.in
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/README.md
                  path: /home/reconfigure/electrum/README.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/README.md
                  path: /home/reconfigure/electrum/README.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/RELEASE-NOTES
                  path: /home/reconfigure/electrum/RELEASE-NOTES
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/RELEASE-NOTES
                  path: /home/reconfigure/electrum/RELEASE-NOTES
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/SECURITY.md
                  path: /home/reconfigure/electrum/SECURITY.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/SECURITY.md
                  path: /home/reconfigure/electrum/SECURITY.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/build
                  path: /home/reconfigure/electrum/build
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/contrib
                  path: /home/reconfigure/electrum/contrib
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/contrib
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Dir contrib> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/d
                  path: /home/reconfigure/electrum/d
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/d
                  path: /home/reconfigure/electrum/d
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/electrum
                  path: /home/reconfigure/electrum/electrum
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/electrum
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Package electrum> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/electrum-3.3.4-x86_64.AppImage
                  path: /home/reconfigure/electrum/electrum-3.3.4-x86_64.AppImage
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/electrum-3.3.4-x86_64.AppImage
                  path: /home/reconfigure/electrum/electrum-3.3.4-x86_64.AppImage
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/electrum-env
                  path: /home/reconfigure/electrum/electrum-env
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/electrum-env
                  path: /home/reconfigure/electrum/electrum-env
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/electrum.desktop
                  path: /home/reconfigure/electrum/electrum.desktop
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/electrum.desktop
                  path: /home/reconfigure/electrum/electrum.desktop
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/fastlane
                  path: /home/reconfigure/electrum/fastlane
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/fastlane
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Dir fastlane> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/org.electrum.electrum.metainfo.xml
                  path: /home/reconfigure/electrum/org.electrum.electrum.metainfo.xml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/org.electrum.electrum.metainfo.xml
                  path: /home/reconfigure/electrum/org.electrum.electrum.metainfo.xml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/pubkeys
                  path: /home/reconfigure/electrum/pubkeys
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/pubkeys
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Dir pubkeys> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/pytestdebug.log
                  path: /home/reconfigure/electrum/pytestdebug.log
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/pytestdebug.log
                  path: /home/reconfigure/electrum/pytestdebug.log
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/run_electrum
                  path: /home/reconfigure/electrum/run_electrum
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/run_electrum
                  path: /home/reconfigure/electrum/run_electrum
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/setup.cfg
                  path: /home/reconfigure/electrum/setup.cfg
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/setup.cfg
                  path: /home/reconfigure/electrum/setup.cfg
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/setup.py
                  path: /home/reconfigure/electrum/setup.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/setup.py
                  path: /home/reconfigure/electrum/setup.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/sha256sum1
                  path: /home/reconfigure/electrum/sha256sum1
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/sha256sum1
                  path: /home/reconfigure/electrum/sha256sum1
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/squashfs-root
                  path: /home/reconfigure/electrum/squashfs-root
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/squashfs-root
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Dir squashfs-root> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/squashfs-root1
                  path: /home/reconfigure/electrum/squashfs-root1
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/squashfs-root1
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Dir squashfs-root1> [hook]
              pytest_collect_directory [hook]
                  path: /home/reconfigure/electrum/tests
                  parent: <Dir electrum>
              finish pytest_collect_directory --> <Package tests> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x7fb950228490>
                  collection_path: /home/reconfigure/electrum/tox.ini
                  path: /home/reconfigure/electrum/tox.ini
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir electrum>
                  file_path: /home/reconfigure/electrum/tox.ini
                  path: /home/reconfigure/electrum/tox.ini
              finish pytest_collect_file --> [] [hook]
            finish pytest_make_collect_report --> <CollectReport '.' lenresult=9 outcome='passed'> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package tests> [collection]
      pytest_collectstart [hook]
          collector: <Package tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/__init__.py
            path: /home/reconfigure/electrum/tests/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/__init__.py
            path: /home/reconfigure/electrum/tests/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/__pycache__
            path: /home/reconfigure/electrum/tests/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/anchor-vectors.json
            path: /home/reconfigure/electrum/tests/anchor-vectors.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/anchor-vectors.json
            path: /home/reconfigure/electrum/tests/anchor-vectors.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/bip-0341
            path: /home/reconfigure/electrum/tests/bip-0341
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/reconfigure/electrum/tests/bip-0341
            parent: <Package tests>
        finish pytest_collect_directory --> <Dir bip-0341> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/qt_util.py
            path: /home/reconfigure/electrum/tests/qt_util.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/qt_util.py
            path: /home/reconfigure/electrum/tests/qt_util.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/regtest
            path: /home/reconfigure/electrum/tests/regtest
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/reconfigure/electrum/tests/regtest
            parent: <Package tests>
        finish pytest_collect_directory --> <Dir regtest> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/regtest.py
            path: /home/reconfigure/electrum/tests/regtest.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/regtest.py
            path: /home/reconfigure/electrum/tests/regtest.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/slip39-vectors.json
            path: /home/reconfigure/electrum/tests/slip39-vectors.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/slip39-vectors.json
            path: /home/reconfigure/electrum/tests/slip39-vectors.json
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_bitcoin.py
            path: /home/reconfigure/electrum/tests/test_bitcoin.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_bitcoin.py
            path: /home/reconfigure/electrum/tests/test_bitcoin.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_bitcoin.py
              path: /home/reconfigure/electrum/tests/test_bitcoin.py
          finish pytest_pycollect_makemodule --> <Module test_bitcoin.py> [hook]
        finish pytest_collect_file --> [<Module test_bitcoin.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_blockchain.py
            path: /home/reconfigure/electrum/tests/test_blockchain.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_blockchain.py
            path: /home/reconfigure/electrum/tests/test_blockchain.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_blockchain.py
              path: /home/reconfigure/electrum/tests/test_blockchain.py
          finish pytest_pycollect_makemodule --> <Module test_blockchain.py> [hook]
        finish pytest_collect_file --> [<Module test_blockchain.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_bolt11.py
            path: /home/reconfigure/electrum/tests/test_bolt11.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_bolt11.py
            path: /home/reconfigure/electrum/tests/test_bolt11.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_bolt11.py
              path: /home/reconfigure/electrum/tests/test_bolt11.py
          finish pytest_pycollect_makemodule --> <Module test_bolt11.py> [hook]
        finish pytest_collect_file --> [<Module test_bolt11.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_coinchooser.py
            path: /home/reconfigure/electrum/tests/test_coinchooser.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_coinchooser.py
            path: /home/reconfigure/electrum/tests/test_coinchooser.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_coinchooser.py
              path: /home/reconfigure/electrum/tests/test_coinchooser.py
          finish pytest_pycollect_makemodule --> <Module test_coinchooser.py> [hook]
        finish pytest_collect_file --> [<Module test_coinchooser.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_commands.py
            path: /home/reconfigure/electrum/tests/test_commands.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_commands.py
            path: /home/reconfigure/electrum/tests/test_commands.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_commands.py
              path: /home/reconfigure/electrum/tests/test_commands.py
          finish pytest_pycollect_makemodule --> <Module test_commands.py> [hook]
        finish pytest_collect_file --> [<Module test_commands.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_contacts.py
            path: /home/reconfigure/electrum/tests/test_contacts.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_contacts.py
            path: /home/reconfigure/electrum/tests/test_contacts.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_contacts.py
              path: /home/reconfigure/electrum/tests/test_contacts.py
          finish pytest_pycollect_makemodule --> <Module test_contacts.py> [hook]
        finish pytest_collect_file --> [<Module test_contacts.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_daemon.py
            path: /home/reconfigure/electrum/tests/test_daemon.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_daemon.py
            path: /home/reconfigure/electrum/tests/test_daemon.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_daemon.py
              path: /home/reconfigure/electrum/tests/test_daemon.py
          finish pytest_pycollect_makemodule --> <Module test_daemon.py> [hook]
        finish pytest_collect_file --> [<Module test_daemon.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_descriptor.py
            path: /home/reconfigure/electrum/tests/test_descriptor.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_descriptor.py
            path: /home/reconfigure/electrum/tests/test_descriptor.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_descriptor.py
              path: /home/reconfigure/electrum/tests/test_descriptor.py
          finish pytest_pycollect_makemodule --> <Module test_descriptor.py> [hook]
        finish pytest_collect_file --> [<Module test_descriptor.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_interface.py
            path: /home/reconfigure/electrum/tests/test_interface.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_interface.py
            path: /home/reconfigure/electrum/tests/test_interface.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_interface.py
              path: /home/reconfigure/electrum/tests/test_interface.py
          finish pytest_pycollect_makemodule --> <Module test_interface.py> [hook]
        finish pytest_collect_file --> [<Module test_interface.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_invoices.py
            path: /home/reconfigure/electrum/tests/test_invoices.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_invoices.py
            path: /home/reconfigure/electrum/tests/test_invoices.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_invoices.py
              path: /home/reconfigure/electrum/tests/test_invoices.py
          finish pytest_pycollect_makemodule --> <Module test_invoices.py> [hook]
        finish pytest_collect_file --> [<Module test_invoices.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lnchannel.py
            path: /home/reconfigure/electrum/tests/test_lnchannel.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lnchannel.py
            path: /home/reconfigure/electrum/tests/test_lnchannel.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lnchannel.py
              path: /home/reconfigure/electrum/tests/test_lnchannel.py
          finish pytest_pycollect_makemodule --> <Module test_lnchannel.py> [hook]
        finish pytest_collect_file --> [<Module test_lnchannel.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lnhtlc.py
            path: /home/reconfigure/electrum/tests/test_lnhtlc.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lnhtlc.py
            path: /home/reconfigure/electrum/tests/test_lnhtlc.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lnhtlc.py
              path: /home/reconfigure/electrum/tests/test_lnhtlc.py
          finish pytest_pycollect_makemodule --> <Module test_lnhtlc.py> [hook]
        finish pytest_collect_file --> [<Module test_lnhtlc.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lnmsg.py
            path: /home/reconfigure/electrum/tests/test_lnmsg.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lnmsg.py
            path: /home/reconfigure/electrum/tests/test_lnmsg.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lnmsg.py
              path: /home/reconfigure/electrum/tests/test_lnmsg.py
          finish pytest_pycollect_makemodule --> <Module test_lnmsg.py> [hook]
        finish pytest_collect_file --> [<Module test_lnmsg.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lnpeer.py
            path: /home/reconfigure/electrum/tests/test_lnpeer.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lnpeer.py
            path: /home/reconfigure/electrum/tests/test_lnpeer.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lnpeer.py
              path: /home/reconfigure/electrum/tests/test_lnpeer.py
          finish pytest_pycollect_makemodule --> <Module test_lnpeer.py> [hook]
        finish pytest_collect_file --> [<Module test_lnpeer.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lnrouter.py
            path: /home/reconfigure/electrum/tests/test_lnrouter.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lnrouter.py
            path: /home/reconfigure/electrum/tests/test_lnrouter.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lnrouter.py
              path: /home/reconfigure/electrum/tests/test_lnrouter.py
          finish pytest_pycollect_makemodule --> <Module test_lnrouter.py> [hook]
        finish pytest_collect_file --> [<Module test_lnrouter.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lntransport.py
            path: /home/reconfigure/electrum/tests/test_lntransport.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lntransport.py
            path: /home/reconfigure/electrum/tests/test_lntransport.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lntransport.py
              path: /home/reconfigure/electrum/tests/test_lntransport.py
          finish pytest_pycollect_makemodule --> <Module test_lntransport.py> [hook]
        finish pytest_collect_file --> [<Module test_lntransport.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lnurl.py
            path: /home/reconfigure/electrum/tests/test_lnurl.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lnurl.py
            path: /home/reconfigure/electrum/tests/test_lnurl.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lnurl.py
              path: /home/reconfigure/electrum/tests/test_lnurl.py
          finish pytest_pycollect_makemodule --> <Module test_lnurl.py> [hook]
        finish pytest_collect_file --> [<Module test_lnurl.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_lnutil.py
            path: /home/reconfigure/electrum/tests/test_lnutil.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_lnutil.py
            path: /home/reconfigure/electrum/tests/test_lnutil.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_lnutil.py
              path: /home/reconfigure/electrum/tests/test_lnutil.py
          finish pytest_pycollect_makemodule --> <Module test_lnutil.py> [hook]
        finish pytest_collect_file --> [<Module test_lnutil.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_mnemonic.py
            path: /home/reconfigure/electrum/tests/test_mnemonic.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_mnemonic.py
            path: /home/reconfigure/electrum/tests/test_mnemonic.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_mnemonic.py
              path: /home/reconfigure/electrum/tests/test_mnemonic.py
          finish pytest_pycollect_makemodule --> <Module test_mnemonic.py> [hook]
        finish pytest_collect_file --> [<Module test_mnemonic.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_mpp_split.py
            path: /home/reconfigure/electrum/tests/test_mpp_split.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_mpp_split.py
            path: /home/reconfigure/electrum/tests/test_mpp_split.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_mpp_split.py
              path: /home/reconfigure/electrum/tests/test_mpp_split.py
          finish pytest_pycollect_makemodule --> <Module test_mpp_split.py> [hook]
        finish pytest_collect_file --> [<Module test_mpp_split.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_network.py
            path: /home/reconfigure/electrum/tests/test_network.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_network.py
            path: /home/reconfigure/electrum/tests/test_network.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_network.py
              path: /home/reconfigure/electrum/tests/test_network.py
          finish pytest_pycollect_makemodule --> <Module test_network.py> [hook]
        finish pytest_collect_file --> [<Module test_network.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_payment_identifier.py
            path: /home/reconfigure/electrum/tests/test_payment_identifier.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_payment_identifier.py
            path: /home/reconfigure/electrum/tests/test_payment_identifier.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_payment_identifier.py
              path: /home/reconfigure/electrum/tests/test_payment_identifier.py
          finish pytest_pycollect_makemodule --> <Module test_payment_identifier.py> [hook]
        finish pytest_collect_file --> [<Module test_payment_identifier.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_psbt.py
            path: /home/reconfigure/electrum/tests/test_psbt.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_psbt.py
            path: /home/reconfigure/electrum/tests/test_psbt.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_psbt.py
              path: /home/reconfigure/electrum/tests/test_psbt.py
          finish pytest_pycollect_makemodule --> <Module test_psbt.py> [hook]
        finish pytest_collect_file --> [<Module test_psbt.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_qml_types.py
            path: /home/reconfigure/electrum/tests/test_qml_types.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_qml_types.py
            path: /home/reconfigure/electrum/tests/test_qml_types.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_qml_types.py
              path: /home/reconfigure/electrum/tests/test_qml_types.py
          finish pytest_pycollect_makemodule --> <Module test_qml_types.py> [hook]
        finish pytest_collect_file --> [<Module test_qml_types.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_revealer.py
            path: /home/reconfigure/electrum/tests/test_revealer.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_revealer.py
            path: /home/reconfigure/electrum/tests/test_revealer.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_revealer.py
              path: /home/reconfigure/electrum/tests/test_revealer.py
          finish pytest_pycollect_makemodule --> <Module test_revealer.py> [hook]
        finish pytest_collect_file --> [<Module test_revealer.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_simple_config.py
            path: /home/reconfigure/electrum/tests/test_simple_config.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_simple_config.py
            path: /home/reconfigure/electrum/tests/test_simple_config.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_simple_config.py
              path: /home/reconfigure/electrum/tests/test_simple_config.py
          finish pytest_pycollect_makemodule --> <Module test_simple_config.py> [hook]
        finish pytest_collect_file --> [<Module test_simple_config.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_sswaps.py
            path: /home/reconfigure/electrum/tests/test_sswaps.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_sswaps.py
            path: /home/reconfigure/electrum/tests/test_sswaps.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_sswaps.py
              path: /home/reconfigure/electrum/tests/test_sswaps.py
          finish pytest_pycollect_makemodule --> <Module test_sswaps.py> [hook]
        finish pytest_collect_file --> [<Module test_sswaps.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade
            path: /home/reconfigure/electrum/tests/test_storage_upgrade
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: /home/reconfigure/electrum/tests/test_storage_upgrade
            parent: <Package tests>
        finish pytest_collect_directory --> <Dir test_storage_upgrade> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade.py
            path: /home/reconfigure/electrum/tests/test_storage_upgrade.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade.py
            path: /home/reconfigure/electrum/tests/test_storage_upgrade.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_storage_upgrade.py
              path: /home/reconfigure/electrum/tests/test_storage_upgrade.py
          finish pytest_pycollect_makemodule --> <Module test_storage_upgrade.py> [hook]
        finish pytest_collect_file --> [<Module test_storage_upgrade.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_transaction.py
            path: /home/reconfigure/electrum/tests/test_transaction.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_transaction.py
            path: /home/reconfigure/electrum/tests/test_transaction.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_transaction.py
              path: /home/reconfigure/electrum/tests/test_transaction.py
          finish pytest_pycollect_makemodule --> <Module test_transaction.py> [hook]
        finish pytest_collect_file --> [<Module test_transaction.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_util.py
            path: /home/reconfigure/electrum/tests/test_util.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_util.py
            path: /home/reconfigure/electrum/tests/test_util.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_util.py
              path: /home/reconfigure/electrum/tests/test_util.py
          finish pytest_pycollect_makemodule --> <Module test_util.py> [hook]
        finish pytest_collect_file --> [<Module test_util.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_verifier.py
            path: /home/reconfigure/electrum/tests/test_verifier.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_verifier.py
            path: /home/reconfigure/electrum/tests/test_verifier.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_verifier.py
              path: /home/reconfigure/electrum/tests/test_verifier.py
          finish pytest_pycollect_makemodule --> <Module test_verifier.py> [hook]
        finish pytest_collect_file --> [<Module test_verifier.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_wallet.py
            path: /home/reconfigure/electrum/tests/test_wallet.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_wallet.py
            path: /home/reconfigure/electrum/tests/test_wallet.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_wallet.py
              path: /home/reconfigure/electrum/tests/test_wallet.py
          finish pytest_pycollect_makemodule --> <Module test_wallet.py> [hook]
        finish pytest_collect_file --> [<Module test_wallet.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_wallet_vertical.py
            path: /home/reconfigure/electrum/tests/test_wallet_vertical.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_wallet_vertical.py
            path: /home/reconfigure/electrum/tests/test_wallet_vertical.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_wallet_vertical.py
              path: /home/reconfigure/electrum/tests/test_wallet_vertical.py
          finish pytest_pycollect_makemodule --> <Module test_wallet_vertical.py> [hook]
        finish pytest_collect_file --> [<Module test_wallet_vertical.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_wizard.py
            path: /home/reconfigure/electrum/tests/test_wizard.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_wizard.py
            path: /home/reconfigure/electrum/tests/test_wizard.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_wizard.py
              path: /home/reconfigure/electrum/tests/test_wizard.py
          finish pytest_pycollect_makemodule --> <Module test_wizard.py> [hook]
        finish pytest_collect_file --> [<Module test_wizard.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_x509.py
            path: /home/reconfigure/electrum/tests/test_x509.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: /home/reconfigure/electrum/tests/test_x509.py
            path: /home/reconfigure/electrum/tests/test_x509.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: /home/reconfigure/electrum/tests/test_x509.py
              path: /home/reconfigure/electrum/tests/test_x509.py
          finish pytest_pycollect_makemodule --> <Module test_x509.py> [hook]
        finish pytest_collect_file --> [<Module test_x509.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests' lenresult=38 outcome='passed'> [hook]
    genitems <Dir bip-0341> [collection]
      pytest_collectstart [hook]
          collector: <Dir bip-0341>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir bip-0341>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/bip-0341/wallet-test-vectors.json
            path: /home/reconfigure/electrum/tests/bip-0341/wallet-test-vectors.json
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir bip-0341>
            file_path: /home/reconfigure/electrum/tests/bip-0341/wallet-test-vectors.json
            path: /home/reconfigure/electrum/tests/bip-0341/wallet-test-vectors.json
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/bip-0341' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/bip-0341' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir regtest> [collection]
      pytest_collectstart [hook]
          collector: <Dir regtest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir regtest>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/regtest/regtest.sh
            path: /home/reconfigure/electrum/tests/regtest/regtest.sh
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir regtest>
            file_path: /home/reconfigure/electrum/tests/regtest/regtest.sh
            path: /home/reconfigure/electrum/tests/regtest/regtest.sh
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/regtest/run_bitcoind.sh
            path: /home/reconfigure/electrum/tests/regtest/run_bitcoind.sh
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir regtest>
            file_path: /home/reconfigure/electrum/tests/regtest/run_bitcoind.sh
            path: /home/reconfigure/electrum/tests/regtest/run_bitcoind.sh
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/regtest/run_electrumx.sh
            path: /home/reconfigure/electrum/tests/regtest/run_electrumx.sh
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir regtest>
            file_path: /home/reconfigure/electrum/tests/regtest/run_electrumx.sh
            path: /home/reconfigure/electrum/tests/regtest/run_electrumx.sh
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/regtest' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/regtest' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_bitcoin.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_bitcoin.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_bitcoin.py>
      find_module called for: tests [assertion]
      early skip of rewriting module: electrum [assertion]
      early skip of rewriting module: electrum.version [assertion]
      early skip of rewriting module: electrum.util [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: attr [assertion]
      early skip of rewriting module: attr.converters [assertion]
      early skip of rewriting module: attr._compat [assertion]
      early skip of rewriting module: attr._make [assertion]
      early skip of rewriting module: attr._config [assertion]
      early skip of rewriting module: attr.setters [assertion]
      early skip of rewriting module: attr.exceptions [assertion]
      early skip of rewriting module: attr.filters [assertion]
      early skip of rewriting module: attr.validators [assertion]
      early skip of rewriting module: attr._cmp [assertion]
      early skip of rewriting module: attr._funcs [assertion]
      early skip of rewriting module: attr._next_gen [assertion]
      early skip of rewriting module: attr._version_info [assertion]
      early skip of rewriting module: aiohttp [assertion]
      early skip of rewriting module: aiohttp.hdrs [assertion]
      early skip of rewriting module: multidict [assertion]
      early skip of rewriting module: multidict._abc [assertion]
      early skip of rewriting module: multidict._compat [assertion]
      early skip of rewriting module: multidict._multidict [assertion]
      early skip of rewriting module: multidict._multidict_base [assertion]
      early skip of rewriting module: aiohttp.client [assertion]
      early skip of rewriting module: yarl [assertion]
      early skip of rewriting module: yarl._query [assertion]
      early skip of rewriting module: yarl._quoters [assertion]
      early skip of rewriting module: yarl._quoting [assertion]
      early skip of rewriting module: yarl._quoting_c [assertion]
      early skip of rewriting module: yarl._url [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: propcache [assertion]
      early skip of rewriting module: propcache.api [assertion]
      early skip of rewriting module: propcache._helpers [assertion]
      early skip of rewriting module: propcache._helpers_c [assertion]
      early skip of rewriting module: yarl._parse [assertion]
      early skip of rewriting module: yarl._path [assertion]
      early skip of rewriting module: aiohttp.http [assertion]
      early skip of rewriting module: aiohttp.http_exceptions [assertion]
      early skip of rewriting module: aiohttp.typedefs [assertion]
      early skip of rewriting module: aiohttp.http_parser [assertion]
      early skip of rewriting module: aiohttp.base_protocol [assertion]
      early skip of rewriting module: aiohttp.client_exceptions [assertion]
      early skip of rewriting module: aiohttp.helpers [assertion]
      early skip of rewriting module: netrc [assertion]
      early skip of rewriting module: aiohttp.log [assertion]
      early skip of rewriting module: aiohttp.tcp_helpers [assertion]
      early skip of rewriting module: aiohttp.compression_utils [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: aiohttp.http_writer [assertion]
      early skip of rewriting module: aiohttp.abc [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: aiohttp._http_writer [assertion]
      early skip of rewriting module: aiohttp.streams [assertion]
      early skip of rewriting module: aiohttp._http_parser [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: aiohttp.http_websocket [assertion]
      early skip of rewriting module: aiohttp._websocket [assertion]
      early skip of rewriting module: aiohttp._websocket.helpers [assertion]
      early skip of rewriting module: aiohttp._websocket.models [assertion]
      early skip of rewriting module: aiohttp._websocket.mask [assertion]
      early skip of rewriting module: aiohttp._websocket.reader [assertion]
      early skip of rewriting module: aiohttp._websocket.reader_c [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: aiohttp._websocket.writer [assertion]
      early skip of rewriting module: aiohttp.payload [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: _winapi [assertion]
      early skip of rewriting module: winreg [assertion]
      early skip of rewriting module: aiohttp.client_reqrep [assertion]
      early skip of rewriting module: aiohttp.multipart [assertion]
      early skip of rewriting module: aiohttp.formdata [assertion]
      early skip of rewriting module: aiohttp.client_ws [assertion]
      early skip of rewriting module: aiohttp.connector [assertion]
      early skip of rewriting module: aiohappyeyeballs [assertion]
      early skip of rewriting module: aiohappyeyeballs.impl [assertion]
      early skip of rewriting module: aiohappyeyeballs._staggered [assertion]
      early skip of rewriting module: aiohappyeyeballs.types [assertion]
      early skip of rewriting module: aiohappyeyeballs.utils [assertion]
      early skip of rewriting module: aiohttp.client_proto [assertion]
      early skip of rewriting module: aiohttp.resolver [assertion]
      early skip of rewriting module: aiodns [assertion]
      early skip of rewriting module: aiohttp.cookiejar [assertion]
      early skip of rewriting module: aiohttp.tracing [assertion]
      early skip of rewriting module: aiosignal [assertion]
      early skip of rewriting module: frozenlist [assertion]
      early skip of rewriting module: frozenlist._frozenlist [assertion]
      early skip of rewriting module: aiohttp.payload_streamer [assertion]
      early skip of rewriting module: aiohttp_socks [assertion]
      early skip of rewriting module: python_socks [assertion]
      early skip of rewriting module: python_socks._version [assertion]
      early skip of rewriting module: python_socks._types [assertion]
      early skip of rewriting module: python_socks._helpers [assertion]
      early skip of rewriting module: python_socks._errors [assertion]
      early skip of rewriting module: aiohttp_socks.connector [assertion]
      early skip of rewriting module: python_socks.async_ [assertion]
      early skip of rewriting module: python_socks.async_._proxy_chain [assertion]
      early skip of rewriting module: python_socks.async_.asyncio [assertion]
      early skip of rewriting module: python_socks.async_.asyncio._proxy [assertion]
      early skip of rewriting module: python_socks.async_.asyncio._stream [assertion]
      early skip of rewriting module: python_socks._abc [assertion]
      early skip of rewriting module: python_socks.async_.asyncio._resolver [assertion]
      early skip of rewriting module: python_socks._protocols [assertion]
      early skip of rewriting module: python_socks._protocols.errors [assertion]
      early skip of rewriting module: python_socks._connectors [assertion]
      early skip of rewriting module: python_socks._connectors.factory_async [assertion]
      early skip of rewriting module: python_socks._connectors.abc [assertion]
      early skip of rewriting module: python_socks._connectors.socks5_async [assertion]
      early skip of rewriting module: python_socks._protocols.socks5 [assertion]
      early skip of rewriting module: python_socks._connectors.socks4_async [assertion]
      early skip of rewriting module: python_socks._protocols.socks4 [assertion]
      early skip of rewriting module: python_socks._connectors.http_async [assertion]
      early skip of rewriting module: python_socks._protocols.http [assertion]
      early skip of rewriting module: python_socks.async_.asyncio._connect [assertion]
      early skip of rewriting module: python_socks.async_.asyncio.v2 [assertion]
      early skip of rewriting module: python_socks.async_.asyncio.v2._proxy [assertion]
      early skip of rewriting module: python_socks.async_.asyncio.v2._stream [assertion]
      early skip of rewriting module: python_socks.async_.asyncio.v2._connect [assertion]
      early skip of rewriting module: python_socks.async_.asyncio.v2._chain [assertion]
      early skip of rewriting module: aiohttp_socks.utils [assertion]
      early skip of rewriting module: aiohttp_socks._deprecated [assertion]
      early skip of rewriting module: aiorpcx [assertion]
      early skip of rewriting module: aiorpcx.curio [assertion]
      early skip of rewriting module: aiorpcx.util [assertion]
      early skip of rewriting module: aiorpcx.framing [assertion]
      early skip of rewriting module: aiorpcx.jsonrpc [assertion]
      early skip of rewriting module: aiorpcx.rawsocket [assertion]
      early skip of rewriting module: aiorpcx.session [assertion]
      early skip of rewriting module: aiorpcx.socks [assertion]
      early skip of rewriting module: aiorpcx.unixsocket [assertion]
      early skip of rewriting module: aiorpcx.websocket [assertion]
      early skip of rewriting module: websockets [assertion]
      early skip of rewriting module: websockets.imports [assertion]
      early skip of rewriting module: websockets.version [assertion]
      early skip of rewriting module: websockets.client [assertion]
      early skip of rewriting module: websockets.datastructures [assertion]
      early skip of rewriting module: websockets.exceptions [assertion]
      early skip of rewriting module: websockets.frames [assertion]
      early skip of rewriting module: websockets.speedups [assertion]
      early skip of rewriting module: websockets.extensions [assertion]
      early skip of rewriting module: websockets.extensions.base [assertion]
      early skip of rewriting module: websockets.typing [assertion]
      early skip of rewriting module: websockets.http11 [assertion]
      early skip of rewriting module: websockets.headers [assertion]
      early skip of rewriting module: websockets.protocol [assertion]
      early skip of rewriting module: websockets.streams [assertion]
      early skip of rewriting module: websockets.uri [assertion]
      early skip of rewriting module: websockets.utils [assertion]
      early skip of rewriting module: websockets.legacy [assertion]
      early skip of rewriting module: websockets.legacy.client [assertion]
      early skip of rewriting module: websockets.asyncio [assertion]
      early skip of rewriting module: websockets.asyncio.compatibility [assertion]
      early skip of rewriting module: websockets.extensions.permessage_deflate [assertion]
      early skip of rewriting module: websockets.legacy.exceptions [assertion]
      early skip of rewriting module: websockets.legacy.handshake [assertion]
      early skip of rewriting module: websockets.legacy.http [assertion]
      early skip of rewriting module: websockets.legacy.protocol [assertion]
      early skip of rewriting module: websockets.legacy.framing [assertion]
      early skip of rewriting module: websockets.server [assertion]
      early skip of rewriting module: websockets.legacy.server [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: dns [assertion]
      early skip of rewriting module: dns.version [assertion]
      early skip of rewriting module: dns.resolver [assertion]
      early skip of rewriting module: dns._ddr [assertion]
      early skip of rewriting module: dns.asyncbackend [assertion]
      early skip of rewriting module: dns.exception [assertion]
      early skip of rewriting module: dns._asyncbackend [assertion]
      early skip of rewriting module: dns.inet [assertion]
      early skip of rewriting module: dns.ipv4 [assertion]
      early skip of rewriting module: dns.ipv6 [assertion]
      early skip of rewriting module: dns.name [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: dns._features [assertion]
      early skip of rewriting module: dns.enum [assertion]
      early skip of rewriting module: dns.immutable [assertion]
      early skip of rewriting module: dns._immutable_ctx [assertion]
      early skip of rewriting module: dns.wire [assertion]
      early skip of rewriting module: dns.nameserver [assertion]
      early skip of rewriting module: dns.asyncquery [assertion]
      early skip of rewriting module: dns.message [assertion]
      early skip of rewriting module: dns.edns [assertion]
      early skip of rewriting module: dns.rdata [assertion]
      early skip of rewriting module: dns.rdataclass [assertion]
      early skip of rewriting module: dns.rdatatype [assertion]
      early skip of rewriting module: dns.tokenizer [assertion]
      early skip of rewriting module: dns.ttl [assertion]
      early skip of rewriting module: dns.entropy [assertion]
      early skip of rewriting module: dns.flags [assertion]
      early skip of rewriting module: dns.opcode [assertion]
      early skip of rewriting module: dns.rcode [assertion]
      early skip of rewriting module: dns.rdtypes [assertion]
      early skip of rewriting module: dns.rdtypes.ANY [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.OPT [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.TSIG [assertion]
      early skip of rewriting module: dns.renderer [assertion]
      early skip of rewriting module: dns.tsig [assertion]
      early skip of rewriting module: dns.rrset [assertion]
      early skip of rewriting module: dns.rdataset [assertion]
      early skip of rewriting module: dns.set [assertion]
      early skip of rewriting module: dns.quic [assertion]
      early skip of rewriting module: dns.transaction [assertion]
      early skip of rewriting module: dns.node [assertion]
      early skip of rewriting module: dns.serial [assertion]
      early skip of rewriting module: dns.query [assertion]
      early skip of rewriting module: dns.xfr [assertion]
      early skip of rewriting module: dns.zone [assertion]
      early skip of rewriting module: dns.grange [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.SOA [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.ZONEMD [assertion]
      early skip of rewriting module: dns.zonetypes [assertion]
      early skip of rewriting module: dns.zonefile [assertion]
      early skip of rewriting module: dns.rdtypes.svcbbase [assertion]
      early skip of rewriting module: dns.rdtypes.util [assertion]
      early skip of rewriting module: dns.reversename [assertion]
      early skip of rewriting module: electrum.i18n [assertion]
      early skip of rewriting module: electrum.logging [assertion]
      early skip of rewriting module: logging.handlers [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: importlib.readers [assertion]
      early skip of rewriting module: importlib.resources.readers [assertion]
      early skip of rewriting module: importlib.resources._itertools [assertion]
      early skip of rewriting module: electrum.wallet [assertion]
      early skip of rewriting module: electrum_ecc [assertion]
      early skip of rewriting module: electrum_ecc.ecc_fast [assertion]
      early skip of rewriting module: electrum.bip32 [assertion]
      early skip of rewriting module: electrum.constants [assertion]
      early skip of rewriting module: electrum.bitcoin [assertion]
      early skip of rewriting module: electrum.segwit_addr [assertion]
      early skip of rewriting module: electrum.crypto [assertion]
      early skip of rewriting module: argon2 [assertion]
      early skip of rewriting module: argon2.exceptions [assertion]
      early skip of rewriting module: argon2.low_level [assertion]
      early skip of rewriting module: _argon2_cffi_bindings [assertion]
      early skip of rewriting module: _argon2_cffi_bindings._ffi [assertion]
      early skip of rewriting module: _cffi_backend [assertion]
      early skip of rewriting module: argon2._typing [assertion]
      early skip of rewriting module: argon2.profiles [assertion]
      early skip of rewriting module: argon2._utils [assertion]
      early skip of rewriting module: argon2._legacy [assertion]
      early skip of rewriting module: argon2._password_hasher [assertion]
      early skip of rewriting module: pyaes [assertion]
      early skip of rewriting module: pyaes.aes [assertion]
      early skip of rewriting module: pyaes.blockfeeder [assertion]
      early skip of rewriting module: pyaes.util [assertion]
      early skip of rewriting module: Cryptodome [assertion]
      early skip of rewriting module: cryptography [assertion]
      early skip of rewriting module: cryptography.utils [assertion]
      early skip of rewriting module: cryptography.__about__ [assertion]
      early skip of rewriting module: cryptography.exceptions [assertion]
      early skip of rewriting module: cryptography.hazmat [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings._rust [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._cipheralgorithm [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.modes [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers.algorithms [assertion]
      early skip of rewriting module: cryptography.hazmat.backends [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.aead [assertion]
      early skip of rewriting module: electrum.simple_config [assertion]
      early skip of rewriting module: electrum.invoices [assertion]
      early skip of rewriting module: electrum.json_db [assertion]
      early skip of rewriting module: jsonpatch [assertion]
      early skip of rewriting module: jsonpointer [assertion]
      early skip of rewriting module: electrum.bip21 [assertion]
      early skip of rewriting module: electrum.lnaddr [assertion]
      early skip of rewriting module: electrum.lnutil [assertion]
      early skip of rewriting module: electrum.transaction [assertion]
      early skip of rewriting module: electrum.descriptor [assertion]
      early skip of rewriting module: electrum.keystore [assertion]
      early skip of rewriting module: electrum.mnemonic [assertion]
      early skip of rewriting module: electrum.plugin [assertion]
      early skip of rewriting module: electrum.plugins [assertion]
      early skip of rewriting module: concurrent.futures.thread [assertion]
      early skip of rewriting module: hid [assertion]
      early skip of rewriting module: electrum.storage [assertion]
      early skip of rewriting module: electrum.wallet_db [assertion]
      early skip of rewriting module: electrum.coinchooser [assertion]
      early skip of rewriting module: electrum.paymentrequest [assertion]
      early skip of rewriting module: electrum.paymentrequest_pb2 [assertion]
      early skip of rewriting module: google.protobuf [assertion]
      early skip of rewriting module: google.protobuf.internal [assertion]
      early skip of rewriting module: google.protobuf.internal.builder [assertion]
      early skip of rewriting module: google.protobuf.internal.enum_type_wrapper [assertion]
      early skip of rewriting module: google.protobuf.message [assertion]
      early skip of rewriting module: google.protobuf.reflection [assertion]
      early skip of rewriting module: google.protobuf.message_factory [assertion]
      early skip of rewriting module: google.protobuf.internal.api_implementation [assertion]
      early skip of rewriting module: google.protobuf.internal._api_implementation [assertion]
      early skip of rewriting module: google.protobuf.enable_deterministic_proto_serialization [assertion]
      early skip of rewriting module: google.protobuf.descriptor_pool [assertion]
      early skip of rewriting module: google.protobuf.descriptor [assertion]
      early skip of rewriting module: google.protobuf.descriptor_database [assertion]
      early skip of rewriting module: google.protobuf.text_encoding [assertion]
      early skip of rewriting module: google.protobuf.internal.python_message [assertion]
      early skip of rewriting module: google.protobuf.internal.containers [assertion]
      early skip of rewriting module: google.protobuf.internal.decoder [assertion]
      early skip of rewriting module: google.protobuf.internal.encoder [assertion]
      early skip of rewriting module: google.protobuf.internal.wire_format [assertion]
      early skip of rewriting module: google.protobuf.internal.extension_dict [assertion]
      early skip of rewriting module: google.protobuf.internal.type_checkers [assertion]
      early skip of rewriting module: google.protobuf.internal.message_listener [assertion]
      early skip of rewriting module: google.protobuf.internal.well_known_types [assertion]
      early skip of rewriting module: google.protobuf.text_format [assertion]
      early skip of rewriting module: encodings.raw_unicode_escape [assertion]
      early skip of rewriting module: encodings.unicode_escape [assertion]
      early skip of rewriting module: google.protobuf.symbol_database [assertion]
      early skip of rewriting module: google.protobuf.descriptor_pb2 [assertion]
      early skip of rewriting module: electrum.x509 [assertion]
      early skip of rewriting module: electrum.rsakey [assertion]
      early skip of rewriting module: electrum.network [assertion]
      early skip of rewriting module: electrum.blockchain [assertion]
      early skip of rewriting module: electrum.dns_hacks [assertion]
      early skip of rewriting module: electrum.interface [assertion]
      early skip of rewriting module: electrum.pem [assertion]
      early skip of rewriting module: electrum.contacts [assertion]
      early skip of rewriting module: electrum.dnssec [assertion]
      early skip of rewriting module: dns.dnssec [assertion]
      early skip of rewriting module: dns.dnssectypes [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.CDNSKEY [assertion]
      early skip of rewriting module: dns.rdtypes.dnskeybase [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.CDS [assertion]
      early skip of rewriting module: dns.rdtypes.dsbase [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.DNSKEY [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.DS [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.NSEC [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.NSEC3PARAM [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.RRSIG [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.hashes [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.utils [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ec [assertion]
      early skip of rewriting module: cryptography.hazmat._oid [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed448 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed25519 [assertion]
      early skip of rewriting module: dns.dnssecalgs [assertion]
      early skip of rewriting module: dns.dnssecalgs.base [assertion]
      early skip of rewriting module: dns.dnssecalgs.dsa [assertion]
      early skip of rewriting module: dns.dnssecalgs.cryptography [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.ssh [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.padding [assertion]
      early skip of rewriting module: bcrypt [assertion]
      early skip of rewriting module: dns.dnssecalgs.ecdsa [assertion]
      early skip of rewriting module: dns.dnssecalgs.eddsa [assertion]
      early skip of rewriting module: dns.dnssecalgs.rsa [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.NS [assertion]
      early skip of rewriting module: dns.rdtypes.nsbase [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.CNAME [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.DLV [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.NSEC3 [assertion]
      early skip of rewriting module: dns.rdtypes.ANY.TXT [assertion]
      early skip of rewriting module: dns.rdtypes.txtbase [assertion]
      early skip of rewriting module: dns.rdtypes.IN [assertion]
      early skip of rewriting module: dns.rdtypes.IN.A [assertion]
      early skip of rewriting module: dns.rdtypes.IN.AAAA [assertion]
      early skip of rewriting module: dns.rdtypes.IN.DNSKEY [assertion]
      early skip of rewriting module: electrum.address_synchronizer [assertion]
      early skip of rewriting module: electrum.synchronizer [assertion]
      early skip of rewriting module: electrum.verifier [assertion]
      early skip of rewriting module: electrum.lnworker [assertion]
      early skip of rewriting module: electrum.lntransport [assertion]
      early skip of rewriting module: electrum.lnpeer [assertion]
      early skip of rewriting module: electrum.lnrouter [assertion]
      early skip of rewriting module: electrum.channel_db [assertion]
      early skip of rewriting module: electrum.sql_db [assertion]
      early skip of rewriting module: sqlite3 [assertion]
      early skip of rewriting module: sqlite3.dbapi2 [assertion]
      early skip of rewriting module: _sqlite3 [assertion]
      early skip of rewriting module: electrum.lnverifier [assertion]
      early skip of rewriting module: electrum.lnmsg [assertion]
      early skip of rewriting module: electrum.lnonion [assertion]
      early skip of rewriting module: electrum.lnchannel [assertion]
      early skip of rewriting module: electrum.lnsweep [assertion]
      early skip of rewriting module: electrum.lnhtlc [assertion]
      early skip of rewriting module: electrum.trampoline [assertion]
      early skip of rewriting module: electrum.lnrater [assertion]
      early skip of rewriting module: statistics [assertion]
      early skip of rewriting module: fractions [assertion]
      early skip of rewriting module: _statistics [assertion]
      early skip of rewriting module: electrum.lnwatcher [assertion]
      early skip of rewriting module: electrum.submarine_swaps [assertion]
      early skip of rewriting module: electrum_aionostr [assertion]
      early skip of rewriting module: electrum_aionostr.relay [assertion]
      early skip of rewriting module: electrum_aionostr.event [assertion]
      early skip of rewriting module: rapidjson [assertion]
      early skip of rewriting module: electrum_aionostr.util [assertion]
      early skip of rewriting module: electrum_aionostr.key [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.padding [assertion]
      early skip of rewriting module: electrum_aionostr.delegation [assertion]
      early skip of rewriting module: electrum_aionostr.bech32 [assertion]
      early skip of rewriting module: electrum.mpp_split [assertion]
      early skip of rewriting module: electrum.daemon [assertion]
      early skip of rewriting module: aiohttp.web [assertion]
      early skip of rewriting module: aiohttp.web_app [assertion]
      early skip of rewriting module: aiohttp.web_exceptions [assertion]
      early skip of rewriting module: aiohttp.web_response [assertion]
      early skip of rewriting module: aiohttp.web_log [assertion]
      early skip of rewriting module: aiohttp.web_request [assertion]
      early skip of rewriting module: aiohttp.web_middlewares [assertion]
      early skip of rewriting module: aiohttp.web_urldispatcher [assertion]
      early skip of rewriting module: html [assertion]
      early skip of rewriting module: html.entities [assertion]
      early skip of rewriting module: aiohttp.web_fileresponse [assertion]
      early skip of rewriting module: aiohttp.web_routedef [assertion]
      early skip of rewriting module: aiohttp.web_protocol [assertion]
      early skip of rewriting module: aiohttp.web_server [assertion]
      early skip of rewriting module: aiohttp.web_runner [assertion]
      early skip of rewriting module: aiohttp.web_ws [assertion]
      early skip of rewriting module: electrum.commands [assertion]
      early skip of rewriting module: electrum.exchange_rate [assertion]
      early skip of rewriting module: unittest.async_case [assertion]
      find_module called for: tests.test_bitcoin [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_bitcoin.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_bitcoin.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: base64
            obj: <module 'base64' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/base64.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: json
            obj: <module 'json' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: ecc
            obj: <module 'electrum_ecc' from '/home/reconfigure/.local/lib/python3.11/site-packages/electrum_ecc/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: bitcoin
            obj: <module 'electrum.bitcoin' from '/home/reconfigure/electrum/electrum/bitcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: public_key_to_p2pkh
            obj: <function public_key_to_p2pkh at 0x7fb939eb9ee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: address_from_private_key
            obj: <function address_from_private_key at 0x7fb939ebade0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_address
            obj: <function is_address at 0x7fb939ebb060>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_private_key
            obj: <function is_private_key at 0x7fb939ebb100>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: var_int
            obj: <function var_int at 0x7fb939eb94e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: _op_push
            obj: <function _op_push at 0x7fb939eb9620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: address_to_script
            obj: <function address_to_script at 0x7fb939eba3e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: OnchainOutputType
            obj: <enum 'OnchainOutputType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: address_to_payload
            obj: <function address_to_payload at 0x7fb939eba480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: deserialize_privkey
            obj: <function deserialize_privkey at 0x7fb939ebaca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: serialize_privkey
            obj: <function serialize_privkey at 0x7fb939ebac00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_segwit_address
            obj: <function is_segwit_address at 0x7fb939ebae80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_b58_address
            obj: <function is_b58_address at 0x7fb939ebafc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: address_to_scripthash
            obj: <function address_to_scripthash at 0x7fb939eba5c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_minikey
            obj: <function is_minikey at 0x7fb939ebb1a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_compressed_privkey
            obj: <function is_compressed_privkey at 0x7fb939ebad40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: EncodeBase58Check
            obj: <function EncodeBase58Check at 0x7fb939eba980>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: DecodeBase58Check
            obj: <function DecodeBase58Check at 0x7fb939ebaac0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: script_num_to_bytes
            obj: <function script_num_to_bytes at 0x7fb93a17a3e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: push_script
            obj: <function push_script at 0x7fb939eb96c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: add_number_to_script
            obj: <function add_number_to_script at 0x7fb939eb9800>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: opcodes
            obj: <enum 'opcodes'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: base_encode
            obj: <function base_encode at 0x7fb939eba7a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: base_decode
            obj: <function base_decode at 0x7fb939eba8e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: BitcoinException
            obj: <class 'electrum.util.BitcoinException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: taproot_tweak_pubkey
            obj: <function taproot_tweak_pubkey at 0x7fb939ebb380>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: taproot_tweak_seckey
            obj: <function taproot_tweak_seckey at 0x7fb939ebb6a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: taproot_output_script
            obj: <function taproot_output_script at 0x7fb939ebb7e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: control_block_for_taproot_script_spend
            obj: <function control_block_for_taproot_script_spend at 0x7fb939ebb920>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: bip32
            obj: <module 'electrum.bip32' from '/home/reconfigure/electrum/electrum/bip32.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: segwit_addr
            obj: <module 'electrum.segwit_addr' from '/home/reconfigure/electrum/electrum/segwit_addr.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: DecodedBech32
            obj: <class 'electrum.segwit_addr.DecodedBech32'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: BIP32Node
            obj: <class 'electrum.bip32.BIP32Node'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: convert_bip32_intpath_to_strpath
            obj: <function convert_bip32_intpath_to_strpath at 0x7fb939f494e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: xpub_from_xprv
            obj: <function xpub_from_xprv at 0x7fb939f493a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: xpub_type
            obj: <function xpub_type at 0x7fb939f48540>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_xprv
            obj: <function is_xprv at 0x7fb939f49300>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_bip32_derivation
            obj: <function is_bip32_derivation at 0x7fb939f49580>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_xpub
            obj: <function is_xpub at 0x7fb939f49260>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: convert_bip32_strpath_to_intpath
            obj: <function convert_bip32_strpath_to_intpath at 0x7fb939f49440>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: normalize_bip32_derivation
            obj: <function normalize_bip32_derivation at 0x7fb939f49620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: is_all_public_derivation
            obj: <function is_all_public_derivation at 0x7fb939f496c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: sha256d
            obj: <function sha256d at 0x7fb939eb8d60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: SUPPORTED_PW_HASH_VERSIONS
            obj: (1,)
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: crypto
            obj: <module 'electrum.crypto' from '/home/reconfigure/electrum/electrum/crypto.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: InvalidPassword
            obj: <class 'electrum.util.InvalidPassword'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: randrange
            obj: <function randrange at 0x7fb93a1049a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: WalletStorage
            obj: <class 'electrum.storage.WalletStorage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: xtype_from_derivation
            obj: <function xtype_from_derivation at 0x7fb9393ca660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: FAST_TESTS
            obj: False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: needs_test_with_all_aes_implementations
            obj: <function needs_test_with_all_aes_implementations at 0x7fb936a13100>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: needs_test_with_all_chacha20_implementations
            obj: <function needs_test_with_all_chacha20_implementations at 0x7fb936a131a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: disable_ecdsa_r_value_grinding
            obj: <function disable_ecdsa_r_value_grinding at 0x7fb936a139c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: Test_bitcoin
            obj: <class 'tests.test_bitcoin.Test_bitcoin'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_bitcoin> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: Test_bitcoin_testnet
            obj: <class 'tests.test_bitcoin.Test_bitcoin_testnet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_bitcoin_testnet> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: Test_xprv_xpub
            obj: <class 'tests.test_bitcoin.Test_xprv_xpub'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_xprv_xpub> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: Test_xprv_xpub_testnet
            obj: <class 'tests.test_bitcoin.Test_xprv_xpub_testnet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_xprv_xpub_testnet> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: Test_keyImport
            obj: <class 'tests.test_bitcoin.Test_keyImport'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_keyImport> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: TestBaseEncode
            obj: <class 'tests.test_bitcoin.TestBaseEncode'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestBaseEncode> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bitcoin.py>
            name: TestTaprootHelpers
            obj: <class 'tests.test_bitcoin.TestTaprootHelpers'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestTaprootHelpers> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py' lenresult=8 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_bitcoin> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_bitcoin>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_bitcoin>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::Test_bitcoin' lenresult=30 outcome='passed'> [hook]
    genitems <TestCaseFunction test_add_number_to_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_number_to_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_address_to_payload> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_address_to_payload>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_address_to_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_address_to_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_aes_decode_with_invalid_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_aes_decode_with_invalid_password>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_aes_deencode_without_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_aes_deencode_without_password>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_aes_encode_without_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_aes_encode_without_password>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_aes_homomorphic> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_aes_homomorphic>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bech32_decode> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bech32_decode>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chacha20_encrypt__12_byte_nonce> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chacha20_encrypt__12_byte_nonce>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chacha20_encrypt__8_byte_nonce> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chacha20_encrypt__8_byte_nonce>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chacha20_poly1305_decrypt__with_associated_data> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chacha20_poly1305_decrypt__with_associated_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chacha20_poly1305_decrypt__without_associated_data> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chacha20_poly1305_decrypt__without_associated_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chacha20_poly1305_encrypt__with_associated_data> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chacha20_poly1305_encrypt__with_associated_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chacha20_poly1305_encrypt__without_associated_data> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chacha20_poly1305_encrypt__without_associated_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_crypto> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_crypto>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_cryptography_is_available> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_cryptography_is_available>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_decrypt_message> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_decrypt_message>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_encrypt_message> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_encrypt_message>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_libsecp256k1_is_available> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_libsecp256k1_is_available>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_op_push> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_op_push>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_push_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_push_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_pyaes_is_available> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_pyaes_is_available>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_pycryptodomex_is_available> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_pycryptodomex_is_available>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_script_num_to_hex> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_script_num_to_hex>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sha256d> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sha256d>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_signmessage_legacy_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_signmessage_legacy_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_signmessage_low_s> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_signmessage_low_s>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_signmessage_segwit_witness_v0_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_signmessage_segwit_witness_v0_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_signmessage_segwit_witness_v0_address_test_we_also_accept_sigs_from_trezor> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_signmessage_segwit_witness_v0_address_test_we_also_accept_sigs_from_trezor>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_var_int> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_var_int>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::Test_bitcoin' lenresult=30 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_bitcoin_testnet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_bitcoin_testnet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_bitcoin_testnet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::Test_bitcoin_testnet' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_address_to_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_address_to_script>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::Test_bitcoin_testnet' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_xprv_xpub> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_xprv_xpub>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_xprv_xpub>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::Test_xprv_xpub' lenresult=14 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bip32> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip32>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip32_from_xkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip32_from_xkey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_convert_bip32_intpath_to_strpath> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_convert_bip32_intpath_to_strpath>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_convert_bip32_strpath_to_intpath> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_convert_bip32_strpath_to_intpath>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_all_public_derivation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_all_public_derivation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_bip32_derivation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_bip32_derivation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_xkey_consistent_with_key_origin_info> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_xkey_consistent_with_key_origin_info>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_xprv> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_xprv>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_xpub> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_xpub>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_normalize_bip32_derivation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_normalize_bip32_derivation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_version_bytes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_version_bytes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_xpub_from_xprv> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_xpub_from_xprv>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_xpub_type> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_xpub_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_xtype_from_derivation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_xtype_from_derivation>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::Test_xprv_xpub' lenresult=14 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_xprv_xpub_testnet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_xprv_xpub_testnet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_xprv_xpub_testnet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::Test_xprv_xpub_testnet' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_version_bytes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_version_bytes>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::Test_xprv_xpub_testnet' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_keyImport> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_keyImport>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_keyImport>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::Test_keyImport' lenresult=11 outcome='passed'> [hook]
    genitems <TestCaseFunction test_address_from_private_key> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_address_from_private_key>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_address_to_scripthash> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_address_to_scripthash>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_address_bad_checksums> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_address_bad_checksums>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_compressed_privkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_compressed_privkey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_minikey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_minikey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_private_key> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_private_key>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_valid_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_valid_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_public_key_from_private_key> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_public_key_from_private_key>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_segwit_uncompressed_pubkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_segwit_uncompressed_pubkey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_serialize_privkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_serialize_privkey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wif_with_invalid_magic_byte_for_compressed_pubkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wif_with_invalid_magic_byte_for_compressed_pubkey>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::Test_keyImport' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestBaseEncode> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestBaseEncode>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestBaseEncode>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::TestBaseEncode' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_base43> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_base43>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_base58> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_base58>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_base58check> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_base58check>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::TestBaseEncode' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestTaprootHelpers> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestTaprootHelpers>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestTaprootHelpers>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bitcoin.py::TestTaprootHelpers' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_taproot_output_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_taproot_output_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_taproot_tweak_homomorphism> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_taproot_tweak_homomorphism>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py::TestTaprootHelpers' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bitcoin.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_blockchain.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_blockchain.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_blockchain.py>
      find_module called for: tests.test_blockchain [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_blockchain.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_blockchain.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: shutil
            obj: <module 'shutil' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/shutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: blockchain
            obj: <module 'electrum.blockchain' from '/home/reconfigure/electrum/electrum/blockchain.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: Blockchain
            obj: <class 'electrum.blockchain.Blockchain'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: deserialize_header
            obj: <function deserialize_header at 0x7fb938bf8180>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: hash_header
            obj: <function hash_header at 0x7fb938bf82c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: InvalidHeader
            obj: <class 'electrum.blockchain.InvalidHeader'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: make_dir
            obj: <function make_dir at 0x7fb93a0fa3e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: TestBlockchain
            obj: <class 'tests.test_blockchain.TestBlockchain'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestBlockchain> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_blockchain.py>
            name: TestVerifyHeader
            obj: <class 'tests.test_blockchain.TestVerifyHeader'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestVerifyHeader> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_blockchain.py' lenresult=3 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_blockchain.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_blockchain.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestBlockchain> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestBlockchain>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestBlockchain>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_blockchain.py::TestBlockchain' lenresult=6 outcome='passed'> [hook]
    genitems <TestCaseFunction test_doing_multiple_swaps_after_single_new_header> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doing_multiple_swaps_after_single_new_header>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_forking_and_swapping> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_forking_and_swapping>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_chains_that_contain_header> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_chains_that_contain_header>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_height_of_last_common_block_with_chain> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_height_of_last_common_block_with_chain>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parents_after_forking> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parents_after_forking>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_target_to_bits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_target_to_bits>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_blockchain.py::TestBlockchain' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestVerifyHeader> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestVerifyHeader>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestVerifyHeader>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_blockchain.py::TestVerifyHeader' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_expected_hash_mismatch> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_expected_hash_mismatch>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_insufficient_pow> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_insufficient_pow>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_prev_hash_mismatch> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_prev_hash_mismatch>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_target_mismatch> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_target_mismatch>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_header> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_header>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_blockchain.py::TestVerifyHeader' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_blockchain.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_bolt11.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_bolt11.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_bolt11.py>
      find_module called for: tests.test_bolt11 [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_bolt11.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_bolt11.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: sha256
            obj: <built-in function openssl_sha256>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: Decimal
            obj: <class 'decimal.Decimal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: unhexlify
            obj: <built-in function unhexlify>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: hexlify
            obj: <built-in function hexlify>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: pprint
            obj: <module 'pprint' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/pprint.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: shorten_amount
            obj: <function shorten_amount at 0x7fb93946c0e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: unshorten_amount
            obj: <function unshorten_amount at 0x7fb93946c220>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: LnAddr
            obj: <class 'electrum.lnaddr.LnAddr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: lnencode
            obj: <function lnencode at 0x7fb93946c720>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: lndecode
            obj: <function lndecode at 0x7fb93946c7c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: bech32_encode
            obj: <function bech32_encode at 0x7fb93a17af20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: bech32_decode
            obj: <function bech32_decode at 0x7fb93a17afc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: segwit_addr
            obj: <module 'electrum.segwit_addr' from '/home/reconfigure/electrum/electrum/segwit_addr.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: UnknownEvenFeatureBits
            obj: <class 'electrum.lnutil.UnknownEvenFeatureBits'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: derive_payment_secret_from_payment_preimage
            obj: <function derive_payment_secret_from_payment_preimage at 0x7fb939342160>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: LnFeatures
            obj: <flag 'LnFeatures'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: IncompatibleLightningFeatures
            obj: <class 'electrum.lnutil.IncompatibleLightningFeatures'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: RHASH
            obj: b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\x01\x02'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: PAYMENT_SECRET
            obj: b'\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: CONVERSION_RATE
            obj: 1200
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: PRIVKEY
            obj: b'\xe1&\xf6\x8f~\xaf\xcc\x8bt\xf5M&\x9f\xe2\x06\xbeqP\x00\xf9M\xac\x06}\x1c\x04\xa8\xca;-\xb74'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: PUBKEY
            obj: b'\x03\xe7\x15j\xe3;\n \x8d\x07D\x19\x91c\x17~\x90\x9e\x80\x17nU\xd9z/"\x1e\xde\x0f\x93M\xd9\xad'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_bolt11.py>
            name: TestBolt11
            obj: <class 'tests.test_bolt11.TestBolt11'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestBolt11> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bolt11.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bolt11.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bolt11.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestBolt11> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestBolt11>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestBolt11>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_bolt11.py::TestBolt11' lenresult=9 outcome='passed'> [hook]
    genitems <TestCaseFunction test_derive_payment_secret_from_payment_preimage> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_derive_payment_secret_from_payment_preimage>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_features> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_features>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_min_final_cltv_expiry_decoding> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_min_final_cltv_expiry_decoding>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_min_final_cltv_expiry_roundtrip> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_min_final_cltv_expiry_roundtrip>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_n_decoding> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_n_decoding>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_secret> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_secret>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_roundtrip> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_roundtrip>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_shorten_amount> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_shorten_amount>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_validate_and_compare_features> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_validate_and_compare_features>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bolt11.py::TestBolt11' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_bolt11.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_coinchooser.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_coinchooser.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_coinchooser.py>
      find_module called for: tests.test_coinchooser [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_coinchooser.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_coinchooser.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_coinchooser.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_coinchooser.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_coinchooser.py>
            name: CoinChooserPrivacy
            obj: <class 'electrum.coinchooser.CoinChooserPrivacy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_coinchooser.py>
            name: NotEnoughFunds
            obj: <class 'electrum.util.NotEnoughFunds'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_coinchooser.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_coinchooser.py>
            name: TestCoinChooser
            obj: <class 'tests.test_coinchooser.TestCoinChooser'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCoinChooser> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_coinchooser.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_coinchooser.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_coinchooser.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCoinChooser> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCoinChooser>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCoinChooser>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_coinchooser.py::TestCoinChooser' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bucket_candidates_with_empty_buckets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bucket_candidates_with_empty_buckets>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_coinchooser.py::TestCoinChooser' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_coinchooser.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_commands.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_commands.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_commands.py>
      find_module called for: tests.test_commands [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_commands.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_commands.py [assertion]
      find_module called for: tests.test_wallet_vertical [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_wallet_vertical.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_wallet_vertical.py [assertion]
      early skip of rewriting module: electrum.slip39 [assertion]
      early skip of rewriting module: electrum.plugins.trustedcoin [assertion]
      early skip of rewriting module: electrum.plugins.trustedcoin.trustedcoin [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: mock
            obj: <module 'unittest.mock' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: Decimal
            obj: <class 'decimal.Decimal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: Commands
            obj: <class 'electrum.commands.Commands'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: eval_bool
            obj: <function eval_bool at 0x7fb936b7f060>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: storage
            obj: <module 'electrum.storage' from '/home/reconfigure/electrum/electrum/storage.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: wallet
            obj: <module 'electrum.wallet' from '/home/reconfigure/electrum/electrum/wallet.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: Abstract_Wallet
            obj: <class 'electrum.wallet.Abstract_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: TX_HEIGHT_UNCONFIRMED
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: Transaction
            obj: <class 'electrum.transaction.Transaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: TxOutput
            obj: <class 'electrum.transaction.TxOutput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: tx_from_any
            obj: <function tx_from_any at 0x7fb9394f5d00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: UserFacingException
            obj: <class 'electrum.util.UserFacingException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: NotEnoughFunds
            obj: <class 'electrum.util.NotEnoughFunds'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: WalletIntegrityHelper
            obj: <class 'tests.test_wallet_vertical.WalletIntegrityHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: TestCommands
            obj: <class 'tests.test_commands.TestCommands'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCommands> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_commands.py>
            name: TestCommandsTestnet
            obj: <class 'tests.test_commands.TestCommandsTestnet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCommandsTestnet> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_commands.py' lenresult=3 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_commands.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_commands.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCommands> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCommands>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCommands>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_commands.py::TestCommands' lenresult=10 outcome='passed'> [hook]
    genitems <TestCaseFunction test_convert_xkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_convert_xkey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_encrypt_decrypt> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_encrypt_decrypt>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_eval_bool> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_eval_bool>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_private_key_deterministic> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_private_key_deterministic>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_private_key_imported> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_private_key_imported>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_setconfig_auth> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_setconfig_auth>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_setconfig_non_auth_boolean> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_setconfig_non_auth_boolean>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_setconfig_non_auth_list> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_setconfig_non_auth_list>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_setconfig_non_auth_number> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_setconfig_non_auth_number>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_setconfig_non_auth_number_as_string> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_setconfig_non_auth_number_as_string>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_commands.py::TestCommands' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCommandsTestnet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCommandsTestnet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCommandsTestnet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_commands.py::TestCommandsTestnet' lenresult=11 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bumpfee> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bumpfee>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_convert_xkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_convert_xkey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_getprivatekeyforpath> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_getprivatekeyforpath>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_importprivkey> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_importprivkey>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payto> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payto>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payto__confirmed_only> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payto__confirmed_only>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_paytomany_multiple_max_spends> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_paytomany_multiple_max_spends>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_serialize> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_serialize>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_serialize_custom_nsequence> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_serialize_custom_nsequence>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_signtransaction_with_wallet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_signtransaction_with_wallet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_signtransaction_without_wallet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_signtransaction_without_wallet>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_commands.py::TestCommandsTestnet' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_commands.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_contacts.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_contacts.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_contacts.py>
      find_module called for: tests.test_contacts [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_contacts.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_contacts.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: Abstract_Wallet
            obj: <class 'electrum.wallet.Abstract_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: Daemon
            obj: <class 'electrum.daemon.Daemon'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_contacts.py>
            name: TestContacts
            obj: <class 'tests.test_contacts.TestContacts'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestContacts> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_contacts.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_contacts.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_contacts.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestContacts> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestContacts>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestContacts>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_contacts.py::TestContacts' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_saving_contacts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_saving_contacts>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_contacts.py::TestContacts' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_contacts.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_daemon.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_daemon.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_daemon.py>
      find_module called for: tests.test_daemon [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_daemon.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_daemon.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: Iterable
            obj: typing.Iterable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: Commands
            obj: <class 'electrum.commands.Commands'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: Daemon
            obj: <class 'electrum.daemon.Daemon'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: Abstract_Wallet
            obj: <class 'electrum.wallet.Abstract_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: as_testnet
            obj: <function as_testnet at 0x7fb93a9c2d40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: DaemonTestCase
            obj: <class 'tests.test_daemon.DaemonTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase DaemonTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: TestUnifiedPassword
            obj: <class 'tests.test_daemon.TestUnifiedPassword'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestUnifiedPassword> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_daemon.py>
            name: TestCommandsWithDaemon
            obj: <class 'tests.test_daemon.TestCommandsWithDaemon'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCommandsWithDaemon> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_daemon.py' lenresult=4 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_daemon.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_daemon.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase DaemonTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase DaemonTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase DaemonTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_daemon.py::DaemonTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_daemon.py::DaemonTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestUnifiedPassword> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestUnifiedPassword>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestUnifiedPassword>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_daemon.py::TestUnifiedPassword' lenresult=6 outcome='passed'> [hook]
    genitems <TestCaseFunction test_can_unify_large_folder_yet_to_be_unified> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_unify_large_folder_yet_to_be_unified>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_unify_two_std_wallets_both_have_ks_and_sto_enc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_unify_two_std_wallets_both_have_ks_and_sto_enc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_unify_two_std_wallets_one_has_ks_enc_other_has_both_enc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_unify_two_std_wallets_one_has_ks_enc_other_has_both_enc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_unify_two_std_wallets_one_without_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_unify_two_std_wallets_one_without_password>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_cannot_unify_mixed_wallets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_cannot_unify_mixed_wallets>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_cannot_unify_two_std_wallets_both_have_ks_and_sto_enc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_cannot_unify_two_std_wallets_both_have_ks_and_sto_enc>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_daemon.py::TestUnifiedPassword' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCommandsWithDaemon> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCommandsWithDaemon>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCommandsWithDaemon>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_daemon.py::TestCommandsWithDaemon' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_wp_command_with_diskfile_wallet_has_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wp_command_with_diskfile_wallet_has_password>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wp_command_with_diskfile_wallet_no_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wp_command_with_diskfile_wallet_no_password>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wp_command_with_inmemory_wallet_has_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wp_command_with_inmemory_wallet_has_password>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wp_command_with_inmemory_wallet_no_password> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wp_command_with_inmemory_wallet_no_password>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_daemon.py::TestCommandsWithDaemon' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_daemon.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_descriptor.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_descriptor.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_descriptor.py>
      find_module called for: tests.test_descriptor [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_descriptor.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_descriptor.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: unhexlify
            obj: <built-in function unhexlify>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: ecc
            obj: <module 'electrum_ecc' from '/home/reconfigure/.local/lib/python3.11/site-packages/electrum_ecc/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: parse_descriptor
            obj: <function parse_descriptor at 0x7fb9394df240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: MultisigDescriptor
            obj: <class 'electrum.descriptor.MultisigDescriptor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: SHDescriptor
            obj: <class 'electrum.descriptor.SHDescriptor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: TRDescriptor
            obj: <class 'electrum.descriptor.TRDescriptor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: PKHDescriptor
            obj: <class 'electrum.descriptor.PKHDescriptor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: WPKHDescriptor
            obj: <class 'electrum.descriptor.WPKHDescriptor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: WSHDescriptor
            obj: <class 'electrum.descriptor.WSHDescriptor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: PubkeyProvider
            obj: <class 'electrum.descriptor.PubkeyProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: as_testnet
            obj: <function as_testnet at 0x7fb93a9c2d40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_descriptor.py>
            name: TestDescriptor
            obj: <class 'tests.test_descriptor.TestDescriptor'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestDescriptor> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_descriptor.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_descriptor.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_descriptor.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestDescriptor> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestDescriptor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestDescriptor>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_descriptor.py::TestDescriptor' lenresult=21 outcome='passed'> [hook]
    genitems <TestCaseFunction test_checksums> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_checksums>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_multisig_descriptor_with_mixed_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_multisig_descriptor_with_mixed_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_context> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_context>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_replace_h> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_replace_h>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_unknown_notation_for_hardened_derivation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_unknown_notation_for_hardened_derivation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_with_key_at_end_with_origin> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_with_key_at_end_with_origin>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_with_key_at_end_without_origin> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_with_key_at_end_without_origin>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_with_origin> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_with_origin>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_with_origin_fingerprint_only> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_with_origin_fingerprint_only>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_with_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_with_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_without_origin> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_without_origin>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_descriptor_ypub_zpub_forbidden> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_descriptor_ypub_zpub_forbidden>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_empty_descriptor> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_empty_descriptor>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_multisig_descriptor_with_origin> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_multisig_descriptor_with_origin>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_multisig_descriptor_with_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_multisig_descriptor_with_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_pubkey_provider_deriv_path> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_pubkey_provider_deriv_path>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sortedmulti_ranged_pubkey_order> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sortedmulti_ranged_pubkey_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sortedmulti_unranged_pubkey_order> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sortedmulti_unranged_pubkey_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tr_descriptor> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tr_descriptor>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tr_descriptor_bip386> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tr_descriptor_bip386>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_uncompressed_pubkey_in_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_uncompressed_pubkey_in_segwit>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_descriptor.py::TestDescriptor' lenresult=21 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_descriptor.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_interface.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_interface.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_interface.py>
      find_module called for: tests.test_interface [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_interface.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_interface.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_interface.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_interface.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_interface.py>
            name: ServerAddr
            obj: <class 'electrum.interface.ServerAddr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_interface.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_interface.py>
            name: TestServerAddr
            obj: <class 'tests.test_interface.TestServerAddr'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestServerAddr> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_interface.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_interface.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_interface.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestServerAddr> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestServerAddr>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestServerAddr>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_interface.py::TestServerAddr' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_from_str> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_from_str>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_from_str_with_inference> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_from_str_with_inference>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_to_friendly_name> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_to_friendly_name>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_interface.py::TestServerAddr' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_interface.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_invoices.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_invoices.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_invoices.py>
      find_module called for: tests.test_invoices [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_invoices.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_invoices.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: time
            obj: <module 'time' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: Standard_Wallet
            obj: <class 'electrum.wallet.Standard_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: Abstract_Wallet
            obj: <class 'electrum.wallet.Abstract_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: PR_UNPAID
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: PR_PAID
            obj: 3
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: PR_UNCONFIRMED
            obj: 7
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: BaseInvoice
            obj: <class 'electrum.invoices.BaseInvoice'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: Invoice
            obj: <class 'electrum.invoices.Invoice'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: LN_EXPIRY_NEVER
            obj: 3153600000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: TX_HEIGHT_UNCONFIRMED
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: Transaction
            obj: <class 'electrum.transaction.Transaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: PartialTxOutput
            obj: <class 'electrum.transaction.PartialTxOutput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: TxMinedInfo
            obj: <class 'electrum.util.TxMinedInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: InvoiceError
            obj: <class 'electrum.util.InvoiceError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: TestWalletPaymentRequests
            obj: <class 'tests.test_invoices.TestWalletPaymentRequests'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletPaymentRequests> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_invoices.py>
            name: TestBaseInvoice
            obj: <class 'tests.test_invoices.TestBaseInvoice'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestBaseInvoice> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_invoices.py' lenresult=3 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_invoices.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_invoices.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletPaymentRequests> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletPaymentRequests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletPaymentRequests>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_invoices.py::TestWalletPaymentRequests' lenresult=7 outcome='passed'> [hook]
    genitems <TestCaseFunction test_wallet_get_request_by_addr> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_get_request_by_addr>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_gets_paid_onchain_in_the_past> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_gets_paid_onchain_in_the_past>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_reuse_addr_of_expired_request> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_reuse_addr_of_expired_request>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_reuse_unused_fallback_onchain_addr_when_getting_paid_with_lightning> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_reuse_unused_fallback_onchain_addr_when_getting_paid_with_lightning>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_on_ln> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_on_ln>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_onchain> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_onchain>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_without_ln_creates_payreq_and_gets_paid_onchain> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_without_ln_creates_payreq_and_gets_paid_onchain>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_invoices.py::TestWalletPaymentRequests' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestBaseInvoice> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestBaseInvoice>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestBaseInvoice>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_invoices.py::TestBaseInvoice' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_arg_validation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_arg_validation>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_invoices.py::TestBaseInvoice' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_invoices.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lnchannel.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lnchannel.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lnchannel.py>
      find_module called for: tests.test_lnchannel [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lnchannel.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lnchannel.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: binascii
            obj: <module 'binascii' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/lib-dynload/binascii.cpython-311-x86_64-linux-gnu.so'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: pformat
            obj: <function pformat at 0x7fb9509b0400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: logging
            obj: <module 'logging' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: bitcoin
            obj: <module 'electrum.bitcoin' from '/home/reconfigure/electrum/electrum/bitcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: lnpeer
            obj: <module 'electrum.lnpeer' from '/home/reconfigure/electrum/electrum/lnpeer.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: lnchannel
            obj: <module 'electrum.lnchannel' from '/home/reconfigure/electrum/electrum/lnchannel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: lnutil
            obj: <module 'electrum.lnutil' from '/home/reconfigure/electrum/electrum/lnutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: bip32_utils
            obj: <module 'electrum.bip32' from '/home/reconfigure/electrum/electrum/bip32.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: privkey_to_pubkey
            obj: <function privkey_to_pubkey at 0x7fb939eb9440>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: SENT
            obj: -1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: LOCAL
            obj: 1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: REMOTE
            obj: -1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: RECEIVED
            obj: 1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: UpdateAddHtlc
            obj: <class 'electrum.lnutil.UpdateAddHtlc'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: effective_htlc_tx_weight
            obj: <function effective_htlc_tx_weight at 0x7fb939340a40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: console_stderr_handler
            obj: <StreamHandler <_io.FileIO name=8 mode='rb+' closefd=True> (WARNING)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: ChannelState
            obj: <enum 'ChannelState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: StoredDict
            obj: <class 'electrum.json_db.StoredDict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: PRNG
            obj: <class 'electrum.coinchooser.PRNG'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: one_bitcoin_in_msat
            obj: 100000000000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: create_channel_state
            obj: <function create_channel_state at 0x7fb9369656c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: bip32
            obj: <function bip32 at 0x7fb936965760>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: create_test_channels
            obj: <function create_test_channels at 0x7fb936965800>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestFee
            obj: <class 'tests.test_lnchannel.TestFee'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestFee> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestChannel
            obj: <class 'tests.test_lnchannel.TestChannel'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestChannel> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestChannelAnchors
            obj: <class 'tests.test_lnchannel.TestChannelAnchors'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestChannelAnchors> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestAvailableToSpend
            obj: <class 'tests.test_lnchannel.TestAvailableToSpend'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestAvailableToSpend> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestAvailableToSpendAnchors
            obj: <class 'tests.test_lnchannel.TestAvailableToSpendAnchors'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestAvailableToSpendAnchors> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestChanReserve
            obj: <class 'tests.test_lnchannel.TestChanReserve'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestChanReserve> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestChanReserveAnchors
            obj: <class 'tests.test_lnchannel.TestChanReserveAnchors'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestChanReserveAnchors> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestDust
            obj: <class 'tests.test_lnchannel.TestDust'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestDust> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: TestDustAnchors
            obj: <class 'tests.test_lnchannel.TestDustAnchors'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestDustAnchors> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnchannel.py>
            name: force_state_transition
            obj: <function force_state_transition at 0x7fb9369658a0>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py' lenresult=10 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestFee> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestFee>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestFee>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestFee' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_fee> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_fee>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestFee' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestChannel> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestChannel>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestChannel>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestChannel' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_AddHTLCNegativeBalance> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_AddHTLCNegativeBalance>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_SimpleAddSettleWorkflow> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_SimpleAddSettleWorkflow>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_UpdateFeeReceiverCommits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_UpdateFeeReceiverCommits>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_UpdateFeeSenderCommits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_UpdateFeeSenderCommits>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_concurrent_reversed_payment> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_concurrent_reversed_payment>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestChannel' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestChannelAnchors> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestChannelAnchors>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestChannelAnchors>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestChannelAnchors' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_AddHTLCNegativeBalance> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_AddHTLCNegativeBalance>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_SimpleAddSettleWorkflow> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_SimpleAddSettleWorkflow>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_UpdateFeeReceiverCommits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_UpdateFeeReceiverCommits>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_UpdateFeeSenderCommits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_UpdateFeeSenderCommits>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_concurrent_reversed_payment> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_concurrent_reversed_payment>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestChannelAnchors' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestAvailableToSpend> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestAvailableToSpend>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestAvailableToSpend>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestAvailableToSpend' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_DesyncHTLCs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_DesyncHTLCs>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestAvailableToSpend' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestAvailableToSpendAnchors> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestAvailableToSpendAnchors>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestAvailableToSpendAnchors>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestAvailableToSpendAnchors' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_DesyncHTLCs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_DesyncHTLCs>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestAvailableToSpendAnchors' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestChanReserve> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestChanReserve>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestChanReserve>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestChanReserve' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_part1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_part1>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestChanReserve' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestChanReserveAnchors> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestChanReserveAnchors>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestChanReserveAnchors>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestChanReserveAnchors' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_part1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_part1>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestChanReserveAnchors' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestDust> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestDust>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestDust>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestDust' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_DustLimit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_DustLimit>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestDust' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestDustAnchors> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestDustAnchors>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestDustAnchors>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnchannel.py::TestDustAnchors' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_DustLimit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_DustLimit>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py::TestDustAnchors' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnchannel.py' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lnhtlc.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lnhtlc.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lnhtlc.py>
      find_module called for: tests.test_lnhtlc [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lnhtlc.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lnhtlc.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: pprint
            obj: <function pprint at 0x7fb9509b0360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: NamedTuple
            obj: <function NamedTuple at 0x7fb950af99e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: RECEIVED
            obj: 1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: LOCAL
            obj: 1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: REMOTE
            obj: -1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: SENT
            obj: -1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: HTLCOwner
            obj: <enum 'HTLCOwner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: Direction
            obj: <enum 'Direction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: HTLCManager
            obj: <class 'electrum.lnhtlc.HTLCManager'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: StoredDict
            obj: <class 'electrum.json_db.StoredDict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: H
            obj: <class 'tests.test_lnhtlc.H'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnhtlc.py>
            name: TestHTLCManager
            obj: <class 'tests.test_lnhtlc.TestHTLCManager'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestHTLCManager> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnhtlc.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnhtlc.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnhtlc.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestHTLCManager> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestHTLCManager>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestHTLCManager>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnhtlc.py::TestHTLCManager' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_adding_htlc_between_send_ctx_and_recv_rev> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_adding_htlc_between_send_ctx_and_recv_rev>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_adding_htlcs_race> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_adding_htlcs_race>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_remove_htlc_while_owing_commitment> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_remove_htlc_while_owing_commitment>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_single_htlc_full_lifecycle> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_single_htlc_full_lifecycle>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_unacked_local_updates> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_unacked_local_updates>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnhtlc.py::TestHTLCManager' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnhtlc.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lnmsg.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lnmsg.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lnmsg.py>
      find_module called for: tests.test_lnmsg [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lnmsg.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lnmsg.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: io
            obj: <module 'io' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: read_bigsize_int
            obj: <function read_bigsize_int at 0x7fb9383959e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: write_bigsize_int
            obj: <function write_bigsize_int at 0x7fb938395940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: FieldEncodingNotMinimal
            obj: <class 'electrum.lnmsg.FieldEncodingNotMinimal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: UnexpectedEndOfStream
            obj: <class 'electrum.lnmsg.UnexpectedEndOfStream'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: LNSerializer
            obj: <class 'electrum.lnmsg.LNSerializer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: UnknownMandatoryTLVRecordType
            obj: <class 'electrum.lnmsg.UnknownMandatoryTLVRecordType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: MalformedMsg
            obj: <class 'electrum.lnmsg.MalformedMsg'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: MsgTrailingGarbage
            obj: <class 'electrum.lnmsg.MsgTrailingGarbage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: MsgInvalidFieldOrder
            obj: <class 'electrum.lnmsg.MsgInvalidFieldOrder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: encode_msg
            obj: <bound method LNSerializer.encode_msg of <electrum.lnmsg.LNSerializer object at 0x7fb9383baa50>>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: decode_msg
            obj: <bound method LNSerializer.decode_msg of <electrum.lnmsg.LNSerializer object at 0x7fb9383baa50>>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: UnexpectedFieldSizeForEncoder
            obj: <class 'electrum.lnmsg.UnexpectedFieldSizeForEncoder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: OnionWireSerializer
            obj: <electrum.lnmsg.LNSerializer object at 0x7fb9383bab90>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: UnknownMsgType
            obj: <class 'electrum.lnmsg.UnknownMsgType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: OnionRoutingFailure
            obj: <class 'electrum.lnonion.OnionRoutingFailure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: ShortChannelID
            obj: <class 'electrum.util.ShortID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: LnFeatures
            obj: <flag 'LnFeatures'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnmsg.py>
            name: TestLNMsg
            obj: <class 'tests.test_lnmsg.TestLNMsg'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestLNMsg> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnmsg.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnmsg.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnmsg.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestLNMsg> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestLNMsg>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestLNMsg>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnmsg.py::TestLNMsg' lenresult=10 outcome='passed'> [hook]
    genitems <TestCaseFunction test_decode_onion_error> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_decode_onion_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_encode_decode_msg__commitment_signed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_encode_decode_msg__commitment_signed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_encode_decode_msg__init> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_encode_decode_msg__init>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_encode_decode_msg__ints_can_be_passed_as_bytes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_encode_decode_msg__ints_can_be_passed_as_bytes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_encode_decode_msg__missing_mandatory_field_gets_set_to_zeroes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_encode_decode_msg__missing_mandatory_field_gets_set_to_zeroes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_bigsize_int> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_bigsize_int>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_tlv_stream_tests1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_tlv_stream_tests1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_tlv_stream_tests2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_tlv_stream_tests2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_tlv_stream_tests3> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_tlv_stream_tests3>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_write_bigsize_int> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_write_bigsize_int>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnmsg.py::TestLNMsg' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnmsg.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lnpeer.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lnpeer.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lnpeer.py>
      find_module called for: tests.test_lnpeer [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lnpeer.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lnpeer.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: shutil
            obj: <module 'shutil' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/shutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: copy
            obj: <module 'copy' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/copy.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Decimal
            obj: <class 'decimal.Decimal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: contextmanager
            obj: <function contextmanager at 0x7fb950c6b600>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: defaultdict
            obj: <class 'collections.defaultdict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: logging
            obj: <module 'logging' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: concurrent
            obj: <module 'concurrent' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/concurrent/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: futures
            obj: <module 'concurrent.futures' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/concurrent/futures/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Iterable
            obj: typing.Iterable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: NamedTuple
            obj: <function NamedTuple at 0x7fb950af99e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Tuple
            obj: typing.Tuple
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: timeout_after
            obj: <function timeout_after at 0x7fb93a440e00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: TaskTimeout
            obj: <class 'aiorpcx.curio.TaskTimeout'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: ECPrivkey
            obj: <class 'electrum_ecc.ECPrivkey'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: electrum
            obj: <module 'electrum' from '/home/reconfigure/electrum/electrum/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: bitcoin
            obj: <module 'electrum.bitcoin' from '/home/reconfigure/electrum/electrum/bitcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Network
            obj: <class 'electrum.network.Network'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: simple_config
            obj: <module 'electrum.simple_config' from '/home/reconfigure/electrum/electrum/simple_config.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: lnutil
            obj: <module 'electrum.lnutil' from '/home/reconfigure/electrum/electrum/lnutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: lnencode
            obj: <function lnencode at 0x7fb93946c720>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: LnAddr
            obj: <class 'electrum.lnaddr.LnAddr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: lndecode
            obj: <function lndecode at 0x7fb93946c7c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: COIN
            obj: 100000000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: sha256
            obj: <function sha256 at 0x7fb939eb8cc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Transaction
            obj: <class 'electrum.transaction.Transaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: NetworkRetryManager
            obj: <class 'electrum.util.NetworkRetryManager'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: OldTaskGroup
            obj: <class 'electrum.util.OldTaskGroup'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: EventListener
            obj: <class 'electrum.util.EventListener'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: InvoiceError
            obj: <class 'electrum.util.InvoiceError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Peer
            obj: <class 'electrum.lnpeer.Peer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: LNPeerAddr
            obj: <class 'electrum.lntransport.LNPeerAddr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: privkey_to_pubkey
            obj: <function privkey_to_pubkey at 0x7fb939eb9440>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Keypair
            obj: <class 'electrum.lnutil.Keypair'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PaymentFailure
            obj: <class 'electrum.lnutil.PaymentFailure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: LnFeatures
            obj: <flag 'LnFeatures'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: HTLCOwner
            obj: <enum 'HTLCOwner'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PaymentFeeBudget
            obj: <class 'electrum.lnutil.PaymentFeeBudget'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: ChannelState
            obj: <enum 'ChannelState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PeerState
            obj: <enum 'PeerState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Channel
            obj: <class 'electrum.lnchannel.Channel'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: LNPathFinder
            obj: <class 'electrum.lnrouter.LNPathFinder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PathEdge
            obj: <class 'electrum.lnrouter.PathEdge'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: LNPathInconsistent
            obj: <class 'electrum.lnrouter.LNPathInconsistent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: ChannelDB
            obj: <class 'electrum.channel_db.ChannelDB'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: LNWallet
            obj: <class 'electrum.lnworker.LNWallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: NoPathFound
            obj: <class 'electrum.lnutil.NoPathFound'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: SentHtlcInfo
            obj: <class 'electrum.lnworker.SentHtlcInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PaySession
            obj: <class 'electrum.lnworker.PaySession'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: encode_msg
            obj: <bound method LNSerializer.encode_msg of <electrum.lnmsg.LNSerializer object at 0x7fb9383baa50>>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: decode_msg
            obj: <bound method LNSerializer.decode_msg of <electrum.lnmsg.LNSerializer object at 0x7fb9383baa50>>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: lnmsg
            obj: <module 'electrum.lnmsg' from '/home/reconfigure/electrum/electrum/lnmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: console_stderr_handler
            obj: <StreamHandler <_io.FileIO name=8 mode='rb+' closefd=True> (WARNING)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Logger
            obj: <class 'electrum.logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PaymentInfo
            obj: <class 'electrum.lnworker.PaymentInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: RECEIVED
            obj: 1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: OnionFailureCode
            obj: <enum 'OnionFailureCode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: OnionRoutingFailure
            obj: <class 'electrum.lnonion.OnionRoutingFailure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: UpdateAddHtlc
            obj: <class 'electrum.lnutil.UpdateAddHtlc'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: LOCAL
            obj: 1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: REMOTE
            obj: -1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PR_PAID
            obj: 3
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PR_UNPAID
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: GracefulDisconnect
            obj: <class 'electrum.interface.GracefulDisconnect'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: create_test_channels
            obj: <function create_test_channels at 0x7fb936965800>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: needs_test_with_all_chacha20_implementations
            obj: <function needs_test_with_all_chacha20_implementations at 0x7fb936a131a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: keypair
            obj: <function keypair at 0x7fb9369a4cc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: noop_lock
            obj: <function noop_lock at 0x7fb9369a4e00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: MockNetwork
            obj: <class 'tests.test_lnpeer.MockNetwork'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: MockBlockchain
            obj: <class 'tests.test_lnpeer.MockBlockchain'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: MockADB
            obj: <class 'tests.test_lnpeer.MockADB'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: MockWallet
            obj: <class 'tests.test_lnpeer.MockWallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: MockLNGossip
            obj: <class 'tests.test_lnpeer.MockLNGossip'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: MockLNWallet
            obj: <class 'tests.test_lnpeer.MockLNWallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: MockTransport
            obj: <class 'tests.test_lnpeer.MockTransport'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: NoFeaturesTransport
            obj: <class 'tests.test_lnpeer.NoFeaturesTransport'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PutIntoOthersQueueTransport
            obj: <class 'tests.test_lnpeer.PutIntoOthersQueueTransport'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: transport_pair
            obj: <function transport_pair at 0x7fb9369a58a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PeerInTests
            obj: <class 'tests.test_lnpeer.PeerInTests'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: high_fee_channel
            obj: {'local_balance_msat': 500000000000, 'remote_balance_msat': 500000000000, 'local_base_fee_msat': 500000, 'local_fee_rate_millionths': 500, 'remote_base_fee_msat': 500000, 'remote_fee_rate_millionths': 500}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: low_fee_channel
            obj: {'local_balance_msat': 500000000000, 'remote_balance_msat': 500000000000, 'local_base_fee_msat': 1000, 'local_fee_rate_millionths': 1, 'remote_base_fee_msat': 1000, 'remote_fee_rate_millionths': 1}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: depleted_channel
            obj: {'local_balance_msat': 330000, 'remote_balance_msat': 1000000000000, 'local_base_fee_msat': 1000, 'local_fee_rate_millionths': 1, 'remote_base_fee_msat': 1000, 'remote_fee_rate_millionths': 1}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: _GRAPH_DEFINITIONS
            obj: {'square_graph': {'alice': {'channels': {'bob': {'local_balance_msat': 500000000000, 'remote_balance_msat': 500000000000, 'local_base_fee_msat': 500000, 'local_fee_rate_millionths': 500, 'remote_base_fee_msat': 500000, 'remote_fee_rate_millionths': 500}, 'carol': {'local_balance_msat': 500000000000, 'remote_balance_msat': 500000000000, 'local_base_fee_msat': 1000, 'local_fee_rate_millionths': 1, 'remote_base_fee_msat': 1000, 'remote_fee_rate_millionths': 1}}}, 'bob': {'channels': {'dave': {'local_balance_msat': 500000000000, 'remote_balance_msat': 500000000000, 'local_base_fee_msat': 500000, 'local_fee_rate_millionths': 500, 'remote_base_fee_msat': 500000, 'remote_fee_rate_millionths': 500}}, 'config': {<ConfigVar key='lightning_forward_payments'>: True, <ConfigVar key='lightning_forward_trampoline_payments'>: True}}, 'carol': {'channels': {'dave': {'local_balance_msat': 500000000000, 'remote_balance_msat': 500000000000, 'local_base_fee_msat': 1000, 'local_fee_rate_millionths': 1, 'remote_base_fee_msat': 1000, 'remote_fee_rate_millionths': 1}}, 'config': {<ConfigVar key='lightning_forward_payments'>: True, <ConfigVar key='lightning_forward_trampoline_payments'>: True}}, 'dave': {}}}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: Graph
            obj: <class 'tests.test_lnpeer.Graph'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PaymentDone
            obj: <class 'tests.test_lnpeer.PaymentDone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: PaymentTimeout
            obj: <class 'tests.test_lnpeer.PaymentTimeout'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: SuccessfulTest
            obj: <class 'tests.test_lnpeer.SuccessfulTest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: TestPeer
            obj: <class 'tests.test_lnpeer.TestPeer'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPeer> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: TestPeerDirect
            obj: <class 'tests.test_lnpeer.TestPeerDirect'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPeerDirect> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: TestPeerForwarding
            obj: <class 'tests.test_lnpeer.TestPeerForwarding'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPeerForwarding> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: TestPeerDirectAnchors
            obj: <class 'tests.test_lnpeer.TestPeerDirectAnchors'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPeerDirectAnchors> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: TestPeerForwardingAnchors
            obj: <class 'tests.test_lnpeer.TestPeerForwardingAnchors'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPeerForwardingAnchors> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnpeer.py>
            name: run
            obj: <function run at 0x7fb9369a74c0>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnpeer.py' lenresult=6 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnpeer.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnpeer.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPeer> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPeer>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPeer>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnpeer.py::TestPeer' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnpeer.py::TestPeer' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPeerDirect> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPeerDirect>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPeerDirect>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnpeer.py::TestPeerDirect' lenresult=25 outcome='passed'> [hook]
    genitems <TestCaseFunction test_channel_usage_after_closing> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_channel_usage_after_closing>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_invoice_before_payment> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_invoice_before_payment>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_close_upfront_shutdown_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_close_upfront_shutdown_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_error> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_legacy_shutdown_high> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_legacy_shutdown_high>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_legacy_shutdown_low> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_legacy_shutdown_low>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_modern_shutdown_with_overlap> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_modern_shutdown_with_overlap>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_bundle> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_bundle>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_bundle_timeout> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_bundle_timeout>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_race> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_race>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_recv_mpp_confusion1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_recv_mpp_confusion1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_recv_mpp_confusion2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_recv_mpp_confusion2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payments_stresstest> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payments_stresstest>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish_replay_messages_rev_then_sig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish_replay_messages_rev_then_sig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish_replay_messages_sig_then_rev> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish_replay_messages_sig_then_rev>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish_with_old_state> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish_with_old_state>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_weird_messages__unknown_even_type> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_weird_messages__unknown_even_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_weird_messages_that_should_be_ignored> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_weird_messages_that_should_be_ignored>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_failure_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_failure_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_success> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_success_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_success_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_warning> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_warning>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnpeer.py::TestPeerDirect' lenresult=25 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPeerForwarding> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPeerForwarding>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPeerForwarding>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnpeer.py::TestPeerForwarding' lenresult=19 outcome='passed'> [hook]
    genitems <TestCaseFunction test_fail_pending_htlcs_on_shutdown> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_fail_pending_htlcs_on_shutdown>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop_route_around_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop_route_around_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop_temp_node_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop_temp_node_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop_with_preselected_path> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop_with_preselected_path>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_trampoline_e2e> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_trampoline_e2e>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_trampoline_legacy> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_trampoline_legacy>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_with_timeout> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_with_timeout>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_wrong_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_wrong_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_trampoline_e2e_direct> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_trampoline_e2e_direct>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_trampoline_e2e_indirect> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_trampoline_e2e_indirect>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_trampoline_legacy> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_trampoline_legacy>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_trampoline_mpp_consolidation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_trampoline_mpp_consolidation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnpeer.py::TestPeerForwarding' lenresult=19 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPeerDirectAnchors> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPeerDirectAnchors>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPeerDirectAnchors>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnpeer.py::TestPeerDirectAnchors' lenresult=25 outcome='passed'> [hook]
    genitems <TestCaseFunction test_channel_usage_after_closing> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_channel_usage_after_closing>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_invoice_before_payment> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_invoice_before_payment>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_close_upfront_shutdown_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_close_upfront_shutdown_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_error> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_legacy_shutdown_high> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_legacy_shutdown_high>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_legacy_shutdown_low> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_legacy_shutdown_low>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_modern_shutdown_with_overlap> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_modern_shutdown_with_overlap>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_bundle> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_bundle>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_bundle_timeout> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_bundle_timeout>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_race> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_race>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_recv_mpp_confusion1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_recv_mpp_confusion1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_recv_mpp_confusion2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_recv_mpp_confusion2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payments_stresstest> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payments_stresstest>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish_replay_messages_rev_then_sig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish_replay_messages_rev_then_sig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish_replay_messages_sig_then_rev> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish_replay_messages_sig_then_rev>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reestablish_with_old_state> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reestablish_with_old_state>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_weird_messages__unknown_even_type> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_weird_messages__unknown_even_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_weird_messages_that_should_be_ignored> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_weird_messages_that_should_be_ignored>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_failure_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_failure_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_success> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_payment_success_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_payment_success_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_warning> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_warning>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnpeer.py::TestPeerDirectAnchors' lenresult=25 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPeerForwardingAnchors> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPeerForwardingAnchors>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPeerForwardingAnchors>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnpeer.py::TestPeerForwardingAnchors' lenresult=19 outcome='passed'> [hook]
    genitems <TestCaseFunction test_fail_pending_htlcs_on_shutdown> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_fail_pending_htlcs_on_shutdown>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop_route_around_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop_route_around_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop_temp_node_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop_temp_node_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multihop_with_preselected_path> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multihop_with_preselected_path>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_trampoline_e2e> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_trampoline_e2e>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_trampoline_legacy> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_trampoline_legacy>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_with_timeout> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_with_timeout>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_multipart_wrong_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_multipart_wrong_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_trampoline_e2e_direct> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_trampoline_e2e_direct>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_trampoline_e2e_indirect> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_trampoline_e2e_indirect>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_trampoline_legacy> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_trampoline_legacy>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_trampoline_mpp_consolidation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_trampoline_mpp_consolidation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnpeer.py::TestPeerForwardingAnchors' lenresult=19 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnpeer.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lnrouter.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lnrouter.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lnrouter.py>
      find_module called for: tests.test_lnrouter [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lnrouter.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lnrouter.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: inf
            obj: inf
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: shutil
            obj: <module 'shutil' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/shutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: ShortChannelID
            obj: <class 'electrum.util.ShortID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: OnionHopsDataSingle
            obj: <class 'electrum.lnonion.OnionHopsDataSingle'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: new_onion_packet
            obj: <function new_onion_packet at 0x7fb9383f2e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: process_onion_packet
            obj: <function process_onion_packet at 0x7fb9383f3100>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: _decode_onion_error
            obj: <function _decode_onion_error at 0x7fb9383f3b00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: decode_onion_error
            obj: <function decode_onion_error at 0x7fb9383f3ba0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: OnionFailureCode
            obj: <enum 'OnionFailureCode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: OnionPacket
            obj: <class 'electrum.lnonion.OnionPacket'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: bitcoin
            obj: <module 'electrum.bitcoin' from '/home/reconfigure/electrum/electrum/bitcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: lnrouter
            obj: <module 'electrum.lnrouter' from '/home/reconfigure/electrum/electrum/lnrouter.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: BitcoinTestnet
            obj: <class 'electrum.constants.BitcoinTestnet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: PathEdge
            obj: <class 'electrum.lnrouter.PathEdge'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: LiquidityHintMgr
            obj: <class 'electrum.lnrouter.LiquidityHintMgr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: DEFAULT_PENALTY_PROPORTIONAL_MILLIONTH
            obj: 100
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: DEFAULT_PENALTY_BASE_MSAT
            obj: 500
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: fee_for_edge_msat
            obj: <function fee_for_edge_msat at 0x7fb938313ba0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: needs_test_with_all_chacha20_implementations
            obj: <function needs_test_with_all_chacha20_implementations at 0x7fb936a131a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: channel
            obj: <function channel at 0x7fb9369e7a60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: node
            obj: <function node at 0x7fb9369e79c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnrouter.py>
            name: Test_LNRouter
            obj: <class 'tests.test_lnrouter.Test_LNRouter'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_LNRouter> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnrouter.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnrouter.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnrouter.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_LNRouter> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_LNRouter>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_LNRouter>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnrouter.py::Test_LNRouter' lenresult=7 outcome='passed'> [hook]
    genitems <TestCaseFunction test_decode_onion_error> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_decode_onion_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_find_path_for_payment> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_find_path_for_payment>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_find_path_liquidity_hints> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_find_path_liquidity_hints>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_find_path_liquidity_hints_inflight_htlcs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_find_path_liquidity_hints_inflight_htlcs>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_liquidity_hints> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_liquidity_hints>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_new_onion_packet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_new_onion_packet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_process_onion_packet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_process_onion_packet>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnrouter.py::Test_LNRouter' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnrouter.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lntransport.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lntransport.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lntransport.py>
      find_module called for: tests.test_lntransport [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lntransport.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lntransport.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: ecc
            obj: <module 'electrum_ecc' from '/home/reconfigure/.local/lib/python3.11/site-packages/electrum_ecc/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: LNPeerAddr
            obj: <class 'electrum.lntransport.LNPeerAddr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: LNResponderTransport
            obj: <class 'electrum.lntransport.LNResponderTransport'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: LNTransport
            obj: <class 'electrum.lntransport.LNTransport'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: extract_nodeid
            obj: <function extract_nodeid at 0x7fb938311e40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: split_host_port
            obj: <function split_host_port at 0x7fb938311da0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: ConnStringFormatError
            obj: <class 'electrum.lntransport.ConnStringFormatError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: OldTaskGroup
            obj: <class 'electrum.util.OldTaskGroup'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: needs_test_with_all_chacha20_implementations
            obj: <function needs_test_with_all_chacha20_implementations at 0x7fb936a131a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lntransport.py>
            name: TestLNTransport
            obj: <class 'tests.test_lntransport.TestLNTransport'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestLNTransport> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lntransport.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lntransport.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lntransport.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestLNTransport> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestLNTransport>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestLNTransport>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lntransport.py::TestLNTransport' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_extract_nodeid> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_extract_nodeid>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_loop> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_loop>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_responder> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_responder>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_split_host_port> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_split_host_port>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lntransport.py::TestLNTransport' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lntransport.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lnurl.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lnurl.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lnurl.py>
      find_module called for: tests.test_lnurl [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lnurl.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lnurl.py [assertion]
      early skip of rewriting module: electrum.lnurl [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnurl.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnurl.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnurl.py>
            name: TestCase
            obj: <class 'unittest.case.TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnurl.py>
            name: lnurl
            obj: <module 'electrum.lnurl' from '/home/reconfigure/electrum/electrum/lnurl.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnurl.py>
            name: TestLnurl
            obj: <class 'tests.test_lnurl.TestLnurl'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestLnurl> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnurl.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnurl.py::TestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnurl.py::TestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestLnurl> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestLnurl>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestLnurl>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnurl.py::TestLnurl' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_decode> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_decode>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_encode> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_encode>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_lightning_address_to_url> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_lightning_address_to_url>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnurl.py::TestLnurl' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnurl.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_lnutil.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_lnutil.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_lnutil.py>
      find_module called for: tests.test_lnutil [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_lnutil.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_lnutil.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: json
            obj: <module 'json' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: ecc
            obj: <module 'electrum_ecc' from '/home/reconfigure/.local/lib/python3.11/site-packages/electrum_ecc/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: bitcoin
            obj: <module 'electrum.bitcoin' from '/home/reconfigure/electrum/electrum/bitcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: StoredDict
            obj: <class 'electrum.json_db.StoredDict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: RevocationStore
            obj: <class 'electrum.lnutil.RevocationStore'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: get_per_commitment_secret_from_seed
            obj: <function get_per_commitment_secret_from_seed at 0x7fb939323380>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: make_offered_htlc
            obj: <function make_offered_htlc at 0x7fb939323f60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: make_received_htlc
            obj: <function make_received_htlc at 0x7fb939340040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: make_commitment
            obj: <function make_commitment at 0x7fb939340e00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: make_htlc_tx_witness
            obj: <function make_htlc_tx_witness at 0x7fb939323d80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: make_htlc_tx_output
            obj: <function make_htlc_tx_output at 0x7fb939323ce0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: make_htlc_tx_inputs
            obj: <function make_htlc_tx_inputs at 0x7fb939323e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: secret_to_pubkey
            obj: <function secret_to_pubkey at 0x7fb939323920>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: derive_blinded_pubkey
            obj: <function derive_blinded_pubkey at 0x7fb939323b00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: derive_privkey
            obj: <function derive_privkey at 0x7fb939323a60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: derive_pubkey
            obj: <function derive_pubkey at 0x7fb9393239c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: make_htlc_tx
            obj: <function make_htlc_tx at 0x7fb939323ec0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: extract_ctn_from_tx
            obj: <function extract_ctn_from_tx at 0x7fb939341440>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: UnableToDeriveSecret
            obj: <class 'electrum.lnutil.UnableToDeriveSecret'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: get_compressed_pubkey_from_bech32
            obj: <function get_compressed_pubkey_from_bech32 at 0x7fb939342200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: ScriptHtlc
            obj: <class 'electrum.lnutil.ScriptHtlc'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: calc_fees_for_commitment_tx
            obj: <function calc_fees_for_commitment_tx at 0x7fb939340cc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: UpdateAddHtlc
            obj: <class 'electrum.lnutil.UpdateAddHtlc'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: LnFeatures
            obj: <flag 'LnFeatures'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: ln_compare_features
            obj: <function ln_compare_features at 0x7fb939341c60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: IncompatibleLightningFeatures
            obj: <class 'electrum.lnutil.IncompatibleLightningFeatures'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: ChannelType
            obj: <flag 'ChannelType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: offered_htlc_trim_threshold_sat
            obj: <function offered_htlc_trim_threshold_sat at 0x7fb939340ae0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: received_htlc_trim_threshold_sat
            obj: <function received_htlc_trim_threshold_sat at 0x7fb939340b80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: ImportedChannelBackupStorage
            obj: <class 'electrum.lnutil.ImportedChannelBackupStorage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: MyEncoder
            obj: <class 'electrum.util.MyEncoder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: Transaction
            obj: <class 'electrum.transaction.Transaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: PartialTransaction
            obj: <class 'electrum.transaction.PartialTransaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: Sighash
            obj: <enum 'Sighash'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: LNWallet
            obj: <class 'electrum.lnworker.LNWallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: Standard_Wallet
            obj: <class 'electrum.wallet.Standard_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: as_testnet
            obj: <function as_testnet at 0x7fb93a9c2d40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: disable_ecdsa_r_value_grinding
            obj: <function disable_ecdsa_r_value_grinding at 0x7fb936a139c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: funding_tx_id
            obj: 8984484a580b825b9972d7adb15050b3ab624ccd731946b3eeddb92f4e7ef6be
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: funding_output_index
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: funding_amount_satoshi
            obj: 10000000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: commitment_number
            obj: 42
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_delay
            obj: 144
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_dust_limit_satoshi
            obj: 546
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_payment_basepoint
            obj: b'\x03O5[\xdc\xb7\xcc\n\xf7(\xef<\xce\xb9a]\x90hK\xb5\xb2\xca_\x85\x9a\xb0\xf0\xb7\x04\x07Xq\xaa'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: remote_payment_basepoint
            obj: b'\x03,\x0b|\xf9S$\xa0}\x059\x8b$\x01t\xdc\x0c+\xe4D\xd9k\x15\x9a\xa6\xc7\xf7\xb1\xe6hh\t\x91'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_funding_privkey
            obj: b'0\xffIV\xbb\xdd2"\xd4L\xc5\xe8\xa1&\x1d\xab\x1e\x07\x95{\xda\xc5\xae\x88\xfe2a\xef2\x1f7I\x01'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_funding_pubkey
            obj: b'\x02=\xa0\x92\xf6\x98\x0eX\xd2\xc07\x171\x80\xe9\xa4eG`&\xeeP\xf9f\x95\x96>\x8e\xfeCoT\xeb'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: remote_funding_pubkey
            obj: b'\x03\x0e\x9f{b=,\xcc|\x9b\xd4Mf\xd5\xce!\xcePL\n\xcfc\x85\xa12\xce\xc6\xd3\xc3\x9f\xa7\x11\xc1'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_privkey
            obj: b'\xbb\x13\xb1!\xcd\xc3W\xcd.`\x8b\n\xea)J\xfc\xa3n+4\xcf\x95\x8e.dQ\xa2\xf2tiD\x91\x01'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: localpubkey
            obj: b'\x03\rAzF\x94c\x84\xf8\x8d_37&|^W\x97e\x87]\xc4\xda\xca\x81>!sK\x14\x069\xe7'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: remotepubkey
            obj: b'\x03\x94\x85J\xa6\xea\xb5\xb2\xa8\x12,\xc7&\xe9\xdd\xed\x05:!\x84\xd8\x82V\x81h&\xd6#\x1c\x06\x8dJ['
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_delayedpubkey
            obj: b'\x03\xfdY`R\x8d\xc1R\x01IR\xef\xdbp*\x88\xf7\x1e<\x16S\xb21D1p\x1e\xc7~W\xfd\xe8<'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: local_revocation_pubkey
            obj: b'\x02\x12\xa1@\xcd\x0ce9\xd0|\xd0\x8d\xfe\t\x98M\xec2Q\xea\x80\x8b\x89.\xfe\xac>\xde\x94\x02\xbf+\x19'
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: anchor_test_vector_path
            obj: /home/reconfigure/electrum/tests/anchor-vectors.json
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: f
            obj: <_io.TextIOWrapper name='/home/reconfigure/electrum/tests/anchor-vectors.json' mode='r' encoding='UTF-8'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: ANCHOR_TEST_VECTORS
            obj: [{'Name': 'simple commitment tx with no HTLCs', 'LocalBalance': 7000000000, 'RemoteBalance': 3000000000, 'FeePerKw': 15000, 'UseTestHtlcs': False, 'HtlcDescs': [], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a508b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221008266ac6db5ea71aac3c95d97b0e172ff596844851a3216eb88382a8dddfd33d2022050e240974cfd5d708708b4365574517c18e7ae535ef732a3484d43d0d82be9f701483045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3045022100f89034eba16b2be0e5581f750a0a6309192b75cce0f202f0ee2b4ec0cc394850022076c65dc507fe42276152b7a3d90e961e678adbe966e916ecfe85e64d430e75f3'}, {'Name': 'simple commitment tx with no HTLCs and single anchor', 'LocalBalance': 7000000000, 'RemoteBalance': 0, 'FeePerKw': 15000, 'UseTestHtlcs': False, 'HtlcDescs': [], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f508b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100da5310620e72bc23dc57af25d18102cc75479aea0258ab89fe1a66ca176033ec0220339efb450c12872e134c8bda986bb92f3e4eebcaa2d0fee5d9a2b1257d12f12a0147304402200dc30542c9b8b2ff4b8d98f46798b3218a088a07e97b9e786177287dc6a5347b02203d23b1c2bf17262362fdb4cdcc36dbb449a9efcdb10051ad52cfa09fc76842b001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '304402200dc30542c9b8b2ff4b8d98f46798b3218a088a07e97b9e786177287dc6a5347b02203d23b1c2bf17262362fdb4cdcc36dbb449a9efcdb10051ad52cfa09fc76842b0'}, {'Name': 'commitment tx with seven outputs untrimmed (maximum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 644, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '304402205912d91c58016f593d9e46fefcdb6f4125055c41a17b03101eaaa034b9028ab60220520d4d239c85c66e4c75c5b413620b62736e227659d7821b308e2b8ced3e728e', 'ResolutionTxHex': '02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a0200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205912d91c58016f593d9e46fefcdb6f4125055c41a17b03101eaaa034b9028ab60220520d4d239c85c66e4c75c5b413620b62736e227659d7821b308e2b8ced3e728e834730440220473166a5adcca68550bab80403f410a726b5bd855030527e3fefa8c1e4b4fd7b02203b1dc91d8d69039473036cb5c34398b99e8eb90ae500c22130a557b62294b188012000000000000000000000000000000000000000000000000000000000000000008d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a914b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6851b2756800000000'}, {'RemoteSigHex': '3045022100c6b4113678039ee1e43a6cba5e3224ed2355ffc05e365a393afe8843dc9a76860220566d01fd52d65a89ba8595023884f9e8f2e9a310a6b9b85281c0bce06863430c', 'ResolutionTxHex': '02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a0300000000010000000124060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100c6b4113678039ee1e43a6cba5e3224ed2355ffc05e365a393afe8843dc9a76860220566d01fd52d65a89ba8595023884f9e8f2e9a310a6b9b85281c0bce06863430c83483045022100d0d86307ea55d5daa80f453ad6d64b78fe8a6504aac25407c73e8502c0702c1602206a0809a02aa00c8dc4a53d976bb05d4605d8bb0b7b26b973a5c4e2734d8afbb401008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000'}, {'RemoteSigHex': '304402203c3a699fb80a38112aafd73d6e3a9b7d40bc2c3ed8b7fbc182a20f43b215172202204e71821b984d1af52c4b8e2cd4c572578c12a965866130c2345f61e4c2d3fef4', 'ResolutionTxHex': '02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a040000000001000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203c3a699fb80a38112aafd73d6e3a9b7d40bc2c3ed8b7fbc182a20f43b215172202204e71821b984d1af52c4b8e2cd4c572578c12a965866130c2345f61e4c2d3fef48347304402205bcfa92f83c69289a412b0b6dd4f2a0fe0b0fc2d45bd74706e963257a09ea24902203783e47883e60b86240e877fcbf33d50b1742f65bc93b3162d1be26583b367ee012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000'}, {'RemoteSigHex': '304402200f089bcd20f25475216307d32aa5b6c857419624bfba1da07335f51f6ba4645b02206ce0f7153edfba23b0d4b2afc26bb3157d404368cb8ea0ca7cf78590dcdd28cf', 'ResolutionTxHex': '02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a050000000001000000010c0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402200f089bcd20f25475216307d32aa5b6c857419624bfba1da07335f51f6ba4645b02206ce0f7153edfba23b0d4b2afc26bb3157d404368cb8ea0ca7cf78590dcdd28cf83483045022100e4516da08f72c7a4f7b2f37aa84a0feb54ae2cc5b73f0da378e81ae0ca8119bf02207751b2628d8e2f62b4b9abccda4866246c1bfcc82e3d416ad562fd212102c28f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000'}, {'RemoteSigHex': '3045022100aa72cfaf0965020c73a12c77276c6411ca68c4de36ac1998adf86c917a899a43022060da0a159fecfe0bed37c3962d767f12f90e30fed8a8f34b1301775c21a2bd3a', 'ResolutionTxHex': '02000000000101b8cefef62ea66f5178b9361b2371be0759cbc8c689bcfa7a8e6746d497ec221a06000000000100000001da0d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100aa72cfaf0965020c73a12c77276c6411ca68c4de36ac1998adf86c917a899a43022060da0a159fecfe0bed37c3962d767f12f90e30fed8a8f34b1301775c21a2bd3a8347304402203cd12065c2a42963c762e6b1a981e17695616ecb6f9fb33d8b0717cdd7ca0ee4022065500005c491c1dcf2fe9c4024f74b1c90785d572527055a491278f901143904012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80094a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994e80300000000000022002010f88bf09e56f14fb4543fd26e47b0db50ea5de9cf3fc46434792471082621aed0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100ef82a405364bfc4007e63a7cc82925a513d79065bdbc216d60b6a4223a323f8a02200716730b8561f3c6d362eaf47f202e99fb30d0557b61b92b5f9134f8e2de368101483045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae3501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3045022100e0106830467a558c07544a3de7715610c1147062e7d091deeebe8b5c661cda9402202ad049c1a6d04834317a78483f723c205c9f638d17222aafc620800cc1b6ae35'}, {'Name': 'commitment tx with six outputs untrimmed (minimum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 645, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '30440220446f9e5c375db6a61d6eeee8b59219a30a4a37372afc2670a1a2889c78e9b943022061895f6088fb48b490ab2140a4842c277b64bf25ff591625dd0356e0c96ab7a8', 'ResolutionTxHex': '02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b28534856132000200000000010000000123060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220446f9e5c375db6a61d6eeee8b59219a30a4a37372afc2670a1a2889c78e9b943022061895f6088fb48b490ab2140a4842c277b64bf25ff591625dd0356e0c96ab7a883483045022100c1621ba26a99c263fd885feff5fda5ca2cc73df080b3a49ecf15164ee244d2a5022037f4cc7fd4441af39a83a0e44c3b1db7d64a4c8080e8697f9e952f85421a34d801008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000'}, {'RemoteSigHex': '3044022027a3ffcb8a007e3349d75382efbd4b3fb99fcbd479a18555e58697bd1278d5c402205c8303d46211c3ae8975fe84a0df08b4623119fecd03bc93b49d7f7a0c64c710', 'ResolutionTxHex': '02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b28534856132000300000000010000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500473044022027a3ffcb8a007e3349d75382efbd4b3fb99fcbd479a18555e58697bd1278d5c402205c8303d46211c3ae8975fe84a0df08b4623119fecd03bc93b49d7f7a0c64c71083483045022100b697aca55c6fb15e5348bb7387b584815fd15e8dd306afe0c477cb550d0c2d40022050b0f7e370f7604d2fec781fefe86715dbe95dff4dab88d628f509d62f854de1012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000'}, {'RemoteSigHex': '30440220013975ae356e6daf22a86a29f21c4f35aca82ed8f731a1103c60c74f5ed1c5aa02200350d4e5455cdbcacb7ccf174db5bed8286019e509a113f6b4c5e606ee12c9d7', 'ResolutionTxHex': '02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b2853485613200040000000001000000010b0a0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220013975ae356e6daf22a86a29f21c4f35aca82ed8f731a1103c60c74f5ed1c5aa02200350d4e5455cdbcacb7ccf174db5bed8286019e509a113f6b4c5e606ee12c9d783483045022100e69a29f78779577830e73f327073c93168896f1b89432124b7846f5def9cd9cb02204433db3697e6ed7ac89574ca066a749640e0c9e114ac2e0ee4545741fcf7b7e901008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000'}, {'RemoteSigHex': '304402205257017423644c7e831f30bc0c334eecfe66e9a6d2e92d157c5bece576b2be4f022047b21cf8e955e22b7471940563922d1a5852fb95459ca32905c7d46a19141664', 'ResolutionTxHex': '02000000000101104f394af4c4fad78337f95e3e9f802f4c0d86ab231853af09b285348561320005000000000100000001d90d0000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402205257017423644c7e831f30bc0c334eecfe66e9a6d2e92d157c5bece576b2be4f022047b21cf8e955e22b7471940563922d1a5852fb95459ca32905c7d46a191416648347304402204f5de65a624e3f757adffb678bd887eb4e656538c5ea7044922f6ee3eed8a06202206ff6f7bfe73b565343cae76131ac658f1a9c60d3ca2343358cda60b9e35f94c8012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994abc996a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100d57697c707b6f6d053febf24b98e8989f186eea42e37e9e91663ec2c70bb8f70022079b0715a472118f262f43016a674f59c015d9cafccec885968e76d9d9c5d005101473044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc31201475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3044022025d97466c8049e955a5afce28e322f4b34d2561118e52332fb400f9b908cc0a402205dc6fba3a0d67ee142c428c535580cd1f2ff42e2f89b47e0c8a01847caffc312'}, {'Name': 'commitment tx with six outputs untrimmed (maximum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 2060, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '30440220011f999016570bbab9f3125377d0f35096b4dbe155f97c20f71829ead2817d1602201f23f7e17f6928734601c5d8613431eed5c90aa41c3106e8c1cb02ce32aacb5d', 'ResolutionTxHex': '02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d0200000000010000000175020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220011f999016570bbab9f3125377d0f35096b4dbe155f97c20f71829ead2817d1602201f23f7e17f6928734601c5d8613431eed5c90aa41c3106e8c1cb02ce32aacb5d83473044022017da96dfb0eb4061fa0162dc6fa6b2e07ecc5040ab5e6cb07be59838460b3e58022079371ffc95002cc1dc2891ec38198c9c25aca8164304fe114f1b55e2ffd1ddd501008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000'}, {'RemoteSigHex': '304402202d2d9681409b0a0987bd4a268ffeb112df85c4c988ac2a3a2475cb00a61912c302206aa4f4d1388b7d3282bc847871af3cca30766cc8f1064e3a41ec7e82221e10f7', 'ResolutionTxHex': '02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d0300000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202d2d9681409b0a0987bd4a268ffeb112df85c4c988ac2a3a2475cb00a61912c302206aa4f4d1388b7d3282bc847871af3cca30766cc8f1064e3a41ec7e82221e10f78347304402206426d67911aa6ff9b1cb147b093f3f65a37831a86d7c741d999afc0666e1773d022000bb71821650c70ea58d9bcdd03af736c41a5a8159d436c3ee0408a07394dcce012001010101010101010101010101010101010101010101010101010101010101018d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a9144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6851b2756800000000'}, {'RemoteSigHex': '3045022100f51cdaa525b7d4304548c642bb7945215eb5ae7d32874517cde67ca23ab0a12202206286d59e4b19926c6ac844be6f3ab8149a1ddb9c70f5026b7e83e40a6c08e6e1', 'ResolutionTxHex': '02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d040000000001000000015d060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100f51cdaa525b7d4304548c642bb7945215eb5ae7d32874517cde67ca23ab0a12202206286d59e4b19926c6ac844be6f3ab8149a1ddb9c70f5026b7e83e40a6c08e6e18348304502210091b16b1ac63b867e7a5ca0344f7b2aa1cdd49d4b72eac86a31e7ec6f069e20640220402bfb571ba3a9c49e3b0061c89303453803d0241059d899222aaac4799b507601008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000'}, {'RemoteSigHex': '304402202f058d99cb5a54f90773d43ba4e7a0089efd9f8269ef2da1b85d48a3e230555402205acc4bd6561830867d45cd7b84bba9fa35ad2b345016471c1737142bc99782c4', 'ResolutionTxHex': '02000000000101e7f364cf3a554b670767e723ef14b2af7a3eac70bd79dbde9256f384369c062d05000000000100000001f2090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202f058d99cb5a54f90773d43ba4e7a0089efd9f8269ef2da1b85d48a3e230555402205acc4bd6561830867d45cd7b84bba9fa35ad2b345016471c1737142bc99782c48347304402202913f9cacea54efd2316cffa91219def9e0e111977216c1e76e9da80befab14f022000a9a69e8f37ebe4a39107ab50fab0dde537334588f8f412bbaca57b179b87a6012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80084a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837ead007000000000000220020fe0598d74fee2205cc3672e6e6647706b4f3099713b4661b62482c3addd04a5eb80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ab88f6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402201ce37a44b95213358c20f44404d6db7a6083bea6f58de6c46547ae41a47c9f8202206db1d45be41373e92f90d346381febbea8c78671b28c153e30ad1db3441a94970147304402206208aeb34e404bd052ce3f298dfa832891c9d42caec99fe2a0d2832e9690b94302201b034bfcc6fa9faec667a9b7cbfe0b8d85e954aa239b66277887b5088aff08c301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '304402206208aeb34e404bd052ce3f298dfa832891c9d42caec99fe2a0d2832e9690b94302201b034bfcc6fa9faec667a9b7cbfe0b8d85e954aa239b66277887b5088aff08c3'}, {'Name': 'commitment tx with five outputs untrimmed (minimum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 2061, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '3045022100e10744f572a2cd1d787c969e894b792afaed21217ee0480df0112d2fa3ef96ea02202af4f66eb6beebc36d8e98719ed6b4be1b181659fcb561fc491d8cfebff3aa85', 'ResolutionTxHex': '02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d10200000000010000000174020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e10744f572a2cd1d787c969e894b792afaed21217ee0480df0112d2fa3ef96ea02202af4f66eb6beebc36d8e98719ed6b4be1b181659fcb561fc491d8cfebff3aa8583483045022100c3dc3ea50a0ca20e350f97b50c52c5514717cfa36cb9600918caac5cb556842b022049af018d676dde0c8e28ecf325f3ff5c1594261c4f7511d501f9d62d0594d2a201008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000'}, {'RemoteSigHex': '3045022100e1f51fb72fec604b029b348a3bb6363454e1869f5b1e24fd736f860c8039f8070220030a2c90186437d8c9b47d4897798c024521b1274991c4cdc125970b346094b1', 'ResolutionTxHex': '02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d1030000000001000000015c060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100e1f51fb72fec604b029b348a3bb6363454e1869f5b1e24fd736f860c8039f8070220030a2c90186437d8c9b47d4897798c024521b1274991c4cdc125970b346094b183483045022100ec7ade6037e531629f24390ca9713782a04d648065d17fbe6b015981cdb296c202202d61049a6ecba2fb5314f3edcda2361cad187a89bea6e5d15185354d80c0c08501008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000'}, {'RemoteSigHex': '304402203479f81a1d83c516957679dc98bf91d35deada967739a8e3869e3e8db08246130220053c8e154b97e3019048dcec3d51bfaf396f36861fbda6d33f0e2a57155c8b9f', 'ResolutionTxHex': '02000000000101cf32732fe2d1387ed4e2335f69ddd3c0f337dabc03269e742531f89d35e161d104000000000100000001f1090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402203479f81a1d83c516957679dc98bf91d35deada967739a8e3869e3e8db08246130220053c8e154b97e3019048dcec3d51bfaf396f36861fbda6d33f0e2a57155c8b9f83483045022100a558eb5caa04e35a4417c1f0123ac12eec5f6badee28f5764dc6b69486e594f802201589b12784e242f205832d2d032149bd4e79433ec304c05394241fc7dcba5a71012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837eab80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a18916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e040047304402204ab07c659412dd2cd6043b1ad811ab215e901b6b5653e08cb3d2fe63d3e3dc57022031c7b3d130f9380ef09581f4f5a15cb6f359a2e0a597146b96c3533a26d6f4cd01483045022100a2faf2ad7e323b2a82e07dc40b6847207ca6ad7b089f2c21dea9a4d37e52d59d02204c9480ce0358eb51d92a4342355a97e272e3cc45f86c612a76a3fe32fc3c4cb401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3045022100a2faf2ad7e323b2a82e07dc40b6847207ca6ad7b089f2c21dea9a4d37e52d59d02204c9480ce0358eb51d92a4342355a97e272e3cc45f86c612a76a3fe32fc3c4cb4'}, {'Name': 'commitment tx with five outputs untrimmed (maximum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 2184, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '304402202e03ba1390998b3487e9a7fefcb66814c09abea0ef1bcc915dbaefbcf310569a02206bd10493a105ac69048e9bcedcb8e3301ef81b55018d911a4afd297297f98d30', 'ResolutionTxHex': '020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c03010200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202e03ba1390998b3487e9a7fefcb66814c09abea0ef1bcc915dbaefbcf310569a02206bd10493a105ac69048e9bcedcb8e3301ef81b55018d911a4afd297297f98d308347304402200c3952ca04be0c60dcc0b7873a0829f560607524943554ae4a27d8d967166199022021a68657b88e22f9bf9ac6065be412685aff643d17049f04f2e99e86197dabb101008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a914b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6851b27568f6010000'}, {'RemoteSigHex': '304402201f8a6adda2403bc400c919ea69d72d315337291e00d02cde085ea32953dbc50002202d65230da98df7af8ebefd2b60b457d0945232988ee2d7460a94a77d414a9acc', 'ResolutionTxHex': '020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c0301030000000001000000010a060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402201f8a6adda2403bc400c919ea69d72d315337291e00d02cde085ea32953dbc50002202d65230da98df7af8ebefd2b60b457d0945232988ee2d7460a94a77d414a9acc83483045022100ea69c9273b8914ac62b5b7082d6ac1da2b7b065ebf2ef3cd6403f5305ce3f26802203d98736ea97638895a898dfcc5ee0d0c55eb496b3964df0bb25d223688ea8b8701008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000'}, {'RemoteSigHex': '3045022100ea6e4c9b8f56dd9cf5799492a201cdd65b8bc9bc089c3cff34107896ae313f90022034760f7760975cc68e8917a7f62894e25583da7be11af557c4fc402661d0cbf8', 'ResolutionTxHex': '020000000001015b03043e20eb467029305a22af4c3b915e793743f192c5d225cf1d3c6e8c0301040000000001000000019b090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100ea6e4c9b8f56dd9cf5799492a201cdd65b8bc9bc089c3cff34107896ae313f90022034760f7760975cc68e8917a7f62894e25583da7be11af557c4fc402661d0cbf8834730440220717012f2f7ef6cac590aaf66c2109132c93ffba245959ac62d82e394ba80191302203f00fd9cb37c92c6b0ad4b33e62c3e55b04e5c2cfa0adcca5a9bc49774eeca8a012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80074a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994d0070000000000002200203e68115ae0b15b8de75b6c6bc9af5ac9f01391544e0870dae443a1e8fe7837eab80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a4f906a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220555c05261f72c5b4702d5c83a608630822b473048724b08640d6e75e345094250220448950b74a96a56963928ba5db8b457661a742c855e69d239b3b6ab73de307a301473044022013d326f80ff7607cf366c823fcbbcb7a2b10322484825f151e6c4c756af24b8f02201ba05b9d8beb7cea2947f9f4d9e03f90435e93db2dd48b32eb9ca3f3dd042c7901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3044022013d326f80ff7607cf366c823fcbbcb7a2b10322484825f151e6c4c756af24b8f02201ba05b9d8beb7cea2947f9f4d9e03f90435e93db2dd48b32eb9ca3f3dd042c79'}, {'Name': 'commitment tx with four outputs untrimmed (minimum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 2185, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '304502210094480e38afb41d10fae299224872f19c53abe23c7033a1c0642c48713e7863a10220726dd9456407682667dc4bd9c66975acb3744961770b5002f7eb9c0df9ef2f3e', 'ResolutionTxHex': '02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc0200000000010000000109060000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050048304502210094480e38afb41d10fae299224872f19c53abe23c7033a1c0642c48713e7863a10220726dd9456407682667dc4bd9c66975acb3744961770b5002f7eb9c0df9ef2f3e8347304402203148dac61513dc0361738cba30cb341a1e580f8acd5ab0149bf65bd670688cf002207e5d9a0fcbbea2c263bc714fa9e9c44d7f582ea447f366119fc614a23de32f1f01008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000'}, {'RemoteSigHex': '304402200dbde868dbc20c6a2433fe8979ba5e3f966b1c2d1aeb615f1c42e9c938b3495402202eec5f663c8b601c2061c1453d35de22597c137d1907a2feaf714d551035cb6e', 'ResolutionTxHex': '02000000000101ac13a7715f80b8e52dda43c6929cade5521bdced3a405da02b443f1ffb1e33cc030000000001000000019a090000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402200dbde868dbc20c6a2433fe8979ba5e3f966b1c2d1aeb615f1c42e9c938b3495402202eec5f663c8b601c2061c1453d35de22597c137d1907a2feaf714d551035cb6e83483045022100b896bded41d7feac7af25c19e35c53037c53b50e73cfd01eb4ba139c7fdf231602203a3be049d3d89396c4dc766d82ce31e237da8bc3a93e2c7d35992d1932d9cfeb012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ac5916a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100cd8479cfe1edb1e5a1d487391e0451a469c7171e51e680183f19eb4321f20e9b02204eab7d5a6384b1b08e03baa6e4d9748dfd2b5ab2bae7e39604a0d0055bbffdd501473044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c001475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3044022040f63a16148cf35c8d3d41827f5ae7f7c3746885bb64d4d1b895892a83812b3e02202fcf95c2bf02c466163b3fa3ced6a24926fbb4035095a96842ef516e86ba54c0'}, {'Name': 'commitment tx with four outputs untrimmed (maximum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 3686, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '304402202cfe6618926ca9f1574f8c4659b425e9790b4677ba2248d77901290806130ffe02204ab37bb0287abcdb8b750b018d41a09effe37cb65ff801fa70d3f1a416599841', 'ResolutionTxHex': '020000000001012c32e55722e4b96324d8e5b398d583a20780b25202816adc32dc3157dee731c90200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e050047304402202cfe6618926ca9f1574f8c4659b425e9790b4677ba2248d77901290806130ffe02204ab37bb0287abcdb8b750b018d41a09effe37cb65ff801fa70d3f1a41659984183473044022030b318139715e3b34f19be852cc01c1c0e1599e8b926a73df2bfb70dd186ddee022062a2b7398aed9f563b4014da04a1a99debd0ff663ceece68a547df5982dc2d7201008876a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67a9148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6851b27568f7010000'}, {'RemoteSigHex': '30440220687af8544d335376620a6f4b5412bfd0da48de047c1785674f26e669d4a3ff82022058591c1e3a6c50017427d38a8f756eb685bdab88ec73838eed3530048861f9d5', 'ResolutionTxHex': '020000000001012c32e55722e4b96324d8e5b398d583a20780b25202816adc32dc3157dee731c90300000000010000000176050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004730440220687af8544d335376620a6f4b5412bfd0da48de047c1785674f26e669d4a3ff82022058591c1e3a6c50017427d38a8f756eb685bdab88ec73838eed3530048861f9d5834730440220109f1a62b5a13d28d5b7634dd7693b1d5994eb404c4bb4a9a80aa540d3984d170220307251107ff8499a23e99abce7dda4f1c707c98abddb9405a83de0081cde8ace012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80064a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994b80b000000000000220020f96d0334feb64a4f40eb272031d07afcb038db56aa57446d60308c9f8ccadef9a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a29896a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c268496aad5c3f97f25cf41c1ba5483a12982de29b222051b6de3daa2229413b02207f3c82d77a2c14f0096ed9bb4c34649483bb20fa71f819f71af44de6593e8bb2014730440220784485cf7a0ad7979daf2c858ffdaf5298d0020cea7aea466843e7948223bd9902206031b81d25e02a178c64e62f843577fdcdfc7a1decbbfb54cd895de692df85ca01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '30440220784485cf7a0ad7979daf2c858ffdaf5298d0020cea7aea466843e7948223bd9902206031b81d25e02a178c64e62f843577fdcdfc7a1decbbfb54cd895de692df85ca'}, {'Name': 'commitment tx with three outputs untrimmed (minimum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 3687, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '3045022100b287bb8e079a62dcb3aaa8b6c67c0f434a87ebf64ab0bcfb2fc14b55576b859f02206d37c2eb5fd04cfc9eb0534c76a28a98da251b84a931377cce307af39dfaed74', 'ResolutionTxHex': '02000000000101542562b326c08e3a076d9cfca2be175041366591da334d8d513ff1686fd95a600200000000010000000175050000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0500483045022100b287bb8e079a62dcb3aaa8b6c67c0f434a87ebf64ab0bcfb2fc14b55576b859f02206d37c2eb5fd04cfc9eb0534c76a28a98da251b84a931377cce307af39dfaed7483483045022100a497c64faea286ec4221f48628086dc6403fd7b60a23c4176e8ebbca15ae70dc0220754e20e968e96cf6421fd2a672c8c26d3bc6e19218cfc8fc2aa51fce026c14b1012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994aa28b6a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e0400483045022100c970799bcb33f43179eb43b3378a0a61991cf2923f69b36ef12548c3df0e6d500220413dc27d2e39ee583093adfcb7799be680141738babb31cc7b0669a777a31f5d01483045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c22837701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3045022100ad6c71569856b2d7ff42e838b4abe74a713426b37f22fa667a195a4c88908c6902202b37272b02a42dc6d9f4f82cab3eaf84ac882d9ed762859e1e75455c2c228377'}, {'Name': 'commitment tx with three outputs untrimmed (maximum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 4893, 'UseTestHtlcs': True, 'HtlcDescs': [{'RemoteSigHex': '30450221008db80f8531104820b3e894492b4463f074f965b542e1b5c153ddfb108a5ea642022030b203d857a2b3581c2087a7bf17c95d04fadc1c6cdae88c620477f2dccb1ee4', 'ResolutionTxHex': '02000000000101d515a15e9175fd315bb8d4e768f28684801a9e5a9acdfeba34f7b3b3b3a9ba1d0200000000010000000122020000000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e05004830450221008db80f8531104820b3e894492b4463f074f965b542e1b5c153ddfb108a5ea642022030b203d857a2b3581c2087a7bf17c95d04fadc1c6cdae88c620477f2dccb1ee483483045022100e5fbae857c47dbfc050a05924bd449fc9804798bd6442002c578437dc34450810220296589bc387645512345299e307116aaac4ce9fc752abcd1936b802d03526312012004040404040404040404040404040404040404040404040404040404040404048d76a91414011f7254d96b819c76986c277d115efce6f7b58763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763a91418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6851b2756800000000'}], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80054a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994a00f000000000000220020ce6e751274836ff59622a0d1e07f8831d80bd6730bd48581398bfadd2bb8da9ac0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a87856a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004730440220086288faceab47461eb2d808e9e9b0cb3ffc24a03c2f18db7198247d38f10e58022031d1c2782a58c8c6ce187d0019eb47a83babdf3040e2caff299ab48f7e12b1fa01483045022100a8771147109e4d3f44a5976c3c3de98732bbb77308d21444dbe0d76faf06480e02200b4e916e850c3d1f918de87bbbbb07843ffea1d4658dfe060b6f9ccd96d34be801475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3045022100a8771147109e4d3f44a5976c3c3de98732bbb77308d21444dbe0d76faf06480e02200b4e916e850c3d1f918de87bbbbb07843ffea1d4658dfe060b6f9ccd96d34be8'}, {'Name': 'commitment tx with two outputs untrimmed (minimum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 4894, 'UseTestHtlcs': True, 'HtlcDescs': [], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80044a010000000000002200202b1b5854183c12d3316565972c4668929d314d81c5dcdbb21cb45fe8a9a8114f4a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994ad0886a00000000002200204adb4e2f00643db396dd120d4e7dc17625f5f2c11a40d857accc862d6b7dd80e04004830450221009f16ac85d232e4eddb3fcd750a68ebf0b58e3356eaada45d3513ede7e817bf4c02207c2b043b4e5f971261975406cb955219fa56bffe5d834a833694b5abc1ce4cfd01483045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b9501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '3045022100e784a66b1588575801e237d35e510fd92a81ae3a4a2a1b90c031ad803d07b3f3022021bc5f16501f167607d63b681442da193eb0a76b4b7fd25c2ed4f8b28fd35b95'}, {'Name': 'commitment tx with one output untrimmed (minimum feerate)', 'LocalBalance': 6988000000, 'RemoteBalance': 3000000000, 'FeePerKw': 6216010, 'UseTestHtlcs': True, 'HtlcDescs': [], 'ExpectedCommitmentTxHex': '02000000000101bef67e4e2fb9ddeeb3461973cd4c62abb35050b1add772995b820b584a488489000000000038b02b80024a01000000000000220020e9e86e4823faa62e222ebc858a226636856158f07e69898da3b0d1af0ddb3994c0c62d0000000000220020f3394e1e619b0eca1f91be2fb5ab4dfc59ba5b84ebe014ad1d43a564d012994a04004830450221009ad80792e3038fe6968d12ff23e6888a565c3ddd065037f357445f01675d63f3022018384915e5f1f4ae157e15debf4f49b61c8d9d2b073c7d6f97c4a68caa3ed4c1014830450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae3e195220', 'RemoteSigHex': '30450221008fd5dbff02e4b59020d4cd23a3c30d3e287065fda75a0a09b402980adf68ccda022001e0b8b620cd915ddff11f1de32addf23d81d51b90e6841b2cb8dcaf3faa5ecf'}]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: TEST_HTLCS
            obj: [{'incoming': True, 'amount': 1000000, 'expiry': 500, 'preimage': '0000000000000000000000000000000000000000000000000000000000000000'}, {'incoming': True, 'amount': 2000000, 'expiry': 501, 'preimage': '0101010101010101010101010101010101010101010101010101010101010101'}, {'incoming': False, 'amount': 2000000, 'expiry': 502, 'preimage': '0202020202020202020202020202020202020202020202020202020202020202'}, {'incoming': False, 'amount': 3000000, 'expiry': 503, 'preimage': '0303030303030303030303030303030303030303030303030303030303030303'}, {'incoming': True, 'amount': 4000000, 'expiry': 504, 'preimage': '0404040404040404040404040404040404040404040404040404040404040404'}]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_lnutil.py>
            name: TestLNUtil
            obj: <class 'tests.test_lnutil.TestLNUtil'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestLNUtil> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnutil.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnutil.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnutil.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestLNUtil> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestLNUtil>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestLNUtil>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_lnutil.py::TestLNUtil' lenresult=20 outcome='passed'> [hook]
    genitems <TestCaseFunction test_channel_type> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_channel_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_commitment_tx_anchors_test_vectors> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_commitment_tx_anchors_test_vectors>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_commitment_tx_with_all_five_HTLCs_untrimmed_minimum_feerate> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_commitment_tx_with_all_five_HTLCs_untrimmed_minimum_feerate>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_commitment_tx_with_fee_greater_than_funder_amount> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_commitment_tx_with_fee_greater_than_funder_amount>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_commitment_tx_with_one_output> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_commitment_tx_with_one_output>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_decode_imported_channel_backup_v0> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_decode_imported_channel_backup_v0>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_decode_imported_channel_backup_v1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_decode_imported_channel_backup_v1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_extract_commitment_number_from_tx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_extract_commitment_number_from_tx>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_compressed_pubkey_from_bech32> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_compressed_pubkey_from_bech32>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_key_derivation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_key_derivation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_ln_compare_features> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_ln_compare_features>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_ln_features_for_init_message> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_ln_features_for_init_message>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_ln_features_for_invoice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_ln_features_for_invoice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_ln_features_supports> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_ln_features_supports>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_ln_features_validate_transitive_dependencies> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_ln_features_validate_transitive_dependencies>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_lnworker_decode_channel_update_msg> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_lnworker_decode_channel_update_msg>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_per_commitment_secret_from_seed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_per_commitment_secret_from_seed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_shachain_produce_consume> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_shachain_produce_consume>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_shachain_store> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_shachain_store>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_commitment_tx_with_no_HTLCs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_commitment_tx_with_no_HTLCs>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnutil.py::TestLNUtil' lenresult=20 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_lnutil.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_mnemonic.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_mnemonic.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_mnemonic.py>
      find_module called for: tests.test_mnemonic [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_mnemonic.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_mnemonic.py [assertion]
      early skip of rewriting module: electrum.old_mnemonic [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: NamedTuple
            obj: <function NamedTuple at 0x7fb950af99e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: json
            obj: <module 'json' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: keystore
            obj: <module 'electrum.keystore' from '/home/reconfigure/electrum/electrum/keystore.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: mnemonic
            obj: <module 'electrum.mnemonic' from '/home/reconfigure/electrum/electrum/mnemonic.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: slip39
            obj: <module 'electrum.slip39' from '/home/reconfigure/electrum/electrum/slip39.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: old_mnemonic
            obj: <module 'electrum.old_mnemonic' from '/home/reconfigure/electrum/electrum/old_mnemonic.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: is_new_seed
            obj: <function is_new_seed at 0x7fb93935ff60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: is_old_seed
            obj: <function is_old_seed at 0x7fb9393a4680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: calc_seed_type
            obj: <function calc_seed_type at 0x7fb9393a4720>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: is_matching_seed
            obj: <function is_matching_seed at 0x7fb93935fec0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: can_seed_have_passphrase
            obj: <function can_seed_have_passphrase at 0x7fb9393a47c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: SEED_PREFIX_SW
            obj: 100
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: SEED_PREFIX
            obj: 01
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: UNICODE_HORROR
            obj: ₿ 😀 😈     う けたま わる w͢͢͝h͡o͢͡ ̸͢k̵͟n̴͘ǫw̸̛s͘ ̀́w͘͢ḩ̵a҉̡͢t ̧̕h́o̵r͏̵rors̡ ̶͡͠lį̶e͟͟ ̶͝in͢ ͏t̕h̷̡͟e ͟͟d̛a͜r̕͡k̢̨ ͡h̴e͏a̷̢̡rt́͏ ̴̷͠ò̵̶f̸ u̧͘ní̛͜c͢͏o̷͏d̸͢e̡͝?͞
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: UNICODE_HORROR_HEX
            obj: e282bf20f09f988020f09f98882020202020e3818620e38191e3819fe381be20e3828fe3828b2077cda2cda2cd9d68cda16fcda2cda120ccb8cda26bccb5cd9f6eccb4cd98c7ab77ccb8cc9b73cd9820cc80cc8177cd98cda2e1b8a9ccb561d289cca1cda27420cca7cc9568cc816fccb572cd8fccb5726f7273cca120ccb6cda1cda06cc4afccb665cd9fcd9f20ccb6cd9d696ecda220cd8f74cc9568ccb7cca1cd9f6520cd9fcd9f64cc9b61cd9c72cc95cda16bcca2cca820cda168ccb465cd8f61ccb7cca2cca17274cc81cd8f20ccb4ccb7cda0c3b2ccb5ccb666ccb82075cca7cd986ec3adcc9bcd9c63cda2cd8f6fccb7cd8f64ccb8cda265cca1cd9d3fcd9e
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: SeedTestCase
            obj: <class 'tests.test_mnemonic.SeedTestCase'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: SEED_TEST_CASES
            obj: {'english': SeedTestCase(words='wild father tree among universe such mobile favorite target dynamic credit identify', bip32_seed='aac2a6302e48577ab4b46f23dbae0774e2e62c796f797d0a1b5faeb528301e3064342dafb79069e7c4c6b8c38ae11d7a973bec0d4f70626f8cc5184a8d0b0756', lang='en', words_hex=None, entropy=None, passphrase=None, passphrase_hex=None, seed_version='100'), 'english_with_passphrase': SeedTestCase(words='wild father tree among universe such mobile favorite target dynamic credit identify', bip32_seed='4aa29f2aeb0127efb55138ab9e7be83b36750358751906f86c662b21a1ea1370f949e6d1a12fa56d3d93cadda93038c76ac8118597364e46f5156fde6183c82f', lang='en', words_hex=None, entropy=None, passphrase='Did you ever hear the tragedy of Darth Plagueis the Wise?', passphrase_hex=None, seed_version='100'), 'japanese': SeedTestCase(words='なのか ひろい しなん まなぶ つぶす さがす おしゃれ かわく おいかける けさき かいとう さたん', bip32_seed='d3eaf0e44ddae3a5769cb08a26918e8b308258bcb057bb704c6f69713245c0b35cb92c03df9c9ece5eff826091b4e74041e010b701d44d610976ce8bfb66a8ad', lang='ja', words_hex='e381aae381aee3818b20e381b2e3828de3818420e38197e381aae3829320e381bee381aae381b5e3829920e381a4e381b5e38299e3819920e38195e3818be38299e3819920e3818ae38197e38283e3828c20e3818be3828fe3818f20e3818ae38184e3818be38191e3828b20e38191e38195e3818d20e3818be38184e381a8e3818620e38195e3819fe38293', entropy=1938439226660562861250521787963972783469, passphrase=None, passphrase_hex=None, seed_version='01'), 'japanese_with_passphrase': SeedTestCase(words='なのか ひろい しなん まなぶ つぶす さがす おしゃれ かわく おいかける けさき かいとう さたん', bip32_seed='251ee6b45b38ba0849e8f40794540f7e2c6d9d604c31d68d3ac50c034f8b64e4bc037c5e1e985a2fed8aad23560e690b03b120daf2e84dceb1d7857dda042457', lang='ja', words_hex='e381aae381aee3818b20e381b2e3828de3818420e38197e381aae3829320e381bee381aae381b5e3829920e381a4e381b5e38299e3819920e38195e3818be38299e3819920e3818ae38197e38283e3828c20e3818be3828fe3818f20e3818ae38184e3818be38191e3828b20e38191e38195e3818d20e3818be38184e381a8e3818620e38195e3819fe38293', entropy=1938439226660562861250521787963972783469, passphrase='₿ 😀 😈     う けたま わる w͢͢͝h͡o͢͡ ̸͢k̵͟n̴͘ǫw̸̛s͘ ̀́w͘͢ḩ̵a҉̡͢t ̧̕h́o̵r͏̵rors̡ ̶͡͠lį̶e͟͟ ̶͝in͢ ͏t̕h̷̡͟e ͟͟d̛a͜r̕͡k̢̨ ͡h̴e͏a̷̢̡rt́͏ ̴̷͠ò̵̶f̸ u̧͘ní̛͜c͢͏o̷͏d̸͢e̡͝?͞', passphrase_hex='e282bf20f09f988020f09f98882020202020e3818620e38191e3819fe381be20e3828fe3828b2077cda2cda2cd9d68cda16fcda2cda120ccb8cda26bccb5cd9f6eccb4cd98c7ab77ccb8cc9b73cd9820cc80cc8177cd98cda2e1b8a9ccb561d289cca1cda27420cca7cc9568cc816fccb572cd8fccb5726f7273cca120ccb6cda1cda06cc4afccb665cd9fcd9f20ccb6cd9d696ecda220cd8f74cc9568ccb7cca1cd9f6520cd9fcd9f64cc9b61cd9c72cc95cda16bcca2cca820cda168ccb465cd8f61ccb7cca2cca17274cc81cd8f20ccb4ccb7cda0c3b2ccb5ccb666ccb82075cca7cd986ec3adcc9bcd9c63cda2cd8f6fccb7cd8f64ccb8cda265cca1cd9d3fcd9e', seed_version='01'), 'chinese': SeedTestCase(words='眼 悲 叛 改 节 跃 衡 响 疆 股 遂 冬', bip32_seed='0b9077db7b5a50dbb6f61821e2d35e255068a5847e221138048a20e12d80b673ce306b6fe7ac174ebc6751e11b7037be6ee9f17db8040bb44f8466d519ce2abf', lang='zh', words_hex='e79cbc20e682b220e58f9b20e694b920e88a8220e8b78320e8a1a120e5938d20e7968620e882a120e9818220e586ac', entropy=3083737086352778425940060465574397809099, passphrase=None, passphrase_hex=None, seed_version='100'), 'chinese_with_passphrase': SeedTestCase(words='眼 悲 叛 改 节 跃 衡 响 疆 股 遂 冬', bip32_seed='6c03dd0615cf59963620c0af6840b52e867468cc64f20a1f4c8155705738e87b8edb0fc8a6cee4085776cb3a629ff88bb1a38f37085efdbf11ce9ec5a7fa5f71', lang='zh', words_hex='e79cbc20e682b220e58f9b20e694b920e88a8220e8b78320e8a1a120e5938d20e7968620e882a120e9818220e586ac', entropy=3083737086352778425940060465574397809099, passphrase='给我一些测试向量谷歌', passphrase_hex='e7bb99e68891e4b880e4ba9be6b58be8af95e59091e9878fe8b0b7e6ad8c', seed_version='100'), 'spanish': SeedTestCase(words='almíbar tibio superar vencer hacha peatón príncipe matar consejo polen vehículo odisea', bip32_seed='18bffd573a960cc775bbd80ed60b7dc00bc8796a186edebe7fc7cf1f316da0fe937852a969c5c79ded8255cdf54409537a16339fbe33fb9161af793ea47faa7a', lang='es', words_hex='616c6d69cc8162617220746962696f20737570657261722076656e63657220686163686120706561746fcc816e20707269cc816e63697065206d6174617220636f6e73656a6f20706f6c656e2076656869cc8163756c6f206f6469736561', entropy=3423992296655289706780599506247192518735, passphrase=None, passphrase_hex=None, seed_version='01'), 'spanish_with_passphrase': SeedTestCase(words='almíbar tibio superar vencer hacha peatón príncipe matar consejo polen vehículo odisea', bip32_seed='363dec0e575b887cfccebee4c84fca5a3a6bed9d0e099c061fa6b85020b031f8fe3636d9af187bf432d451273c625e20f24f651ada41aae2c4ea62d87e9fa44c', lang='es', words_hex='616c6d69cc8162617220746962696f20737570657261722076656e63657220686163686120706561746fcc816e20707269cc816e63697065206d6174617220636f6e73656a6f20706f6c656e2076656869cc8163756c6f206f6469736561', entropy=3423992296655289706780599506247192518735, passphrase='araña difícil solución término cárcel', passphrase_hex='6172616ecc83612064696669cc8163696c20736f6c7563696fcc816e207465cc81726d696e6f206361cc817263656c', seed_version='01'), 'spanish2': SeedTestCase(words='equipo fiar auge langosta hacha calor trance cubrir carro pulmón oro áspero', bip32_seed='001ebce6bfde5851f28a0d44aae5ae0c762b600daf3b33fc8fc630aee0d207646b6f98b18e17dfe3be0a5efe2753c7cdad95860adbbb62cecad4dedb88e02a64', lang='es', words_hex='65717569706f20666961722061756765206c616e676f7374612068616368612063616c6f72207472616e63652063756272697220636172726f2070756c6d6fcc816e206f726f2061cc81737065726f', entropy=448346710104003081119421156750490206837, passphrase=None, passphrase_hex=None, seed_version='100'), 'spanish3': SeedTestCase(words='vidrio jabón muestra pájaro capucha eludir feliz rotar fogata pez rezar oír', bip32_seed='c274665e5453c72f82b8444e293e048d700c59bf000cacfba597629d202dcf3aab1cf9c00ba8d3456b7943428541fed714d01d8a0a4028fc3a9bb33d981cb49f', lang='es', words_hex='76696472696f206a61626fcc816e206d756573747261207061cc816a61726f206361707563686120656c756469722066656c697a20726f74617220666f676174612070657a2072657a6172206f69cc8172', entropy=3444792611339130545499611089352232093648, passphrase='¡Viva España! repiten veinte pueblos y al hablar dan fe del ánimo español... ¡Marquen arado martillo y clarín', passphrase_hex='c2a1566976612045737061c3b16121207265706974656e207665696e746520707565626c6f73207920616c206861626c61722064616e2066652064656c20c3a16e696d6f2065737061c3b16f6c2e2e2e20c2a14d61727175656e20617261646f206d617274696c6c6f207920636c6172c3ad6e', seed_version='100')}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: Test_NewMnemonic
            obj: <class 'tests.test_mnemonic.Test_NewMnemonic'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_NewMnemonic> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: Test_OldMnemonic
            obj: <class 'tests.test_mnemonic.Test_OldMnemonic'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_OldMnemonic> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: Test_BIP39
            obj: <class 'tests.test_mnemonic.Test_BIP39'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_BIP39> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: Test_seeds
            obj: <class 'tests.test_mnemonic.Test_seeds'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_seeds> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mnemonic.py>
            name: Test_slip39
            obj: <class 'tests.test_mnemonic.Test_slip39'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_slip39> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mnemonic.py' lenresult=6 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mnemonic.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mnemonic.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_NewMnemonic> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_NewMnemonic>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_NewMnemonic>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mnemonic.py::Test_NewMnemonic' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_mnemonic_to_seed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_mnemonic_to_seed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_mnemonic_to_seed_basic> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_mnemonic_to_seed_basic>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_random_seeds> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_random_seeds>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mnemonic.py::Test_NewMnemonic' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_OldMnemonic> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_OldMnemonic>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_OldMnemonic>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mnemonic.py::Test_OldMnemonic' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mnemonic.py::Test_OldMnemonic' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_BIP39> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_BIP39>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_BIP39>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mnemonic.py::Test_BIP39' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_checksum> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_checksum>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_cjk_normalization> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_cjk_normalization>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mnemonic.py::Test_BIP39' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_seeds> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_seeds>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_seeds>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mnemonic.py::Test_seeds' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_calc_seed_type> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_calc_seed_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_can_seed_have_passphrase> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_seed_have_passphrase>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_matching_seed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_matching_seed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_new_seed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_new_seed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_old_seed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_old_seed>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mnemonic.py::Test_seeds' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_slip39> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_slip39>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_slip39>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mnemonic.py::Test_slip39' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_make_group_prefix> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_group_prefix>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_vectors> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_vectors>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mnemonic.py::Test_slip39' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mnemonic.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_mpp_split.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_mpp_split.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_mpp_split.py>
      find_module called for: tests.test_mpp_split [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_mpp_split.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_mpp_split.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: random
            obj: <module 'random' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/random.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: mpp_split
            obj: <module 'electrum.mpp_split' from '/home/reconfigure/electrum/electrum/mpp_split.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: NoPathFound
            obj: <class 'electrum.lnutil.NoPathFound'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: PART_PENALTY
            obj: 1.0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_mpp_split.py>
            name: TestMppSplit
            obj: <class 'tests.test_mpp_split.TestMppSplit'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestMppSplit> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mpp_split.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mpp_split.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mpp_split.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestMppSplit> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestMppSplit>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestMppSplit>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_mpp_split.py::TestMppSplit' lenresult=6 outcome='passed'> [hook]
    genitems <TestCaseFunction test_payment_below_min_part_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_payment_below_min_part_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_saturation> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_saturation>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_send_to_single_node> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_send_to_single_node>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_suggest_part_penalty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_suggest_part_penalty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_suggest_splits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_suggest_splits>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_suggest_splits_single_channel> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_suggest_splits_single_channel>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mpp_split.py::TestMppSplit' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_mpp_split.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_network.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_network.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_network.py>
      find_module called for: tests.test_network [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_network.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_network.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: blockchain
            obj: <module 'electrum.blockchain' from '/home/reconfigure/electrum/electrum/blockchain.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: Interface
            obj: <class 'electrum.interface.Interface'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: ServerAddr
            obj: <class 'electrum.interface.ServerAddr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: sha256
            obj: <function sha256 at 0x7fb939eb8cc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: OldTaskGroup
            obj: <class 'electrum.util.OldTaskGroup'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: MockNetwork
            obj: <class 'tests.test_network.MockNetwork'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: MockInterface
            obj: <class 'tests.test_network.MockInterface'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_network.py>
            name: TestNetwork
            obj: <class 'tests.test_network.TestNetwork'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestNetwork> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_network.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_network.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_network.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestNetwork> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestNetwork>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestNetwork>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_network.py::TestNetwork' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_can_connect_during_backward> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_connect_during_backward>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chain_false_during_binary> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chain_false_during_binary>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_fork_conflict> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_fork_conflict>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_fork_noconflict> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_fork_noconflict>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_network.py::TestNetwork' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_network.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_payment_identifier.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_payment_identifier.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_payment_identifier.py>
      find_module called for: tests.test_payment_identifier [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_payment_identifier.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_payment_identifier.py [assertion]
      early skip of rewriting module: electrum.payment_identifier [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: Invoice
            obj: <class 'electrum.invoices.Invoice'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: maybe_extract_lightning_payment_identifier
            obj: <function maybe_extract_lightning_payment_identifier at 0x7fb93689e200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: PaymentIdentifier
            obj: <class 'electrum.payment_identifier.PaymentIdentifier'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: PaymentIdentifierType
            obj: <enum 'PaymentIdentifierType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: invoice_from_payment_identifier
            obj: <function invoice_from_payment_identifier at 0x7fb93689e340>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: PartialTxOutput
            obj: <class 'electrum.transaction.PartialTxOutput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: WalletMock
            obj: <class 'tests.test_payment_identifier.WalletMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_payment_identifier.py>
            name: TestPaymentIdentifier
            obj: <class 'tests.test_payment_identifier.TestPaymentIdentifier'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPaymentIdentifier> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_payment_identifier.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_payment_identifier.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_payment_identifier.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPaymentIdentifier> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPaymentIdentifier>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPaymentIdentifier>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_payment_identifier.py::TestPaymentIdentifier' lenresult=9 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bip21> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip21>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip70> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip70>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bolt11> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bolt11>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_email_and_domain> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_email_and_domain>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invoice_from_payment_identifier> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invoice_from_payment_identifier>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_lnurl> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_lnurl>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_maybe_extract_lightning_payment_identifier> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_maybe_extract_lightning_payment_identifier>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_multiline> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_multiline>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_spk> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_spk>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_payment_identifier.py::TestPaymentIdentifier' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_payment_identifier.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_psbt.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_psbt.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_psbt.py>
      find_module called for: tests.test_psbt [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_psbt.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_psbt.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: pprint
            obj: <function pprint at 0x7fb9509b0360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: tx_from_any
            obj: <function tx_from_any at 0x7fb9394f5d00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: PartialTransaction
            obj: <class 'electrum.transaction.PartialTransaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: BadHeaderMagic
            obj: <class 'electrum.transaction.BadHeaderMagic'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: UnexpectedEndOfStream
            obj: <class 'electrum.transaction.UnexpectedEndOfStream'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: SerializationError
            obj: <class 'electrum.transaction.SerializationError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: PSBTInputConsistencyFailure
            obj: <class 'electrum.transaction.PSBTInputConsistencyFailure'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: TestValidPSBT
            obj: <class 'tests.test_psbt.TestValidPSBT'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestValidPSBT> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: TestInvalidPSBT
            obj: <class 'tests.test_psbt.TestInvalidPSBT'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestInvalidPSBT> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: TestPSBTSignerChecks
            obj: <class 'tests.test_psbt.TestPSBTSignerChecks'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPSBTSignerChecks> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_psbt.py>
            name: TestPSBTComplexChecks
            obj: <class 'tests.test_psbt.TestPSBTComplexChecks'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestPSBTComplexChecks> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_psbt.py' lenresult=5 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_psbt.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_psbt.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestValidPSBT> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestValidPSBT>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestValidPSBT>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_psbt.py::TestValidPSBT' lenresult=9 outcome='passed'> [hook]
    genitems <TestCaseFunction test_valid_psbt_001> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_001>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt_002> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_002>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt_003> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_003>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt_004> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_004>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt_005> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_005>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt_006> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_006>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt_007> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_007>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt_008> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt_008>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_valid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_valid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_psbt.py::TestValidPSBT' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestInvalidPSBT> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestInvalidPSBT>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestInvalidPSBT>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_psbt.py::TestInvalidPSBT' lenresult=19 outcome='passed'> [hook]
    genitems <TestCaseFunction test_invalid_psbt_001> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_001>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_002> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_002>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_003> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_003>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_004> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_004>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_005> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_005>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_006> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_006>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_007> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_007>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_008> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_008>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_009> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_009>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_010> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_010>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_011> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_011>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_012> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_012>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_013> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_013>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_014> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_014>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_015> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_015>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_016> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_016>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_017> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_017>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt_018> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt_018>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_invalid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo_that_are_inconsistent> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_invalid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo_that_are_inconsistent>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_psbt.py::TestInvalidPSBT' lenresult=19 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPSBTSignerChecks> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPSBTSignerChecks>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPSBTSignerChecks>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_psbt.py::TestPSBTSignerChecks' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_psbt_fails_signer_checks_001> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_psbt_fails_signer_checks_001>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_psbt_fails_signer_checks_002> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_psbt_fails_signer_checks_002>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_psbt_fails_signer_checks_003> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_psbt_fails_signer_checks_003>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_psbt_fails_signer_checks_004> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_psbt_fails_signer_checks_004>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_psbt.py::TestPSBTSignerChecks' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestPSBTComplexChecks> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestPSBTComplexChecks>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestPSBTComplexChecks>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_psbt.py::TestPSBTComplexChecks' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_psbt_combiner_unknown_fields> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_psbt_combiner_unknown_fields>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_psbt.py::TestPSBTComplexChecks' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_psbt.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_qml_types.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_qml_types.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_qml_types.py>
      find_module called for: tests.test_qml_types [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_qml_types.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_qml_types.py [assertion]
      early skip of rewriting module: electrum.gui [assertion]
      early skip of rewriting module: electrum.gui.qml [assertion]
      early skip of rewriting module: PyQt6 [assertion]
      early skip of rewriting module: PyQt6.QtQml [assertion]
      early skip of rewriting module: PyQt6.sip [assertion]
      early skip of rewriting module: PyQt6.QtCore [assertion]
      early skip of rewriting module: PyQt6.QtNetwork [assertion]
      early skip of rewriting module: PyQt6.QtGui [assertion]
      early skip of rewriting module: electrum.gui.common_qt [assertion]
      early skip of rewriting module: electrum.gui.common_qt.i18n [assertion]
      early skip of rewriting module: electrum.gui.qml.qeapp [assertion]
      early skip of rewriting module: electrum.base_crash_reporter [assertion]
      early skip of rewriting module: electrum.gui.qml.qeconfig [assertion]
      early skip of rewriting module: electrum.gui.qml.qetypes [assertion]
      early skip of rewriting module: electrum.gui.qml.auth [assertion]
      early skip of rewriting module: electrum.gui.qml.qedaemon [assertion]
      early skip of rewriting module: electrum.gui.qml.qefx [assertion]
      early skip of rewriting module: electrum.gui.qml.util [assertion]
      early skip of rewriting module: electrum.gui.qml.qewallet [assertion]
      early skip of rewriting module: electrum.gui.qml.qeaddresslistmodel [assertion]
      early skip of rewriting module: electrum.gui.qml.qechannellistmodel [assertion]
      early skip of rewriting module: electrum.gui.messages [assertion]
      early skip of rewriting module: electrum.gui.qml.qemodelfilter [assertion]
      early skip of rewriting module: electrum.gui.qml.qeinvoicelistmodel [assertion]
      early skip of rewriting module: electrum.gui.qml.qetransactionlistmodel [assertion]
      early skip of rewriting module: electrum.gui.qml.qewizard [assertion]
      early skip of rewriting module: electrum.wizard [assertion]
      early skip of rewriting module: electrum.gui.qml.qenetwork [assertion]
      early skip of rewriting module: electrum.gui.qml.qeserverlistmodel [assertion]
      early skip of rewriting module: electrum.gui.qml.qeqr [assertion]
      early skip of rewriting module: qrcode [assertion]
      early skip of rewriting module: qrcode.main [assertion]
      early skip of rewriting module: qrcode.constants [assertion]
      early skip of rewriting module: qrcode.exceptions [assertion]
      early skip of rewriting module: qrcode.util [assertion]
      early skip of rewriting module: qrcode.LUT [assertion]
      early skip of rewriting module: qrcode.base [assertion]
      early skip of rewriting module: qrcode.image [assertion]
      early skip of rewriting module: qrcode.image.base [assertion]
      early skip of rewriting module: qrcode.image.styles [assertion]
      early skip of rewriting module: qrcode.image.styles.moduledrawers [assertion]
      early skip of rewriting module: qrcode.image.styles.moduledrawers.pil [assertion]
      early skip of rewriting module: PIL [assertion]
      early skip of rewriting module: qrcode.image.styles.moduledrawers.base [assertion]
      early skip of rewriting module: qrcode.image.pure [assertion]
      early skip of rewriting module: qrcode.compat [assertion]
      early skip of rewriting module: qrcode.compat.png [assertion]
      early skip of rewriting module: png [assertion]
      early skip of rewriting module: PIL [assertion]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_qml_types.py' lenresult=0 outcome='failed'> [hook]
      pytest_exception_interact [hook]
          node: <Module test_qml_types.py>
          call: <CallInfo when='collect' excinfo=<ExceptionInfo CollectError("ImportError while importing test module '/home/reconfigure/electrum/tests/test_qml_types.py'.\nHint: mak...nelectrum/gui/qml/qeqr.py:8: in <module>\n    from PIL import ImageQt\nE   ModuleNotFoundError: No module named 'PIL'") tblen=7>>
          report: <CollectReport 'tests/test_qml_types.py' lenresult=0 outcome='failed'>
      finish pytest_exception_interact --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_qml_types.py' lenresult=0 outcome='failed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_revealer.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_revealer.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_revealer.py>
      find_module called for: tests.test_revealer [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_revealer.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_revealer.py [assertion]
      early skip of rewriting module: electrum.plugins.revealer [assertion]
      early skip of rewriting module: electrum.plugins.revealer.revealer [assertion]
      early skip of rewriting module: electrum.plugins.revealer.hmac_drbg [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_revealer.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_revealer.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_revealer.py>
            name: RevealerPlugin
            obj: <class 'electrum.plugins.revealer.revealer.RevealerPlugin'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_revealer.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_revealer.py>
            name: TestRevealer
            obj: <class 'tests.test_revealer.TestRevealer'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestRevealer> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_revealer.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_revealer.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_revealer.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestRevealer> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestRevealer>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestRevealer>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_revealer.py::TestRevealer' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_version_0_noisemap> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_version_0_noisemap>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_version_1_noisemap> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_version_1_noisemap>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_version_1_noisemap_indexerror> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_version_1_noisemap_indexerror>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_revealer.py::TestRevealer' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_revealer.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_simple_config.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_simple_config.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_simple_config.py>
      find_module called for: tests.test_simple_config [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_simple_config.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_simple_config.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: ast
            obj: <module 'ast' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/ast.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: shutil
            obj: <module 'shutil' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/shutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: StringIO
            obj: <class '_io.StringIO'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: read_user_config
            obj: <function read_user_config at 0x7fb939e67e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: MAX_MSG_SIZE_DEFAULT
            obj: 1000000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: @py_assert3
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: Test_SimpleConfig
            obj: <class 'tests.test_simple_config.Test_SimpleConfig'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Test_SimpleConfig> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_simple_config.py>
            name: TestUserConfig
            obj: <class 'tests.test_simple_config.TestUserConfig'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestUserConfig> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_simple_config.py' lenresult=3 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_simple_config.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_simple_config.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase Test_SimpleConfig> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Test_SimpleConfig>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Test_SimpleConfig>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_simple_config.py::Test_SimpleConfig' lenresult=14 outcome='passed'> [hook]
    genitems <TestCaseFunction test_can_set_options_set_in_user_config> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_can_set_options_set_in_user_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_cannot_set_options_passed_by_command_line> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_cannot_set_options_passed_by_command_line>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_configvars_convert_getter> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_configvars_convert_getter>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_configvars_from_key> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_configvars_from_key>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_configvars_get_default_value> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_configvars_get_default_value>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_configvars_is_modifiable> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_configvars_is_modifiable>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_configvars_is_set> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_configvars_is_set>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_configvars_set_and_get> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_configvars_set_and_get>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_depth_target_to_fee> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_depth_target_to_fee>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_fee_to_depth> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_fee_to_depth>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_config_command_line_overrides_everything> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_config_command_line_overrides_everything>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_config_key_rename> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_config_key_rename>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_config_user_config_is_used_if_others_arent_specified> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_config_user_config_is_used_if_others_arent_specified>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_user_config_is_not_written_with_read_only_config> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_user_config_is_not_written_with_read_only_config>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_simple_config.py::Test_SimpleConfig' lenresult=14 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestUserConfig> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestUserConfig>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestUserConfig>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_simple_config.py::TestUserConfig' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_no_path_means_no_result> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_no_path_means_no_result>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_path_with_reprd_object> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_path_with_reprd_object>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_path_without_config_file> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_path_without_config_file>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_simple_config.py::TestUserConfig' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_simple_config.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_sswaps.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_sswaps.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_sswaps.py>
      find_module called for: tests.test_sswaps [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_sswaps.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_sswaps.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: PartialTxInput
            obj: <class 'electrum.transaction.PartialTxInput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: TxOutpoint
            obj: <class 'electrum.transaction.TxOutpoint'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: SwapManager
            obj: <class 'electrum.submarine_swaps.SwapManager'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: SwapData
            obj: <class 'electrum.submarine_swaps.SwapData'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_sswaps.py>
            name: TestSwapTxs
            obj: <class 'tests.test_sswaps.TestSwapTxs'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestSwapTxs> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_sswaps.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_sswaps.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_sswaps.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestSwapTxs> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestSwapTxs>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestSwapTxs>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_sswaps.py::TestSwapTxs' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_claim_tx_for_successful_reverse_swap> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_claim_tx_for_successful_reverse_swap>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_claim_tx_for_timing_out_forward_swap> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_claim_tx_for_timing_out_forward_swap>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_sswaps.py::TestSwapTxs' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_sswaps.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir test_storage_upgrade> [collection]
      pytest_collectstart [hook]
          collector: <Dir test_storage_upgrade>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir test_storage_upgrade>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_1_9_8_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_1_9_8_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_1_9_8_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_1_9_8_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_multiacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_multiacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_0_4_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_multiacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_multiacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_1_1_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_multiacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_multiacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_2_0_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_multiacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_multiacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_3_2_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_multiacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_multiacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_4_3_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_multiacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_multiacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_multiacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_5_4_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_6_4_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_7_18_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_8_3_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys_keystore_changes
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys_keystore_changes
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys_keystore_changes
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_importedkeys_keystore_changes
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_multisig
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_multisig
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_multisig
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_old_seeded_with_realistic_history
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_old_seeded_with_realistic_history
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_old_seeded_with_realistic_history
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_old_seeded_with_realistic_history
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_seeded
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_seeded
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_seeded
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_trezor_singleacc
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_trezor_singleacc
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_trezor_singleacc
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_watchaddresses
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_watchaddresses
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_2_9_3_watchaddresses
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_2_3_ledger_standard_keystore_changes
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_2_3_ledger_standard_keystore_changes
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_2_3_ledger_standard_keystore_changes
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_2_3_ledger_standard_keystore_changes
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_3_8_xpub_with_realistic_history
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_3_8_xpub_with_realistic_history
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_3_8_xpub_with_realistic_history
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_3_3_8_xpub_with_realistic_history
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            collection_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_4_5_2_9dk_with_ln
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_4_5_2_9dk_with_ln
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir test_storage_upgrade>
            file_path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_4_5_2_9dk_with_ln
            path: /home/reconfigure/electrum/tests/test_storage_upgrade/client_4_5_2_9dk_with_ln
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_storage_upgrade' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_storage_upgrade' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_storage_upgrade.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_storage_upgrade.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_storage_upgrade.py>
      find_module called for: tests.test_storage_upgrade [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_storage_upgrade.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_storage_upgrade.py [assertion]
      find_module called for: tests.test_wallet [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_wallet.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_wallet.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: shutil
            obj: <module 'shutil' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/shutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: json
            obj: <module 'json' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: inspect
            obj: <module 'inspect' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/inspect.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: electrum
            obj: <module 'electrum' from '/home/reconfigure/electrum/electrum/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: WalletDBUpgrader
            obj: <class 'electrum.wallet_db.WalletDBUpgrader'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: WalletDB
            obj: <class 'electrum.wallet_db.WalletDB'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: WalletRequiresUpgrade
            obj: <class 'electrum.wallet_db.WalletRequiresUpgrade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: WalletRequiresSplit
            obj: <class 'electrum.wallet_db.WalletRequiresSplit'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: Wallet
            obj: <class 'electrum.wallet.Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: constants
            obj: <module 'electrum.constants' from '/home/reconfigure/electrum/electrum/constants.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: Plugins
            obj: <class 'electrum.plugin.Plugins'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: as_testnet
            obj: <function as_testnet at 0x7fb93a9c2d40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: WalletTestCase
            obj: <class 'tests.test_wallet.WalletTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase WalletTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: WALLET_FILES_DIR
            obj: /home/reconfigure/electrum/tests/test_storage_upgrade
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_storage_upgrade.py>
            name: TestStorageUpgrade
            obj: <class 'tests.test_storage_upgrade.TestStorageUpgrade'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestStorageUpgrade> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_storage_upgrade.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase WalletTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase WalletTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase WalletTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_storage_upgrade.py::WalletTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_storage_upgrade.py::WalletTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestStorageUpgrade> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestStorageUpgrade>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestStorageUpgrade>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_storage_upgrade.py::TestStorageUpgrade' lenresult=62 outcome='passed'> [hook]
    genitems <TestCaseFunction test_upgrade_from_client_1_9_8_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_1_9_8_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_0_4_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_0_4_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_0_4_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_0_4_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_0_4_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_0_4_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_multiacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_multiacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_0_4_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_0_4_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_1_1_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_1_1_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_1_1_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_1_1_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_1_1_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_1_1_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_multiacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_multiacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_1_1_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_1_1_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_2_0_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_2_0_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_2_0_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_2_0_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_2_0_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_2_0_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_multiacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_multiacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_2_0_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_2_0_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_3_2_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_3_2_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_3_2_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_3_2_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_3_2_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_3_2_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_multiacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_multiacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_3_2_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_3_2_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_4_3_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_4_3_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_4_3_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_4_3_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_4_3_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_4_3_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_multiacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_multiacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_4_3_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_4_3_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_5_4_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_5_4_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_5_4_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_5_4_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_5_4_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_5_4_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_multiacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_multiacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_5_4_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_5_4_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_6_4_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_6_4_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_6_4_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_6_4_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_6_4_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_6_4_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_6_4_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_6_4_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_7_18_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_7_18_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_7_18_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_7_18_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_7_18_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_7_18_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_7_18_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_7_18_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_7_18_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_7_18_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_8_3_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_8_3_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_8_3_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_8_3_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_8_3_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_8_3_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_8_3_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_8_3_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys_keystore_changes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys_keystore_changes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_9_3_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_9_3_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_9_3_old_seeded_with_realistic_history> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_9_3_old_seeded_with_realistic_history>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_9_3_seeded> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_9_3_seeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_9_3_trezor_singleacc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_9_3_trezor_singleacc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_2_9_3_watchaddresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_2_9_3_watchaddresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_3_2_3_ledger_standard_keystore_changes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_3_2_3_ledger_standard_keystore_changes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_3_3_8_xpub_with_realistic_history> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_3_3_8_xpub_with_realistic_history>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_upgrade_from_client_4_5_2_9dk_with_ln> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_upgrade_from_client_4_5_2_9dk_with_ln>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_storage_upgrade.py::TestStorageUpgrade' lenresult=62 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_storage_upgrade.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_transaction.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_transaction.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_transaction.py>
      find_module called for: tests.test_transaction [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_transaction.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_transaction.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: json
            obj: <module 'json' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: NamedTuple
            obj: <function NamedTuple at 0x7fb950af99e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: Union
            obj: typing.Union
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: ECPrivkey
            obj: <class 'electrum_ecc.ECPrivkey'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: transaction
            obj: <module 'electrum.transaction' from '/home/reconfigure/electrum/electrum/transaction.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: bitcoin
            obj: <module 'electrum.bitcoin' from '/home/reconfigure/electrum/electrum/bitcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: convert_raw_tx_to_hex
            obj: <function convert_raw_tx_to_hex at 0x7fb9394efec0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: tx_from_any
            obj: <function tx_from_any at 0x7fb9394f5d00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: Transaction
            obj: <class 'electrum.transaction.Transaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: PartialTransaction
            obj: <class 'electrum.transaction.PartialTransaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: TxOutpoint
            obj: <class 'electrum.transaction.TxOutpoint'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: PartialTxInput
            obj: <class 'electrum.transaction.PartialTxInput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: PartialTxOutput
            obj: <class 'electrum.transaction.PartialTxOutput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: Sighash
            obj: <enum 'Sighash'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: match_script_against_template
            obj: <function match_script_against_template at 0x7fb9394efa60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: SCRIPTPUBKEY_TEMPLATE_ANYSEGWIT
            obj: [<electrum.transaction.OPGeneric object at 0x7fb9394e9f10>, <electrum.transaction.OPPushDataGeneric object at 0x7fb9394ea090>]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: TxOutput
            obj: <class 'electrum.transaction.TxOutput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: deserialize_privkey
            obj: <function deserialize_privkey at 0x7fb939ebaca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: opcodes
            obj: <enum 'opcodes'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: construct_script
            obj: <function construct_script at 0x7fb939eb9940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: construct_witness
            obj: <function construct_witness at 0x7fb939eb98a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: descriptor
            obj: <module 'electrum.descriptor' from '/home/reconfigure/electrum/electrum/descriptor.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: disable_ecdsa_r_value_grinding
            obj: <function disable_ecdsa_r_value_grinding at 0x7fb936a139c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: signed_blob
            obj: 01000000012a5c9a94fcde98f5581cd00162c60a13936ceb75389ea65bf38633b424eb4031000000006c493046022100a82bbc57a0136751e5433f41cf000b3f1a99c6744775e76ec764fb78c54ee100022100f9e80b7de89de861dc6fb0c1429d5da72c2b6b2ee2406bc9bfb1beedd729d985012102e61d176da16edd1d258a200ad9759ef63adf8e14cd97f53227bae35cdb84d2f6ffffffff0140420f00000000001976a914230ac37834073a42146f11ef8414ae929feaafc388ac00000000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: v2_blob
            obj: 0200000001191601a44a81e061502b7bfbc6eaa1cef6d1e6af5308ef96c9342f71dbf4b9b5000000006b483045022100a6d44d0a651790a477e75334adfb8aae94d6612d01187b2c02526e340a7fd6c8022028bdf7a64a54906b13b145cd5dab21a26bd4b85d6044e9b97bceab5be44c2a9201210253e8e0254b0c95776786e40984c1aa32a7d03efa6bdacdea5f421b774917d346feffffff026b20fa04000000001976a914024db2e87dd7cfd0e5f266c5f212e21a31d805a588aca0860100000000001976a91421919b94ae5cefcdf0271191459157cdb41c4cbf88aca6240700
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: signed_segwit_blob
            obj: 01000000000101b66d722484f2db63e827ebf41d02684fed0c6550e85015a6c9d41ef216a8a6f00000000000fdffffff0280c3c90100000000160014b65ce60857f7e7892b983851c2a8e3526d09e4ab64bac30400000000160014c478ebbc0ab2097706a98e10db7cf101839931c4024730440220789c7d47f876638c58d98733c30ae9821c8fa82b470285dcdf6db5994210bf9f02204163418bbc44af701212ad42d884cc613f3d3d831d2d0cc886f767cca6e0235e012103083a6dc250816d771faa60737bfe78b23ad619f6b458e0a1f1688e3a0605e79c00000000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: signed_blob_signatures
            obj: [b'0F\x02!\x00\xa8+\xbcW\xa0\x13gQ\xe5C?A\xcf\x00\x0b?\x1a\x99\xc6tGu\xe7n\xc7d\xfbx\xc5N\xe1\x00\x02!\x00\xf9\xe8\x0b}\xe8\x9d\xe8a\xdco\xb0\xc1B\x9d]\xa7,+k.\xe2@k\xc9\xbf\xb1\xbe\xed\xd7)\xd9\x85\x01']
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: TestBCDataStream
            obj: <class 'tests.test_transaction.TestBCDataStream'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestBCDataStream> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: TestTransaction
            obj: <class 'tests.test_transaction.TestTransaction'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestTransaction> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: TestTransactionTestnet
            obj: <class 'tests.test_transaction.TestTransactionTestnet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestTransactionTestnet> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: TestSighashBIP143
            obj: <class 'tests.test_transaction.TestSighashBIP143'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestSighashBIP143> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_transaction.py>
            name: TestSighashBIP341
            obj: <class 'tests.test_transaction.TestSighashBIP341'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestSighashBIP341> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_transaction.py' lenresult=6 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_transaction.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_transaction.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestBCDataStream> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestBCDataStream>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestBCDataStream>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_transaction.py::TestBCDataStream' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bool> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bool>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bytes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bytes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_compact_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_compact_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_string> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_string>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_transaction.py::TestBCDataStream' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestTransaction> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestTransaction>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestTransaction>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_transaction.py::TestTransaction' lenresult=129 outcome='passed'> [hook]
    genitems <TestCaseFunction test_convert_raw_tx_to_hex> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_convert_raw_tx_to_hex>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_estimated_output_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_estimated_output_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_estimated_tx_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_estimated_tx_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_address_from_output_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_address_from_output_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_match_against_script_template> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_match_against_script_template>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_deserialize_for_signed_network_tx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_deserialize_for_signed_network_tx>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_from_any> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_from_any>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_serialize_methods_for_network_tx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_serialize_methods_for_network_tx>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_serialize_methods_for_psbt> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_serialize_methods_for_psbt>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_serialize_methods_for_psbt_that_is_ready_to_be_finalized> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_serialize_methods_for_psbt_that_is_ready_to_be_finalized>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_setting_locktime_invalidates_ser_cache> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_setting_locktime_invalidates_ser_cache>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_setting_version_invalidates_ser_cache> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_setting_version_invalidates_ser_cache>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_signed_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_signed_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_tx_update_signatures> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_tx_update_signatures>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0001> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0001>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0002> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0002>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0003> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0003>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0004> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0004>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0005> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0005>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0006> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0006>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0007> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0007>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0008> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0008>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0009> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0009>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0010> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0010>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0011> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0011>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0012> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0012>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0013> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0013>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0014> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0014>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0015> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0015>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0016> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0016>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0017> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0017>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0018> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0018>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0019> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0019>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0020> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0020>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0021> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0021>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0022> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0022>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0023> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0023>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0024> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0024>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0025> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0025>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0026> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0026>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0027> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0027>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0028> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0028>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0029> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0029>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0030> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0030>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0031> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0031>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0032> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0032>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0033> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0033>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0034> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0034>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0035> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0035>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0036> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0036>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0037> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0037>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0038> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0038>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0039> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0039>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0040> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0040>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0041> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0041>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0042> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0042>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0043> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0043>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0044> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0044>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0045> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0045>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0046> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0046>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0047> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0047>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0048> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0048>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0049> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0049>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0050> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0050>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0051> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0051>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0052> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0052>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0053> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0053>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0054> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0054>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0055> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0055>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0056> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0056>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0057> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0057>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0058> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0058>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0059> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0059>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0060> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0060>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0061> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0061>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0062> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0062>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0063> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0063>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0064> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0064>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0065> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0065>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0066> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0066>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0067> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0067>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0068> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0068>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0069> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0069>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0070> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0070>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0071> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0071>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0072> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0072>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0073> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0073>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0074> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0074>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0075> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0075>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0076> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0076>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0077> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0077>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0078> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0078>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0079> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0079>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0080> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0080>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0081> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0081>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0082> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0082>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0083> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0083>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0084> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0084>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0085> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0085>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0086> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0086>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0087> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0087>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0088> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0088>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0089> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0089>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0090> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0090>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0091> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0091>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_bitcoin_core_0092> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_bitcoin_core_0092>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_coinbase_to_p2pk> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_coinbase_to_p2pk>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_coinbase_to_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_coinbase_to_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_input_p2wsh_p2sh_not_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_input_p2wsh_p2sh_not_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_invalid_op_return> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_invalid_op_return>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_negative_version_num> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_negative_version_num>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2pk_to_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2pk_to_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2pk_to_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2pk_to_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2pk_to_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2pk_to_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2pkh_to_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2pkh_to_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2pkh_to_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2pkh_to_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2pkh_to_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2pkh_to_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2sh_to_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2sh_to_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2sh_to_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2sh_to_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2sh_to_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2sh_to_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2wpkh_to_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2wpkh_to_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2wpkh_to_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2wpkh_to_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_p2wpkh_to_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_p2wpkh_to_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_regression_issue_3899> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_regression_issue_3899>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_regression_issue_4333> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_regression_issue_4333>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_segwit_coinbase_to_p2pk> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_segwit_coinbase_to_p2pk>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_segwit_coinbase_to_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_segwit_coinbase_to_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_txid_segwit_coinbase_to_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_txid_segwit_coinbase_to_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_version_field> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_version_field>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_transaction.py::TestTransaction' lenresult=129 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestTransactionTestnet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestTransactionTestnet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestTransactionTestnet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_transaction.py::TestTransactionTestnet' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_spending_op_cltv_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_spending_op_cltv_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_spending_op_cltv_p2wsh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_spending_op_cltv_p2wsh>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_transaction.py::TestTransactionTestnet' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestSighashBIP143> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestSighashBIP143>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestSighashBIP143>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_transaction.py::TestSighashBIP143' lenresult=6 outcome='passed'> [hook]
    genitems <TestCaseFunction test_check_sighash_types_sighash_all> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_sighash_types_sighash_all>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_sighash_types_sighash_all_anyonecanpay> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_sighash_types_sighash_all_anyonecanpay>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_sighash_types_sighash_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_sighash_types_sighash_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_sighash_types_sighash_none_anyonecanpay> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_sighash_types_sighash_none_anyonecanpay>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_sighash_types_sighash_single> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_sighash_types_sighash_single>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_sighash_types_sighash_single_anyonecanpay> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_sighash_types_sighash_single_anyonecanpay>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_transaction.py::TestSighashBIP143' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestSighashBIP341> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestSighashBIP341>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestSighashBIP341>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_transaction.py::TestSighashBIP341' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_taproot_keypath_spending> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_taproot_keypath_spending>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_transaction.py::TestSighashBIP341' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_transaction.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_util.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_util.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_util.py>
      find_module called for: tests.test_util [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_util.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_util.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: Decimal
            obj: <class 'decimal.Decimal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: format_satoshis
            obj: <function format_satoshis at 0x7fb93a0f98a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: format_fee_satoshis
            obj: <function format_fee_satoshis at 0x7fb93a0f9940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_hash256_str
            obj: <function is_hash256_str at 0x7fb93a0f93a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: chunks
            obj: <function chunks at 0x7fb93a0f9760>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_ip_address
            obj: <function is_ip_address at 0x7fb93a104680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: list_enabled_bits
            obj: <function list_enabled_bits at 0x7fb93a104860>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: format_satoshis_plain
            obj: <function format_satoshis_plain at 0x7fb93a0f9800>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_private_netaddress
            obj: <function is_private_netaddress at 0x7fb93a1047c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_hex_str
            obj: <function is_hex_str at 0x7fb93a0f9440>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_integer
            obj: <function is_integer at 0x7fb93a0f94e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_non_negative_integer
            obj: <function is_non_negative_integer at 0x7fb93a0f9580>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_int_or_float
            obj: <function is_int_or_float at 0x7fb93a0f9620>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: is_non_negative_int_or_float
            obj: <function is_non_negative_int_or_float at 0x7fb93a0f96c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: parse_bip21_URI
            obj: <function parse_bip21_URI at 0x7fb93945fd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: InvalidBitcoinURI
            obj: <class 'electrum.bip21.InvalidBitcoinURI'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: as_testnet
            obj: <function as_testnet at 0x7fb93a9c2d40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_util.py>
            name: TestUtil
            obj: <class 'tests.test_util.TestUtil'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestUtil> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_util.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_util.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_util.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestUtil> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestUtil>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestUtil>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_util.py::TestUtil' lenresult=44 outcome='passed'> [hook]
    genitems <TestCaseFunction test_age> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_age>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_chunks> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_chunks>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_error_text_bytes_to_safe_str> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_error_text_bytes_to_safe_str>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_error_text_str_to_safe_str> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_error_text_str_to_safe_str>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_fee_decimal> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_fee_decimal>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_fee_float> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_fee_float>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_fee_precision> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_fee_precision>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_add_thousands_sep> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_add_thousands_sep>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_decimal> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_decimal>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_diff_negative> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_diff_negative>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_diff_positive> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_diff_positive>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_msat_resolution> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_msat_resolution>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_negative> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_negative>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_plain> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_plain>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_plain_decimal> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_plain_decimal>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_plain_to_mbtc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_plain_to_mbtc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_to_mbtc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_to_mbtc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_whitespaces> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_whitespaces>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_format_satoshis_whitespaces_negative> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_format_satoshis_whitespaces_negative>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_hash256_str> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_hash256_str>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_hex_str> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_hex_str>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_int_or_float> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_int_or_float>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_integer> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_integer>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_ip_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_ip_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_non_negative_int_or_float> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_non_negative_int_or_float>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_non_negative_integer> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_non_negative_integer>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_private_netaddress> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_private_netaddress>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_is_subpath> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_is_subpath>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_list_enabled_bits> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_list_enabled_bits>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_address_amount> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_address_amount>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_address_label> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_address_label>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_address_message> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_address_message>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_address_request_url> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_address_request_url>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_ignore_args> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_ignore_args>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_invalid> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_invalid>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_invalid_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_invalid_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_lightning_consistency> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_lightning_consistency>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_multiple_args> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_multiple_args>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_no_address_request_url> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_no_address_request_url>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_only_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_only_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_parameter_pollution> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_parameter_pollution>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parse_URI_unsupported_req_key> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parse_URI_unsupported_req_key>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_util.py::TestUtil' lenresult=44 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_util.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_verifier.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_verifier.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_verifier.py>
      find_module called for: tests.test_verifier [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_verifier.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_verifier.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: hash_encode
            obj: <function hash_encode at 0x7fb939eb9b20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: Transaction
            obj: <class 'electrum.transaction.Transaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: SPV
            obj: <class 'electrum.verifier.SPV'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: InnerNodeOfSpvProofIsValidTx
            obj: <class 'electrum.verifier.InnerNodeOfSpvProofIsValidTx'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: MERKLE_BRANCH
            obj: ['f2994fd4546086b21b4916b76cf901afb5c4db1c3ecbfc91d6f4cae1186dfe12', '6b65935528311901c7acda7db817bd6e3ce2f05d1c62c385b7caadb65fac7520']
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: MERKLE_ROOT
            obj: 11dbac015b6969ea75509dd1250f33c04ec4d562c2d895de139a65f62f808254
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: VALID_64_BYTE_TX
            obj: 0200000001cb659c5528311901a7aada7db817bd6e3ce2f05d1c62c385b7caadb65fac75201234000000fabcdefa01abcd1234010000000405060708fabcdefa
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: @py_assert2
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: @py_assert5
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: @py_assert4
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_verifier.py>
            name: VerifierTestCase
            obj: <class 'tests.test_verifier.VerifierTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase VerifierTestCase> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_verifier.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_verifier.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_verifier.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase VerifierTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase VerifierTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase VerifierTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_verifier.py::VerifierTestCase' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_verify_fail_f_tx_even> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_verify_fail_f_tx_even>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_verify_fail_f_tx_odd> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_verify_fail_f_tx_odd>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_verify_ok_t_tx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_verify_ok_t_tx>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_verifier.py::VerifierTestCase' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_verifier.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_wallet.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_wallet.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_wallet.py>
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: shutil
            obj: <module 'shutil' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/shutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: json
            obj: <module 'json' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: Decimal
            obj: <class 'decimal.Decimal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: time
            obj: <module 'time' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: StringIO
            obj: <class '_io.StringIO'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: WalletStorage
            obj: <class 'electrum.storage.WalletStorage'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: FINAL_SEED_VERSION
            obj: 59
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: Abstract_Wallet
            obj: <class 'electrum.wallet.Abstract_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: Standard_Wallet
            obj: <class 'electrum.wallet.Standard_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: create_new_wallet
            obj: <function create_new_wallet at 0x7fb9377200e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: Imported_Wallet
            obj: <class 'electrum.wallet.Imported_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: Wallet
            obj: <class 'electrum.wallet.Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: ExchangeBase
            obj: <class 'electrum.exchange_rate.ExchangeBase'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: FxThread
            obj: <class 'electrum.exchange_rate.FxThread'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: TxMinedInfo
            obj: <class 'electrum.util.TxMinedInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: InvalidPassword
            obj: <class 'electrum.util.InvalidPassword'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: COIN
            obj: 100000000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: WalletDB
            obj: <class 'electrum.wallet_db.WalletDB'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: JsonDB
            obj: <class 'electrum.json_db.JsonDB'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: Daemon
            obj: <class 'electrum.daemon.Daemon'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: PR_UNPAID
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: PR_PAID
            obj: 3
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: PR_UNCONFIRMED
            obj: 7
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: tx_from_any
            obj: <function tx_from_any at 0x7fb9394f5d00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: TX_HEIGHT_UNCONFIRMED
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: FakeSynchronizer
            obj: <class 'tests.test_wallet.FakeSynchronizer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: WalletTestCase
            obj: <class 'tests.test_wallet.WalletTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase WalletTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: TestWalletStorage
            obj: <class 'tests.test_wallet.TestWalletStorage'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletStorage> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: FakeExchange
            obj: <class 'tests.test_wallet.FakeExchange'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: FakeFxThread
            obj: <class 'tests.test_wallet.FakeFxThread'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: FakeADB
            obj: <class 'tests.test_wallet.FakeADB'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: FakeWallet
            obj: <class 'tests.test_wallet.FakeWallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: txid
            obj: abc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: ccy
            obj: TEST
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: TestFiat
            obj: <class 'tests.test_wallet.TestFiat'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestFiat> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: TestCreateRestoreWallet
            obj: <class 'tests.test_wallet.TestCreateRestoreWallet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCreateRestoreWallet> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet.py>
            name: TestWalletPassword
            obj: <class 'tests.test_wallet.TestWalletPassword'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletPassword> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet.py' lenresult=6 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase WalletTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase WalletTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase WalletTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet.py::WalletTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet.py::WalletTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletStorage> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletStorage>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletStorage>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet.py::TestWalletStorage' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_read_dictionary_from_file> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_dictionary_from_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_storage_imported_add_privkeys_persistence_test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_storage_imported_add_privkeys_persistence_test>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_storage_prevouts_by_scripthash_persistence> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_storage_prevouts_by_scripthash_persistence>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_write_dictionary_to_file> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_write_dictionary_to_file>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet.py::TestWalletStorage' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestFiat> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestFiat>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestFiat>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet.py::TestFiat' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_empty_resets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_empty_resets>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_save_fiat_and_reset> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_save_fiat_and_reset>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_save_garbage> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_save_garbage>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_too_high_precision_value_resets_with_no_saved_value> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_too_high_precision_value_resets_with_no_saved_value>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet.py::TestFiat' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCreateRestoreWallet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCreateRestoreWallet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCreateRestoreWallet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet.py::TestCreateRestoreWallet' lenresult=8 outcome='passed'> [hook]
    genitems <TestCaseFunction test_create_new_wallet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_new_wallet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restore_wallet_from_text_addresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restore_wallet_from_text_addresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restore_wallet_from_text_mnemonic> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restore_wallet_from_text_mnemonic>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restore_wallet_from_text_no_storage> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restore_wallet_from_text_no_storage>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restore_wallet_from_text_privkeys> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restore_wallet_from_text_privkeys>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restore_wallet_from_text_xkey_that_is_also_a_valid_electrum_seed_by_chance> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restore_wallet_from_text_xkey_that_is_also_a_valid_electrum_seed_by_chance>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restore_wallet_from_text_xprv> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restore_wallet_from_text_xprv>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restore_wallet_from_text_xpub> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restore_wallet_from_text_xpub>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet.py::TestCreateRestoreWallet' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletPassword> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletPassword>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletPassword>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet.py::TestWalletPassword' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_update_password_of_imported_wallet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_update_password_of_imported_wallet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_update_password_of_standard_wallet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_update_password_of_standard_wallet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_update_password_with_app_restarts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_update_password_with_app_restarts>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet.py::TestWalletPassword' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_wallet_vertical.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_wallet_vertical.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_wallet_vertical.py>
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: mock
            obj: <module 'unittest.mock' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: shutil
            obj: <module 'shutil' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/shutil.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: tempfile
            obj: <module 'tempfile' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Sequence
            obj: typing.Sequence
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: asyncio
            obj: <module 'asyncio' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/asyncio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: copy
            obj: <module 'copy' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/copy.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: storage
            obj: <module 'electrum.storage' from '/home/reconfigure/electrum/electrum/storage.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: bitcoin
            obj: <module 'electrum.bitcoin' from '/home/reconfigure/electrum/electrum/bitcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: keystore
            obj: <module 'electrum.keystore' from '/home/reconfigure/electrum/electrum/keystore.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: bip32
            obj: <module 'electrum.bip32' from '/home/reconfigure/electrum/electrum/bip32.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: slip39
            obj: <module 'electrum.slip39' from '/home/reconfigure/electrum/electrum/slip39.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: wallet
            obj: <module 'electrum.wallet' from '/home/reconfigure/electrum/electrum/wallet.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Transaction
            obj: <class 'electrum.transaction.Transaction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: util
            obj: <module 'electrum.util' from '/home/reconfigure/electrum/electrum/util.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TX_HEIGHT_UNCONFIRMED
            obj: 0
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TX_HEIGHT_UNCONF_PARENT
            obj: -1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TX_HEIGHT_LOCAL
            obj: -2
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: sweep
            obj: <function sweep at 0x7fb9383102c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Multisig_Wallet
            obj: <class 'electrum.wallet.Multisig_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Standard_Wallet
            obj: <class 'electrum.wallet.Standard_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Imported_Wallet
            obj: <class 'electrum.wallet.Imported_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: restore_wallet_from_text
            obj: <function restore_wallet_from_text at 0x7fb937720360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Abstract_Wallet
            obj: <class 'electrum.wallet.Abstract_Wallet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: CannotBumpFee
            obj: <class 'electrum.wallet.CannotBumpFee'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: BumpFeeStrategy
            obj: <enum 'BumpFeeStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TransactionPotentiallyDangerousException
            obj: <class 'electrum.wallet.TransactionPotentiallyDangerousException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TransactionDangerousException
            obj: <class 'electrum.wallet.TransactionDangerousException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TxSighashRiskLevel
            obj: <enum 'TxSighashRiskLevel'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: bfh
            obj: <built-in method fromhex of type object at 0x7fb951690680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: NotEnoughFunds
            obj: <class 'electrum.util.NotEnoughFunds'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: UnrelatedTransactionException
            obj: <class 'electrum.util.UnrelatedTransactionException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: UserFacingException
            obj: <class 'electrum.util.UserFacingException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TxMinedInfo
            obj: <class 'electrum.util.TxMinedInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: PartialTxOutput
            obj: <class 'electrum.transaction.PartialTxOutput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: tx_from_any
            obj: <function tx_from_any at 0x7fb9394f5d00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Sighash
            obj: <enum 'Sighash'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: calc_seed_type
            obj: <function calc_seed_type at 0x7fb9393a4720>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: Network
            obj: <class 'electrum.network.Network'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: trustedcoin
            obj: <module 'electrum.plugins.trustedcoin.trustedcoin' from '/home/reconfigure/electrum/electrum/plugins/trustedcoin/trustedcoin.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: UNICODE_HORROR_HEX
            obj: e282bf20f09f988020f09f98882020202020e3818620e38191e3819fe381be20e3828fe3828b2077cda2cda2cd9d68cda16fcda2cda120ccb8cda26bccb5cd9f6eccb4cd98c7ab77ccb8cc9b73cd9820cc80cc8177cd98cda2e1b8a9ccb561d289cca1cda27420cca7cc9568cc816fccb572cd8fccb5726f7273cca120ccb6cda1cda06cc4afccb665cd9fcd9f20ccb6cd9d696ecda220cd8f74cc9568ccb7cca1cd9f6520cd9fcd9f64cc9b61cd9c72cc95cda16bcca2cca820cda168ccb465cd8f61ccb7cca2cca17274cc81cd8f20ccb4ccb7cda0c3b2ccb5ccb666ccb82075cca7cd986ec3adcc9bcd9c63cda2cd8f6fccb7cd8f64ccb8cda265cca1cd9d3fcd9e
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: UNICODE_HORROR
            obj: ₿ 😀 😈     う けたま わる w͢͢͝h͡o͢͡ ̸͢k̵͟n̴͘ǫw̸̛s͘ ̀́w͘͢ḩ̵a҉̡͢t ̧̕h́o̵r͏̵rors̡ ̶͡͠lį̶e͟͟ ̶͝in͢ ͏t̕h̷̡͟e ͟͟d̛a͜r̕͡k̢̨ ͡h̴e͏a̷̢̡rt́͏ ̴̷͠ò̵̶f̸ u̧͘ní̛͜c͢͏o̷͏d̸͢e̡͝?͞
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: @py_assert2
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: @py_assert1
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: WalletIntegrityHelper
            obj: <class 'tests.test_wallet_vertical.WalletIntegrityHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletKeystoreAddressIntegrityForMainnet
            obj: <class 'tests.test_wallet_vertical.TestWalletKeystoreAddressIntegrityForMainnet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletKeystoreAddressIntegrityForMainnet> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletKeystoreAddressIntegrityForTestnet
            obj: <class 'tests.test_wallet_vertical.TestWalletKeystoreAddressIntegrityForTestnet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletKeystoreAddressIntegrityForTestnet> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletSending
            obj: <class 'tests.test_wallet_vertical.TestWalletSending'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletSending> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletOfflineSigning
            obj: <class 'tests.test_wallet_vertical.TestWalletOfflineSigning'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletOfflineSigning> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletCreationChecks
            obj: <class 'tests.test_wallet_vertical.TestWalletCreationChecks'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletCreationChecks> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletHistory_SimpleRandomOrder
            obj: <class 'tests.test_wallet_vertical.TestWalletHistory_SimpleRandomOrder'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletHistory_SimpleRandomOrder> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletHistory_EvilGapLimit
            obj: <class 'tests.test_wallet_vertical.TestWalletHistory_EvilGapLimit'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletHistory_EvilGapLimit> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletHistory_DoubleSpend
            obj: <class 'tests.test_wallet_vertical.TestWalletHistory_DoubleSpend'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletHistory_DoubleSpend> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestWalletHistory_HelperFns
            obj: <class 'tests.test_wallet_vertical.TestWalletHistory_HelperFns'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestWalletHistory_HelperFns> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wallet_vertical.py>
            name: TestImportedWallet
            obj: <class 'tests.test_wallet_vertical.TestImportedWallet'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestImportedWallet> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py' lenresult=11 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletKeystoreAddressIntegrityForMainnet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletKeystoreAddressIntegrityForMainnet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletKeystoreAddressIntegrityForMainnet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrityForMainnet' lenresult=25 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bip32_extended_version_bytes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip32_extended_version_bytes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip39_multisig_seed_bip45_standard> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip39_multisig_seed_bip45_standard>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip39_seed_bip44_standard> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip39_seed_bip44_standard>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip39_seed_bip44_standard_passphrase> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip39_seed_bip44_standard_passphrase>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip39_seed_bip49_p2sh_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip39_seed_bip49_p2sh_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip39_seed_bip84_native_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip39_seed_bip84_native_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_multisig_seed_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_multisig_seed_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_multisig_seed_standard> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_multisig_seed_standard>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_2fa_legacy_post27> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_2fa_legacy_post27>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_24words> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_24words>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_25words> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_25words>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_2fa_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_2fa_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_old> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_old>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_segwit_passphrase> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_segwit_passphrase>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_electrum_seed_standard> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_electrum_seed_standard>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_extendable_basic_2of5_bip49_p2sh_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_extendable_basic_2of5_bip49_p2sh_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_extendable_basic_3of6_bip44_standard> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_extendable_basic_3of6_bip44_standard>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_extendable_groups_128bit_bip84_native_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_extendable_groups_128bit_bip84_native_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_extendable_groups_256bit_bip49_p2sh_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_extendable_groups_256bit_bip49_p2sh_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_non_extendable_basic_2of5_bip49_p2sh_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_non_extendable_basic_2of5_bip49_p2sh_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_non_extendable_basic_3of6_bip44_standard> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_non_extendable_basic_3of6_bip44_standard>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_non_extendable_groups_128bit_bip84_native_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_non_extendable_groups_128bit_bip84_native_segwit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_slip39_non_extendable_groups_256bit_bip49_p2sh_segwit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_slip39_non_extendable_groups_256bit_bip49_p2sh_segwit>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrityForMainnet' lenresult=25 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletKeystoreAddressIntegrityForTestnet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletKeystoreAddressIntegrityForTestnet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletKeystoreAddressIntegrityForTestnet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrityForTestnet' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bip32_extended_version_bytes> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip32_extended_version_bytes>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit_testnet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit_testnet>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrityForTestnet' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletSending> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletSending>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletSending>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletSending' lenresult=30 outcome='passed'> [hook]
    genitems <TestCaseFunction test_coinjoin_between_two_p2wpkh_electrum_seeds> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_coinjoin_between_two_p2wpkh_electrum_seeds>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_cpfp_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_cpfp_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_cpfp_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_cpfp_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dscancel> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dscancel>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_psbt__rm_witness_utxo_from_non_segwit_input> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_psbt__rm_witness_utxo_from_non_segwit_input>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_psbt_with_xpubs__multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_psbt_with_xpubs__multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_psbt_with_xpubs__singlesig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_psbt_with_xpubs__singlesig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_spendable_coins> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_spendable_coins>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_imported_wallet_usechange_off> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_imported_wallet_usechange_off>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_imported_wallet_usechange_on> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_imported_wallet_usechange_on>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_imported_wallet_usechange_on__no_more_unused_addresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_imported_wallet_usechange_on__no_more_unused_addresses>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_join_psbts__merge_duplicate_outputs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_join_psbts__merge_duplicate_outputs>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_rbf> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_rbf>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_rbf_batching__cannot_batch_as_would_need_to_use_ismine_outputs_of_basetx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_rbf_batching__cannot_batch_as_would_need_to_use_ismine_outputs_of_basetx>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_rbf_batching__merge_duplicate_outputs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_rbf_batching__merge_duplicate_outputs>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_between_p2sh_1of2_and_p2wpkh_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_between_p2sh_1of2_and_p2wpkh_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_between_p2sh_2of3_and_uncompressed_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_between_p2sh_2of3_and_uncompressed_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_between_p2wpkh_and_compressed_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_between_p2wpkh_and_compressed_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_between_p2wsh_2of3_and_p2wsh_p2sh_2of2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_between_p2wsh_2of3_and_p2wsh_p2sh_2of2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sighash_warnings> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sighash_warnings>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_standard_wallet_cannot_sign_multisig_input_even_if_cosigner> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_standard_wallet_cannot_sign_multisig_input_even_if_cosigner>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sweep_compressed_p2pk> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sweep_compressed_p2pk>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sweep_compressed_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sweep_compressed_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sweep_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sweep_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sweep_p2wpkh_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sweep_p2wpkh_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sweep_uncompressed_p2pk> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sweep_uncompressed_p2pk>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sweep_uncompressed_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sweep_uncompressed_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_does_not_create_zero_input_tx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_does_not_create_zero_input_tx>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wallet_history_chain_of_unsigned_transactions> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wallet_history_chain_of_unsigned_transactions>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_we_dont_sign_tx_including_dummy_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_we_dont_sign_tx_including_dummy_address>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletSending' lenresult=30 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletOfflineSigning> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletOfflineSigning>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletOfflineSigning>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletOfflineSigning' lenresult=15 outcome='passed'> [hook]
    genitems <TestCaseFunction test_offline_signing_beyond_gap_limit> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_offline_signing_beyond_gap_limit>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_old_electrum_seed_online_mpk> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_old_electrum_seed_online_mpk>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_wif_online_addr_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_wif_online_addr_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_xprv_online_addr_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_xprv_online_addr_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_xprv_online_xpub_p2pkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_xprv_online_xpub_p2pkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh_p2sh> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh_p2sh>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_signing_where_offline_ks_does_not_have_keyorigin_but_psbt_contains_it> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_signing_where_offline_ks_does_not_have_keyorigin_but_psbt_contains_it>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletOfflineSigning' lenresult=15 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletCreationChecks> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletCreationChecks>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletCreationChecks>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletCreationChecks' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_duplicate_masterkeys_in_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_duplicate_masterkeys_in_multisig>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_heterogeneous_xpub_types_in_multisig> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_heterogeneous_xpub_types_in_multisig>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletCreationChecks' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletHistory_SimpleRandomOrder> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletHistory_SimpleRandomOrder>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletHistory_SimpleRandomOrder>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_SimpleRandomOrder' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_restoring_old_wallet_txorder1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restoring_old_wallet_txorder1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restoring_old_wallet_txorder2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restoring_old_wallet_txorder2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restoring_old_wallet_txorder3> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restoring_old_wallet_txorder3>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_SimpleRandomOrder' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletHistory_EvilGapLimit> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletHistory_EvilGapLimit>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletHistory_EvilGapLimit>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_EvilGapLimit' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_restoring_wallet_txorder1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restoring_wallet_txorder1>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_EvilGapLimit' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletHistory_DoubleSpend> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletHistory_DoubleSpend>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletHistory_DoubleSpend>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_DoubleSpend' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_restoring_wallet_with_manual_delete> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restoring_wallet_with_manual_delete>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_restoring_wallet_without_manual_delete> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_restoring_wallet_without_manual_delete>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_DoubleSpend' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestWalletHistory_HelperFns> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestWalletHistory_HelperFns>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestWalletHistory_HelperFns>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_HelperFns' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_partial_tx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_partial_tx>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_signed_tx> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_signed_tx>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestWalletHistory_HelperFns' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestImportedWallet> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestImportedWallet>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestImportedWallet>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wallet_vertical.py::TestImportedWallet' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_importing_and_deleting_addresses> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_importing_and_deleting_addresses>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py::TestImportedWallet' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wallet_vertical.py' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_wizard.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_wizard.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_wizard.py>
      find_module called for: tests.test_wizard [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_wizard.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_wizard.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: SimpleConfig
            obj: <class 'electrum.simple_config.SimpleConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: ServerAddr
            obj: <class 'electrum.interface.ServerAddr'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: NetworkParameters
            obj: <class 'electrum.network.NetworkParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: Plugins
            obj: <class 'electrum.plugin.Plugins'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: ServerConnectWizard
            obj: <class 'electrum.wizard.ServerConnectWizard'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: NewWalletWizard
            obj: <class 'electrum.wizard.NewWalletWizard'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: NetworkMock
            obj: <class 'tests.test_wizard.NetworkMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: DaemonMock
            obj: <class 'tests.test_wizard.DaemonMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: WizardTestCase
            obj: <class 'tests.test_wizard.WizardTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase WizardTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: ServerConnectWizardTestCase
            obj: <class 'tests.test_wizard.ServerConnectWizardTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ServerConnectWizardTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_wizard.py>
            name: WalletWizardTestCase
            obj: <class 'tests.test_wizard.WalletWizardTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase WalletWizardTestCase> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wizard.py' lenresult=4 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wizard.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wizard.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase WizardTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase WizardTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase WizardTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wizard.py::WizardTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wizard.py::WizardTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase ServerConnectWizardTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ServerConnectWizardTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ServerConnectWizardTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wizard.py::ServerConnectWizardTestCase' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_no_advanced> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_no_advanced>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_proxy> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_proxy>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_proxy_and_server> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_proxy_and_server>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_server> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_server>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wizard.py::ServerConnectWizardTestCase' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase WalletWizardTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase WalletWizardTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase WalletWizardTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_wizard.py::WalletWizardTestCase' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_2fa> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_2fa>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_standard_wallet_haveseed_bip39> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_standard_wallet_haveseed_bip39>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_standard_wallet_haveseed_electrum> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_standard_wallet_haveseed_electrum>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_standard_wallet_newseed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_standard_wallet_newseed>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wizard.py::WalletWizardTestCase' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_wizard.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_x509.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_x509.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_x509.py>
      find_module called for: tests.test_x509 [assertion]
      matched test file '/home/reconfigure/electrum/tests/test_x509.py' [assertion]
      found cached rewritten pyc for /home/reconfigure/electrum/tests/test_x509.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_x509.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_x509.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_x509.py>
            name: unittest
            obj: <module 'unittest' from '/home/reconfigure/.pyenv/versions/3.11.9/lib/python3.11/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_x509.py>
            name: X509
            obj: <class 'electrum.x509.X509'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_x509.py>
            name: ElectrumTestCase
            obj: <class 'tests.ElectrumTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ElectrumTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_x509.py>
            name: TestX509
            obj: <class 'tests.test_x509.TestX509'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestX509> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_x509.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase ElectrumTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ElectrumTestCase>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_x509.py::ElectrumTestCase' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_x509.py::ElectrumTestCase' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestX509> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestX509>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestX509>
      finish pytest_make_collect_report --> <CollectReport 'tests/test_x509.py::TestX509' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_generalizedtime> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_generalizedtime>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_x509.py::TestX509' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_x509.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests' lenresult=38 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>
          config: <_pytest.config.Config object at 0x7fb950228490>
          items: [<TestCaseFunction test_add_number_to_script>, <TestCaseFunction test_address_to_payload>, <TestCaseFunction test_address_to_script>, <TestCaseFunction test_aes_decode_with_invalid_password>, <TestCaseFunction test_aes_deencode_without_password>, <TestCaseFunction test_aes_encode_without_password>, <TestCaseFunction test_aes_homomorphic>, <TestCaseFunction test_bech32_decode>, <TestCaseFunction test_chacha20_encrypt__12_byte_nonce>, <TestCaseFunction test_chacha20_encrypt__8_byte_nonce>, <TestCaseFunction test_chacha20_poly1305_decrypt__with_associated_data>, <TestCaseFunction test_chacha20_poly1305_decrypt__without_associated_data>, <TestCaseFunction test_chacha20_poly1305_encrypt__with_associated_data>, <TestCaseFunction test_chacha20_poly1305_encrypt__without_associated_data>, <TestCaseFunction test_crypto>, <TestCaseFunction test_cryptography_is_available>, <TestCaseFunction test_decrypt_message>, <TestCaseFunction test_encrypt_message>, <TestCaseFunction test_libsecp256k1_is_available>, <TestCaseFunction test_op_push>, <TestCaseFunction test_push_script>, <TestCaseFunction test_pyaes_is_available>, <TestCaseFunction test_pycryptodomex_is_available>, <TestCaseFunction test_script_num_to_hex>, <TestCaseFunction test_sha256d>, <TestCaseFunction test_signmessage_legacy_address>, <TestCaseFunction test_signmessage_low_s>, <TestCaseFunction test_signmessage_segwit_witness_v0_address>, <TestCaseFunction test_signmessage_segwit_witness_v0_address_test_we_also_accept_sigs_from_trezor>, <TestCaseFunction test_var_int>, <TestCaseFunction test_address_to_script>, <TestCaseFunction test_bip32>, <TestCaseFunction test_bip32_from_xkey>, <TestCaseFunction test_convert_bip32_intpath_to_strpath>, <TestCaseFunction test_convert_bip32_strpath_to_intpath>, <TestCaseFunction test_is_all_public_derivation>, <TestCaseFunction test_is_bip32_derivation>, <TestCaseFunction test_is_xkey_consistent_with_key_origin_info>, <TestCaseFunction test_is_xprv>, <TestCaseFunction test_is_xpub>, <TestCaseFunction test_normalize_bip32_derivation>, <TestCaseFunction test_version_bytes>, <TestCaseFunction test_xpub_from_xprv>, <TestCaseFunction test_xpub_type>, <TestCaseFunction test_xtype_from_derivation>, <TestCaseFunction test_version_bytes>, <TestCaseFunction test_address_from_private_key>, <TestCaseFunction test_address_to_scripthash>, <TestCaseFunction test_is_address_bad_checksums>, <TestCaseFunction test_is_compressed_privkey>, <TestCaseFunction test_is_minikey>, <TestCaseFunction test_is_private_key>, <TestCaseFunction test_is_valid_address>, <TestCaseFunction test_public_key_from_private_key>, <TestCaseFunction test_segwit_uncompressed_pubkey>, <TestCaseFunction test_serialize_privkey>, <TestCaseFunction test_wif_with_invalid_magic_byte_for_compressed_pubkey>, <TestCaseFunction test_base43>, <TestCaseFunction test_base58>, <TestCaseFunction test_base58check>, <TestCaseFunction test_taproot_output_script>, <TestCaseFunction test_taproot_tweak_homomorphism>, <TestCaseFunction test_doing_multiple_swaps_after_single_new_header>, <TestCaseFunction test_forking_and_swapping>, <TestCaseFunction test_get_chains_that_contain_header>, <TestCaseFunction test_get_height_of_last_common_block_with_chain>, <TestCaseFunction test_parents_after_forking>, <TestCaseFunction test_target_to_bits>, <TestCaseFunction test_expected_hash_mismatch>, <TestCaseFunction test_insufficient_pow>, <TestCaseFunction test_prev_hash_mismatch>, <TestCaseFunction test_target_mismatch>, <TestCaseFunction test_valid_header>, <TestCaseFunction test_derive_payment_secret_from_payment_preimage>, <TestCaseFunction test_features>, <TestCaseFunction test_min_final_cltv_expiry_decoding>, <TestCaseFunction test_min_final_cltv_expiry_roundtrip>, <TestCaseFunction test_n_decoding>, <TestCaseFunction test_payment_secret>, <TestCaseFunction test_roundtrip>, <TestCaseFunction test_shorten_amount>, <TestCaseFunction test_validate_and_compare_features>, <TestCaseFunction test_bucket_candidates_with_empty_buckets>, <TestCaseFunction test_convert_xkey>, <TestCaseFunction test_encrypt_decrypt>, <TestCaseFunction test_eval_bool>, <TestCaseFunction test_export_private_key_deterministic>, <TestCaseFunction test_export_private_key_imported>, <TestCaseFunction test_setconfig_auth>, <TestCaseFunction test_setconfig_non_auth_boolean>, <TestCaseFunction test_setconfig_non_auth_list>, <TestCaseFunction test_setconfig_non_auth_number>, <TestCaseFunction test_setconfig_non_auth_number_as_string>, <TestCaseFunction test_bumpfee>, <TestCaseFunction test_convert_xkey>, <TestCaseFunction test_getprivatekeyforpath>, <TestCaseFunction test_importprivkey>, <TestCaseFunction test_payto>, <TestCaseFunction test_payto__confirmed_only>, <TestCaseFunction test_paytomany_multiple_max_spends>, <TestCaseFunction test_serialize>, <TestCaseFunction test_serialize_custom_nsequence>, <TestCaseFunction test_signtransaction_with_wallet>, <TestCaseFunction test_signtransaction_without_wallet>, <TestCaseFunction test_saving_contacts>, <TestCaseFunction test_can_unify_large_folder_yet_to_be_unified>, <TestCaseFunction test_can_unify_two_std_wallets_both_have_ks_and_sto_enc>, <TestCaseFunction test_can_unify_two_std_wallets_one_has_ks_enc_other_has_both_enc>, <TestCaseFunction test_can_unify_two_std_wallets_one_without_password>, <TestCaseFunction test_cannot_unify_mixed_wallets>, <TestCaseFunction test_cannot_unify_two_std_wallets_both_have_ks_and_sto_enc>, <TestCaseFunction test_wp_command_with_diskfile_wallet_has_password>, <TestCaseFunction test_wp_command_with_diskfile_wallet_no_password>, <TestCaseFunction test_wp_command_with_inmemory_wallet_has_password>, <TestCaseFunction test_wp_command_with_inmemory_wallet_no_password>, <TestCaseFunction test_checksums>, <TestCaseFunction test_multisig_descriptor_with_mixed_range>, <TestCaseFunction test_parse_descriptor_context>, <TestCaseFunction test_parse_descriptor_replace_h>, <TestCaseFunction test_parse_descriptor_unknown_notation_for_hardened_derivation>, <TestCaseFunction test_parse_descriptor_with_key_at_end_with_origin>, <TestCaseFunction test_parse_descriptor_with_key_at_end_without_origin>, <TestCaseFunction test_parse_descriptor_with_origin>, <TestCaseFunction test_parse_descriptor_with_origin_fingerprint_only>, <TestCaseFunction test_parse_descriptor_with_range>, <TestCaseFunction test_parse_descriptor_without_origin>, <TestCaseFunction test_parse_descriptor_ypub_zpub_forbidden>, <TestCaseFunction test_parse_empty_descriptor>, <TestCaseFunction test_parse_multisig_descriptor_with_origin>, <TestCaseFunction test_parse_multisig_descriptor_with_range>, <TestCaseFunction test_pubkey_provider_deriv_path>, <TestCaseFunction test_sortedmulti_ranged_pubkey_order>, <TestCaseFunction test_sortedmulti_unranged_pubkey_order>, <TestCaseFunction test_tr_descriptor>, <TestCaseFunction test_tr_descriptor_bip386>, <TestCaseFunction test_uncompressed_pubkey_in_segwit>, <TestCaseFunction test_from_str>, <TestCaseFunction test_from_str_with_inference>, <TestCaseFunction test_to_friendly_name>, <TestCaseFunction test_wallet_get_request_by_addr>, <TestCaseFunction test_wallet_gets_paid_onchain_in_the_past>, <TestCaseFunction test_wallet_reuse_addr_of_expired_request>, <TestCaseFunction test_wallet_reuse_unused_fallback_onchain_addr_when_getting_paid_with_lightning>, <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_on_ln>, <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_onchain>, <TestCaseFunction test_wallet_without_ln_creates_payreq_and_gets_paid_onchain>, <TestCaseFunction test_arg_validation>, <TestCaseFunction test_fee>, <TestCaseFunction test_AddHTLCNegativeBalance>, <TestCaseFunction test_SimpleAddSettleWorkflow>, <TestCaseFunction test_UpdateFeeReceiverCommits>, <TestCaseFunction test_UpdateFeeSenderCommits>, <TestCaseFunction test_concurrent_reversed_payment>, <TestCaseFunction test_AddHTLCNegativeBalance>, <TestCaseFunction test_SimpleAddSettleWorkflow>, <TestCaseFunction test_UpdateFeeReceiverCommits>, <TestCaseFunction test_UpdateFeeSenderCommits>, <TestCaseFunction test_concurrent_reversed_payment>, <TestCaseFunction test_DesyncHTLCs>, <TestCaseFunction test_DesyncHTLCs>, <TestCaseFunction test_part1>, <TestCaseFunction test_part1>, <TestCaseFunction test_DustLimit>, <TestCaseFunction test_DustLimit>, <TestCaseFunction test_adding_htlc_between_send_ctx_and_recv_rev>, <TestCaseFunction test_adding_htlcs_race>, <TestCaseFunction test_remove_htlc_while_owing_commitment>, <TestCaseFunction test_single_htlc_full_lifecycle>, <TestCaseFunction test_unacked_local_updates>, <TestCaseFunction test_decode_onion_error>, <TestCaseFunction test_encode_decode_msg__commitment_signed>, <TestCaseFunction test_encode_decode_msg__init>, <TestCaseFunction test_encode_decode_msg__ints_can_be_passed_as_bytes>, <TestCaseFunction test_encode_decode_msg__missing_mandatory_field_gets_set_to_zeroes>, <TestCaseFunction test_read_bigsize_int>, <TestCaseFunction test_read_tlv_stream_tests1>, <TestCaseFunction test_read_tlv_stream_tests2>, <TestCaseFunction test_read_tlv_stream_tests3>, <TestCaseFunction test_write_bigsize_int>, <TestCaseFunction test_channel_usage_after_closing>, <TestCaseFunction test_check_invoice_before_payment>, <TestCaseFunction test_close_upfront_shutdown_script>, <TestCaseFunction test_error>, <TestCaseFunction test_legacy_shutdown_high>, <TestCaseFunction test_legacy_shutdown_low>, <TestCaseFunction test_modern_shutdown_with_overlap>, <TestCaseFunction test_payment_bundle>, <TestCaseFunction test_payment_bundle_timeout>, <TestCaseFunction test_payment_race>, <TestCaseFunction test_payment_recv_mpp_confusion1>, <TestCaseFunction test_payment_recv_mpp_confusion2>, <TestCaseFunction test_payments_stresstest>, <TestCaseFunction test_reestablish>, <TestCaseFunction test_reestablish_replay_messages_rev_then_sig>, <TestCaseFunction test_reestablish_replay_messages_sig_then_rev>, <TestCaseFunction test_reestablish_with_old_state>, <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length>, <TestCaseFunction test_sending_weird_messages__unknown_even_type>, <TestCaseFunction test_sending_weird_messages_that_should_be_ignored>, <TestCaseFunction test_simple_payment_failure>, <TestCaseFunction test_simple_payment_failure_with_hold_invoice>, <TestCaseFunction test_simple_payment_success>, <TestCaseFunction test_simple_payment_success_with_hold_invoice>, <TestCaseFunction test_warning>, <TestCaseFunction test_fail_pending_htlcs_on_shutdown>, <TestCaseFunction test_payment_multihop>, <TestCaseFunction test_payment_multihop_route_around_failure>, <TestCaseFunction test_payment_multihop_temp_node_failure>, <TestCaseFunction test_payment_multihop_with_preselected_path>, <TestCaseFunction test_payment_multipart>, <TestCaseFunction test_payment_multipart_trampoline_e2e>, <TestCaseFunction test_payment_multipart_trampoline_legacy>, <TestCaseFunction test_payment_multipart_with_hold_invoice>, <TestCaseFunction test_payment_multipart_with_timeout>, <TestCaseFunction test_payment_multipart_wrong_invoice>, <TestCaseFunction test_payment_trampoline_e2e_direct>, <TestCaseFunction test_payment_trampoline_e2e_indirect>, <TestCaseFunction test_payment_trampoline_legacy>, <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints>, <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created>, <TestCaseFunction test_trampoline_mpp_consolidation>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure>, <TestCaseFunction test_channel_usage_after_closing>, <TestCaseFunction test_check_invoice_before_payment>, <TestCaseFunction test_close_upfront_shutdown_script>, <TestCaseFunction test_error>, <TestCaseFunction test_legacy_shutdown_high>, <TestCaseFunction test_legacy_shutdown_low>, <TestCaseFunction test_modern_shutdown_with_overlap>, <TestCaseFunction test_payment_bundle>, <TestCaseFunction test_payment_bundle_timeout>, <TestCaseFunction test_payment_race>, <TestCaseFunction test_payment_recv_mpp_confusion1>, <TestCaseFunction test_payment_recv_mpp_confusion2>, <TestCaseFunction test_payments_stresstest>, <TestCaseFunction test_reestablish>, <TestCaseFunction test_reestablish_replay_messages_rev_then_sig>, <TestCaseFunction test_reestablish_replay_messages_sig_then_rev>, <TestCaseFunction test_reestablish_with_old_state>, <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length>, <TestCaseFunction test_sending_weird_messages__unknown_even_type>, <TestCaseFunction test_sending_weird_messages_that_should_be_ignored>, <TestCaseFunction test_simple_payment_failure>, <TestCaseFunction test_simple_payment_failure_with_hold_invoice>, <TestCaseFunction test_simple_payment_success>, <TestCaseFunction test_simple_payment_success_with_hold_invoice>, <TestCaseFunction test_warning>, <TestCaseFunction test_fail_pending_htlcs_on_shutdown>, <TestCaseFunction test_payment_multihop>, <TestCaseFunction test_payment_multihop_route_around_failure>, <TestCaseFunction test_payment_multihop_temp_node_failure>, <TestCaseFunction test_payment_multihop_with_preselected_path>, <TestCaseFunction test_payment_multipart>, <TestCaseFunction test_payment_multipart_trampoline_e2e>, <TestCaseFunction test_payment_multipart_trampoline_legacy>, <TestCaseFunction test_payment_multipart_with_hold_invoice>, <TestCaseFunction test_payment_multipart_with_timeout>, <TestCaseFunction test_payment_multipart_wrong_invoice>, <TestCaseFunction test_payment_trampoline_e2e_direct>, <TestCaseFunction test_payment_trampoline_e2e_indirect>, <TestCaseFunction test_payment_trampoline_legacy>, <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints>, <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created>, <TestCaseFunction test_trampoline_mpp_consolidation>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure>, <TestCaseFunction test_decode_onion_error>, <TestCaseFunction test_find_path_for_payment>, <TestCaseFunction test_find_path_liquidity_hints>, <TestCaseFunction test_find_path_liquidity_hints_inflight_htlcs>, <TestCaseFunction test_liquidity_hints>, <TestCaseFunction test_new_onion_packet>, <TestCaseFunction test_process_onion_packet>, <TestCaseFunction test_extract_nodeid>, <TestCaseFunction test_loop>, <TestCaseFunction test_responder>, <TestCaseFunction test_split_host_port>, <TestCaseFunction test_decode>, <TestCaseFunction test_encode>, <TestCaseFunction test_lightning_address_to_url>, <TestCaseFunction test_channel_type>, <TestCaseFunction test_commitment_tx_anchors_test_vectors>, <TestCaseFunction test_commitment_tx_with_all_five_HTLCs_untrimmed_minimum_feerate>, <TestCaseFunction test_commitment_tx_with_fee_greater_than_funder_amount>, <TestCaseFunction test_commitment_tx_with_one_output>, <TestCaseFunction test_decode_imported_channel_backup_v0>, <TestCaseFunction test_decode_imported_channel_backup_v1>, <TestCaseFunction test_extract_commitment_number_from_tx>, <TestCaseFunction test_get_compressed_pubkey_from_bech32>, <TestCaseFunction test_key_derivation>, <TestCaseFunction test_ln_compare_features>, <TestCaseFunction test_ln_features_for_init_message>, <TestCaseFunction test_ln_features_for_invoice>, <TestCaseFunction test_ln_features_supports>, <TestCaseFunction test_ln_features_validate_transitive_dependencies>, <TestCaseFunction test_lnworker_decode_channel_update_msg>, <TestCaseFunction test_per_commitment_secret_from_seed>, <TestCaseFunction test_shachain_produce_consume>, <TestCaseFunction test_shachain_store>, <TestCaseFunction test_simple_commitment_tx_with_no_HTLCs>, <TestCaseFunction test_mnemonic_to_seed>, <TestCaseFunction test_mnemonic_to_seed_basic>, <TestCaseFunction test_random_seeds>, <TestCaseFunction test>, <TestCaseFunction test_checksum>, <TestCaseFunction test_cjk_normalization>, <TestCaseFunction test_calc_seed_type>, <TestCaseFunction test_can_seed_have_passphrase>, <TestCaseFunction test_is_matching_seed>, <TestCaseFunction test_new_seed>, <TestCaseFunction test_old_seed>, <TestCaseFunction test_make_group_prefix>, <TestCaseFunction test_slip39_vectors>, <TestCaseFunction test_payment_below_min_part_size>, <TestCaseFunction test_saturation>, <TestCaseFunction test_send_to_single_node>, <TestCaseFunction test_suggest_part_penalty>, <TestCaseFunction test_suggest_splits>, <TestCaseFunction test_suggest_splits_single_channel>, <TestCaseFunction test_can_connect_during_backward>, <TestCaseFunction test_chain_false_during_binary>, <TestCaseFunction test_fork_conflict>, <TestCaseFunction test_fork_noconflict>, <TestCaseFunction test_bip21>, <TestCaseFunction test_bip70>, <TestCaseFunction test_bolt11>, <TestCaseFunction test_email_and_domain>, <TestCaseFunction test_invoice_from_payment_identifier>, <TestCaseFunction test_lnurl>, <TestCaseFunction test_maybe_extract_lightning_payment_identifier>, <TestCaseFunction test_multiline>, <TestCaseFunction test_spk>, <TestCaseFunction test_valid_psbt_001>, <TestCaseFunction test_valid_psbt_002>, <TestCaseFunction test_valid_psbt_003>, <TestCaseFunction test_valid_psbt_004>, <TestCaseFunction test_valid_psbt_005>, <TestCaseFunction test_valid_psbt_006>, <TestCaseFunction test_valid_psbt_007>, <TestCaseFunction test_valid_psbt_008>, <TestCaseFunction test_valid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo>, <TestCaseFunction test_invalid_psbt_001>, <TestCaseFunction test_invalid_psbt_002>, <TestCaseFunction test_invalid_psbt_003>, <TestCaseFunction test_invalid_psbt_004>, <TestCaseFunction test_invalid_psbt_005>, <TestCaseFunction test_invalid_psbt_006>, <TestCaseFunction test_invalid_psbt_007>, <TestCaseFunction test_invalid_psbt_008>, <TestCaseFunction test_invalid_psbt_009>, <TestCaseFunction test_invalid_psbt_010>, <TestCaseFunction test_invalid_psbt_011>, <TestCaseFunction test_invalid_psbt_012>, <TestCaseFunction test_invalid_psbt_013>, <TestCaseFunction test_invalid_psbt_014>, <TestCaseFunction test_invalid_psbt_015>, <TestCaseFunction test_invalid_psbt_016>, <TestCaseFunction test_invalid_psbt_017>, <TestCaseFunction test_invalid_psbt_018>, <TestCaseFunction test_invalid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo_that_are_inconsistent>, <TestCaseFunction test_psbt_fails_signer_checks_001>, <TestCaseFunction test_psbt_fails_signer_checks_002>, <TestCaseFunction test_psbt_fails_signer_checks_003>, <TestCaseFunction test_psbt_fails_signer_checks_004>, <TestCaseFunction test_psbt_combiner_unknown_fields>, <TestCaseFunction test_version_0_noisemap>, <TestCaseFunction test_version_1_noisemap>, <TestCaseFunction test_version_1_noisemap_indexerror>, <TestCaseFunction test_can_set_options_set_in_user_config>, <TestCaseFunction test_cannot_set_options_passed_by_command_line>, <TestCaseFunction test_configvars_convert_getter>, <TestCaseFunction test_configvars_from_key>, <TestCaseFunction test_configvars_get_default_value>, <TestCaseFunction test_configvars_is_modifiable>, <TestCaseFunction test_configvars_is_set>, <TestCaseFunction test_configvars_set_and_get>, <TestCaseFunction test_depth_target_to_fee>, <TestCaseFunction test_fee_to_depth>, <TestCaseFunction test_simple_config_command_line_overrides_everything>, <TestCaseFunction test_simple_config_key_rename>, <TestCaseFunction test_simple_config_user_config_is_used_if_others_arent_specified>, <TestCaseFunction test_user_config_is_not_written_with_read_only_config>, <TestCaseFunction test_no_path_means_no_result>, <TestCaseFunction test_path_with_reprd_object>, <TestCaseFunction test_path_without_config_file>, <TestCaseFunction test_claim_tx_for_successful_reverse_swap>, <TestCaseFunction test_claim_tx_for_timing_out_forward_swap>, <TestCaseFunction test_upgrade_from_client_1_9_8_seeded>, <TestCaseFunction test_upgrade_from_client_2_0_4_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_0_4_multisig>, <TestCaseFunction test_upgrade_from_client_2_0_4_seeded>, <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_0_4_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_1_1_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_1_1_multisig>, <TestCaseFunction test_upgrade_from_client_2_1_1_seeded>, <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_1_1_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_2_0_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_2_0_multisig>, <TestCaseFunction test_upgrade_from_client_2_2_0_seeded>, <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_2_0_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_3_2_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_3_2_multisig>, <TestCaseFunction test_upgrade_from_client_2_3_2_seeded>, <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_3_2_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_4_3_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_4_3_multisig>, <TestCaseFunction test_upgrade_from_client_2_4_3_seeded>, <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_4_3_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_5_4_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_5_4_multisig>, <TestCaseFunction test_upgrade_from_client_2_5_4_seeded>, <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_5_4_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_6_4_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_6_4_multisig>, <TestCaseFunction test_upgrade_from_client_2_6_4_seeded>, <TestCaseFunction test_upgrade_from_client_2_6_4_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_7_18_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_7_18_multisig>, <TestCaseFunction test_upgrade_from_client_2_7_18_seeded>, <TestCaseFunction test_upgrade_from_client_2_7_18_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_7_18_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18>, <TestCaseFunction test_upgrade_from_client_2_8_3_multisig>, <TestCaseFunction test_upgrade_from_client_2_8_3_seeded>, <TestCaseFunction test_upgrade_from_client_2_8_3_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_8_3_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys_keystore_changes>, <TestCaseFunction test_upgrade_from_client_2_9_3_multisig>, <TestCaseFunction test_upgrade_from_client_2_9_3_old_seeded_with_realistic_history>, <TestCaseFunction test_upgrade_from_client_2_9_3_seeded>, <TestCaseFunction test_upgrade_from_client_2_9_3_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_9_3_watchaddresses>, <TestCaseFunction test_upgrade_from_client_3_2_3_ledger_standard_keystore_changes>, <TestCaseFunction test_upgrade_from_client_3_3_8_xpub_with_realistic_history>, <TestCaseFunction test_upgrade_from_client_4_5_2_9dk_with_ln>, <TestCaseFunction test_bool>, <TestCaseFunction test_bytes>, <TestCaseFunction test_compact_size>, <TestCaseFunction test_string>, <TestCaseFunction test_convert_raw_tx_to_hex>, <TestCaseFunction test_estimated_output_size>, <TestCaseFunction test_estimated_tx_size>, <TestCaseFunction test_get_address_from_output_script>, <TestCaseFunction test_match_against_script_template>, <TestCaseFunction test_tx_deserialize_for_signed_network_tx>, <TestCaseFunction test_tx_from_any>, <TestCaseFunction test_tx_serialize_methods_for_network_tx>, <TestCaseFunction test_tx_serialize_methods_for_psbt>, <TestCaseFunction test_tx_serialize_methods_for_psbt_that_is_ready_to_be_finalized>, <TestCaseFunction test_tx_setting_locktime_invalidates_ser_cache>, <TestCaseFunction test_tx_setting_version_invalidates_ser_cache>, <TestCaseFunction test_tx_signed_segwit>, <TestCaseFunction test_tx_update_signatures>, <TestCaseFunction test_txid_bitcoin_core_0001>, <TestCaseFunction test_txid_bitcoin_core_0002>, <TestCaseFunction test_txid_bitcoin_core_0003>, <TestCaseFunction test_txid_bitcoin_core_0004>, <TestCaseFunction test_txid_bitcoin_core_0005>, <TestCaseFunction test_txid_bitcoin_core_0006>, <TestCaseFunction test_txid_bitcoin_core_0007>, <TestCaseFunction test_txid_bitcoin_core_0008>, <TestCaseFunction test_txid_bitcoin_core_0009>, <TestCaseFunction test_txid_bitcoin_core_0010>, <TestCaseFunction test_txid_bitcoin_core_0011>, <TestCaseFunction test_txid_bitcoin_core_0012>, <TestCaseFunction test_txid_bitcoin_core_0013>, <TestCaseFunction test_txid_bitcoin_core_0014>, <TestCaseFunction test_txid_bitcoin_core_0015>, <TestCaseFunction test_txid_bitcoin_core_0016>, <TestCaseFunction test_txid_bitcoin_core_0017>, <TestCaseFunction test_txid_bitcoin_core_0018>, <TestCaseFunction test_txid_bitcoin_core_0019>, <TestCaseFunction test_txid_bitcoin_core_0020>, <TestCaseFunction test_txid_bitcoin_core_0021>, <TestCaseFunction test_txid_bitcoin_core_0022>, <TestCaseFunction test_txid_bitcoin_core_0023>, <TestCaseFunction test_txid_bitcoin_core_0024>, <TestCaseFunction test_txid_bitcoin_core_0025>, <TestCaseFunction test_txid_bitcoin_core_0026>, <TestCaseFunction test_txid_bitcoin_core_0027>, <TestCaseFunction test_txid_bitcoin_core_0028>, <TestCaseFunction test_txid_bitcoin_core_0029>, <TestCaseFunction test_txid_bitcoin_core_0030>, <TestCaseFunction test_txid_bitcoin_core_0031>, <TestCaseFunction test_txid_bitcoin_core_0032>, <TestCaseFunction test_txid_bitcoin_core_0033>, <TestCaseFunction test_txid_bitcoin_core_0034>, <TestCaseFunction test_txid_bitcoin_core_0035>, <TestCaseFunction test_txid_bitcoin_core_0036>, <TestCaseFunction test_txid_bitcoin_core_0037>, <TestCaseFunction test_txid_bitcoin_core_0038>, <TestCaseFunction test_txid_bitcoin_core_0039>, <TestCaseFunction test_txid_bitcoin_core_0040>, <TestCaseFunction test_txid_bitcoin_core_0041>, <TestCaseFunction test_txid_bitcoin_core_0042>, <TestCaseFunction test_txid_bitcoin_core_0043>, <TestCaseFunction test_txid_bitcoin_core_0044>, <TestCaseFunction test_txid_bitcoin_core_0045>, <TestCaseFunction test_txid_bitcoin_core_0046>, <TestCaseFunction test_txid_bitcoin_core_0047>, <TestCaseFunction test_txid_bitcoin_core_0048>, <TestCaseFunction test_txid_bitcoin_core_0049>, <TestCaseFunction test_txid_bitcoin_core_0050>, <TestCaseFunction test_txid_bitcoin_core_0051>, <TestCaseFunction test_txid_bitcoin_core_0052>, <TestCaseFunction test_txid_bitcoin_core_0053>, <TestCaseFunction test_txid_bitcoin_core_0054>, <TestCaseFunction test_txid_bitcoin_core_0055>, <TestCaseFunction test_txid_bitcoin_core_0056>, <TestCaseFunction test_txid_bitcoin_core_0057>, <TestCaseFunction test_txid_bitcoin_core_0058>, <TestCaseFunction test_txid_bitcoin_core_0059>, <TestCaseFunction test_txid_bitcoin_core_0060>, <TestCaseFunction test_txid_bitcoin_core_0061>, <TestCaseFunction test_txid_bitcoin_core_0062>, <TestCaseFunction test_txid_bitcoin_core_0063>, <TestCaseFunction test_txid_bitcoin_core_0064>, <TestCaseFunction test_txid_bitcoin_core_0065>, <TestCaseFunction test_txid_bitcoin_core_0066>, <TestCaseFunction test_txid_bitcoin_core_0067>, <TestCaseFunction test_txid_bitcoin_core_0068>, <TestCaseFunction test_txid_bitcoin_core_0069>, <TestCaseFunction test_txid_bitcoin_core_0070>, <TestCaseFunction test_txid_bitcoin_core_0071>, <TestCaseFunction test_txid_bitcoin_core_0072>, <TestCaseFunction test_txid_bitcoin_core_0073>, <TestCaseFunction test_txid_bitcoin_core_0074>, <TestCaseFunction test_txid_bitcoin_core_0075>, <TestCaseFunction test_txid_bitcoin_core_0076>, <TestCaseFunction test_txid_bitcoin_core_0077>, <TestCaseFunction test_txid_bitcoin_core_0078>, <TestCaseFunction test_txid_bitcoin_core_0079>, <TestCaseFunction test_txid_bitcoin_core_0080>, <TestCaseFunction test_txid_bitcoin_core_0081>, <TestCaseFunction test_txid_bitcoin_core_0082>, <TestCaseFunction test_txid_bitcoin_core_0083>, <TestCaseFunction test_txid_bitcoin_core_0084>, <TestCaseFunction test_txid_bitcoin_core_0085>, <TestCaseFunction test_txid_bitcoin_core_0086>, <TestCaseFunction test_txid_bitcoin_core_0087>, <TestCaseFunction test_txid_bitcoin_core_0088>, <TestCaseFunction test_txid_bitcoin_core_0089>, <TestCaseFunction test_txid_bitcoin_core_0090>, <TestCaseFunction test_txid_bitcoin_core_0091>, <TestCaseFunction test_txid_bitcoin_core_0092>, <TestCaseFunction test_txid_coinbase_to_p2pk>, <TestCaseFunction test_txid_coinbase_to_p2pkh>, <TestCaseFunction test_txid_input_p2wsh_p2sh_not_multisig>, <TestCaseFunction test_txid_invalid_op_return>, <TestCaseFunction test_txid_negative_version_num>, <TestCaseFunction test_txid_p2pk_to_p2pkh>, <TestCaseFunction test_txid_p2pk_to_p2sh>, <TestCaseFunction test_txid_p2pk_to_p2wpkh>, <TestCaseFunction test_txid_p2pkh_to_p2pkh>, <TestCaseFunction test_txid_p2pkh_to_p2sh>, <TestCaseFunction test_txid_p2pkh_to_p2wpkh>, <TestCaseFunction test_txid_p2sh_to_p2pkh>, <TestCaseFunction test_txid_p2sh_to_p2sh>, <TestCaseFunction test_txid_p2sh_to_p2wpkh>, <TestCaseFunction test_txid_p2wpkh_to_p2pkh>, <TestCaseFunction test_txid_p2wpkh_to_p2sh>, <TestCaseFunction test_txid_p2wpkh_to_p2wpkh>, <TestCaseFunction test_txid_regression_issue_3899>, <TestCaseFunction test_txid_regression_issue_4333>, <TestCaseFunction test_txid_segwit_coinbase_to_p2pk>, <TestCaseFunction test_txid_segwit_coinbase_to_p2pkh>, <TestCaseFunction test_txid_segwit_coinbase_to_p2sh>, <TestCaseFunction test_version_field>, <TestCaseFunction test_spending_op_cltv_p2sh>, <TestCaseFunction test_spending_op_cltv_p2wsh>, <TestCaseFunction test_check_sighash_types_sighash_all>, <TestCaseFunction test_check_sighash_types_sighash_all_anyonecanpay>, <TestCaseFunction test_check_sighash_types_sighash_none>, <TestCaseFunction test_check_sighash_types_sighash_none_anyonecanpay>, <TestCaseFunction test_check_sighash_types_sighash_single>, <TestCaseFunction test_check_sighash_types_sighash_single_anyonecanpay>, <TestCaseFunction test_taproot_keypath_spending>, <TestCaseFunction test_age>, <TestCaseFunction test_chunks>, <TestCaseFunction test_error_text_bytes_to_safe_str>, <TestCaseFunction test_error_text_str_to_safe_str>, <TestCaseFunction test_format_fee_decimal>, <TestCaseFunction test_format_fee_float>, <TestCaseFunction test_format_fee_precision>, <TestCaseFunction test_format_satoshis>, <TestCaseFunction test_format_satoshis_add_thousands_sep>, <TestCaseFunction test_format_satoshis_decimal>, <TestCaseFunction test_format_satoshis_diff_negative>, <TestCaseFunction test_format_satoshis_diff_positive>, <TestCaseFunction test_format_satoshis_msat_resolution>, <TestCaseFunction test_format_satoshis_negative>, <TestCaseFunction test_format_satoshis_plain>, <TestCaseFunction test_format_satoshis_plain_decimal>, <TestCaseFunction test_format_satoshis_plain_to_mbtc>, <TestCaseFunction test_format_satoshis_to_mbtc>, <TestCaseFunction test_format_satoshis_whitespaces>, <TestCaseFunction test_format_satoshis_whitespaces_negative>, <TestCaseFunction test_is_hash256_str>, <TestCaseFunction test_is_hex_str>, <TestCaseFunction test_is_int_or_float>, <TestCaseFunction test_is_integer>, <TestCaseFunction test_is_ip_address>, <TestCaseFunction test_is_non_negative_int_or_float>, <TestCaseFunction test_is_non_negative_integer>, <TestCaseFunction test_is_private_netaddress>, <TestCaseFunction test_is_subpath>, <TestCaseFunction test_list_enabled_bits>, <TestCaseFunction test_parse_URI_address>, <TestCaseFunction test_parse_URI_address_amount>, <TestCaseFunction test_parse_URI_address_label>, <TestCaseFunction test_parse_URI_address_message>, <TestCaseFunction test_parse_URI_address_request_url>, <TestCaseFunction test_parse_URI_ignore_args>, <TestCaseFunction test_parse_URI_invalid>, <TestCaseFunction test_parse_URI_invalid_address>, <TestCaseFunction test_parse_URI_lightning_consistency>, <TestCaseFunction test_parse_URI_multiple_args>, <TestCaseFunction test_parse_URI_no_address_request_url>, <TestCaseFunction test_parse_URI_only_address>, <TestCaseFunction test_parse_URI_parameter_pollution>, <TestCaseFunction test_parse_URI_unsupported_req_key>, <TestCaseFunction test_verify_fail_f_tx_even>, <TestCaseFunction test_verify_fail_f_tx_odd>, <TestCaseFunction test_verify_ok_t_tx>, <TestCaseFunction test_read_dictionary_from_file>, <TestCaseFunction test_storage_imported_add_privkeys_persistence_test>, <TestCaseFunction test_storage_prevouts_by_scripthash_persistence>, <TestCaseFunction test_write_dictionary_to_file>, <TestCaseFunction test_empty_resets>, <TestCaseFunction test_save_fiat_and_reset>, <TestCaseFunction test_save_garbage>, <TestCaseFunction test_too_high_precision_value_resets_with_no_saved_value>, <TestCaseFunction test_create_new_wallet>, <TestCaseFunction test_restore_wallet_from_text_addresses>, <TestCaseFunction test_restore_wallet_from_text_mnemonic>, <TestCaseFunction test_restore_wallet_from_text_no_storage>, <TestCaseFunction test_restore_wallet_from_text_privkeys>, <TestCaseFunction test_restore_wallet_from_text_xkey_that_is_also_a_valid_electrum_seed_by_chance>, <TestCaseFunction test_restore_wallet_from_text_xprv>, <TestCaseFunction test_restore_wallet_from_text_xpub>, <TestCaseFunction test_update_password_of_imported_wallet>, <TestCaseFunction test_update_password_of_standard_wallet>, <TestCaseFunction test_update_password_with_app_restarts>, <TestCaseFunction test_bip32_extended_version_bytes>, <TestCaseFunction test_bip39_multisig_seed_bip45_standard>, <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit>, <TestCaseFunction test_bip39_seed_bip44_standard>, <TestCaseFunction test_bip39_seed_bip44_standard_passphrase>, <TestCaseFunction test_bip39_seed_bip49_p2sh_segwit>, <TestCaseFunction test_bip39_seed_bip84_native_segwit>, <TestCaseFunction test_electrum_multisig_seed_segwit>, <TestCaseFunction test_electrum_multisig_seed_standard>, <TestCaseFunction test_electrum_seed_2fa_legacy_post27>, <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_24words>, <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_25words>, <TestCaseFunction test_electrum_seed_2fa_segwit>, <TestCaseFunction test_electrum_seed_old>, <TestCaseFunction test_electrum_seed_segwit>, <TestCaseFunction test_electrum_seed_segwit_passphrase>, <TestCaseFunction test_electrum_seed_standard>, <TestCaseFunction test_slip39_extendable_basic_2of5_bip49_p2sh_segwit>, <TestCaseFunction test_slip39_extendable_basic_3of6_bip44_standard>, <TestCaseFunction test_slip39_extendable_groups_128bit_bip84_native_segwit>, <TestCaseFunction test_slip39_extendable_groups_256bit_bip49_p2sh_segwit>, <TestCaseFunction test_slip39_non_extendable_basic_2of5_bip49_p2sh_segwit>, <TestCaseFunction test_slip39_non_extendable_basic_3of6_bip44_standard>, <TestCaseFunction test_slip39_non_extendable_groups_128bit_bip84_native_segwit>, <TestCaseFunction test_slip39_non_extendable_groups_256bit_bip49_p2sh_segwit>, <TestCaseFunction test_bip32_extended_version_bytes>, <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit_testnet>, <TestCaseFunction test_coinjoin_between_two_p2wpkh_electrum_seeds>, <TestCaseFunction test_cpfp_p2pkh>, <TestCaseFunction test_cpfp_p2wpkh>, <TestCaseFunction test_dscancel>, <TestCaseFunction test_export_psbt__rm_witness_utxo_from_non_segwit_input>, <TestCaseFunction test_export_psbt_with_xpubs__multisig>, <TestCaseFunction test_export_psbt_with_xpubs__singlesig>, <TestCaseFunction test_get_spendable_coins>, <TestCaseFunction test_imported_wallet_usechange_off>, <TestCaseFunction test_imported_wallet_usechange_on>, <TestCaseFunction test_imported_wallet_usechange_on__no_more_unused_addresses>, <TestCaseFunction test_join_psbts__merge_duplicate_outputs>, <TestCaseFunction test_rbf>, <TestCaseFunction test_rbf_batching__cannot_batch_as_would_need_to_use_ismine_outputs_of_basetx>, <TestCaseFunction test_rbf_batching__merge_duplicate_outputs>, <TestCaseFunction test_sending_between_p2sh_1of2_and_p2wpkh_p2sh>, <TestCaseFunction test_sending_between_p2sh_2of3_and_uncompressed_p2pkh>, <TestCaseFunction test_sending_between_p2wpkh_and_compressed_p2pkh>, <TestCaseFunction test_sending_between_p2wsh_2of3_and_p2wsh_p2sh_2of2>, <TestCaseFunction test_sighash_warnings>, <TestCaseFunction test_standard_wallet_cannot_sign_multisig_input_even_if_cosigner>, <TestCaseFunction test_sweep_compressed_p2pk>, <TestCaseFunction test_sweep_compressed_p2pkh>, <TestCaseFunction test_sweep_p2wpkh>, <TestCaseFunction test_sweep_p2wpkh_p2sh>, <TestCaseFunction test_sweep_uncompressed_p2pk>, <TestCaseFunction test_sweep_uncompressed_p2pkh>, <TestCaseFunction test_wallet_does_not_create_zero_input_tx>, <TestCaseFunction test_wallet_history_chain_of_unsigned_transactions>, <TestCaseFunction test_we_dont_sign_tx_including_dummy_address>, <TestCaseFunction test_offline_signing_beyond_gap_limit>, <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2sh>, <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh>, <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh_p2sh>, <TestCaseFunction test_sending_offline_old_electrum_seed_online_mpk>, <TestCaseFunction test_sending_offline_wif_online_addr_p2pkh>, <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh>, <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh_p2sh>, <TestCaseFunction test_sending_offline_xprv_online_addr_p2pkh>, <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh>, <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh_p2sh>, <TestCaseFunction test_sending_offline_xprv_online_xpub_p2pkh>, <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh>, <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh_p2sh>, <TestCaseFunction test_signing_where_offline_ks_does_not_have_keyorigin_but_psbt_contains_it>, <TestCaseFunction test_duplicate_masterkeys_in_multisig>, <TestCaseFunction test_heterogeneous_xpub_types_in_multisig>, <TestCaseFunction test_restoring_old_wallet_txorder1>, <TestCaseFunction test_restoring_old_wallet_txorder2>, <TestCaseFunction test_restoring_old_wallet_txorder3>, <TestCaseFunction test_restoring_wallet_txorder1>, <TestCaseFunction test_restoring_wallet_with_manual_delete>, <TestCaseFunction test_restoring_wallet_without_manual_delete>, <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_partial_tx>, <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_signed_tx>, <TestCaseFunction test_importing_and_deleting_addresses>, <TestCaseFunction test_no_advanced>, <TestCaseFunction test_proxy>, <TestCaseFunction test_proxy_and_server>, <TestCaseFunction test_server>, <TestCaseFunction test_2fa>, <TestCaseFunction test_create_standard_wallet_haveseed_bip39>, <TestCaseFunction test_create_standard_wallet_haveseed_electrum>, <TestCaseFunction test_create_standard_wallet_newseed>, <TestCaseFunction test_generalizedtime>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7fb950228490>
            items: [<TestCaseFunction test_add_number_to_script>, <TestCaseFunction test_address_to_payload>, <TestCaseFunction test_address_to_script>, <TestCaseFunction test_aes_decode_with_invalid_password>, <TestCaseFunction test_aes_deencode_without_password>, <TestCaseFunction test_aes_encode_without_password>, <TestCaseFunction test_aes_homomorphic>, <TestCaseFunction test_bech32_decode>, <TestCaseFunction test_chacha20_encrypt__12_byte_nonce>, <TestCaseFunction test_chacha20_encrypt__8_byte_nonce>, <TestCaseFunction test_chacha20_poly1305_decrypt__with_associated_data>, <TestCaseFunction test_chacha20_poly1305_decrypt__without_associated_data>, <TestCaseFunction test_chacha20_poly1305_encrypt__with_associated_data>, <TestCaseFunction test_chacha20_poly1305_encrypt__without_associated_data>, <TestCaseFunction test_crypto>, <TestCaseFunction test_cryptography_is_available>, <TestCaseFunction test_decrypt_message>, <TestCaseFunction test_encrypt_message>, <TestCaseFunction test_libsecp256k1_is_available>, <TestCaseFunction test_op_push>, <TestCaseFunction test_push_script>, <TestCaseFunction test_pyaes_is_available>, <TestCaseFunction test_pycryptodomex_is_available>, <TestCaseFunction test_script_num_to_hex>, <TestCaseFunction test_sha256d>, <TestCaseFunction test_signmessage_legacy_address>, <TestCaseFunction test_signmessage_low_s>, <TestCaseFunction test_signmessage_segwit_witness_v0_address>, <TestCaseFunction test_signmessage_segwit_witness_v0_address_test_we_also_accept_sigs_from_trezor>, <TestCaseFunction test_var_int>, <TestCaseFunction test_address_to_script>, <TestCaseFunction test_bip32>, <TestCaseFunction test_bip32_from_xkey>, <TestCaseFunction test_convert_bip32_intpath_to_strpath>, <TestCaseFunction test_convert_bip32_strpath_to_intpath>, <TestCaseFunction test_is_all_public_derivation>, <TestCaseFunction test_is_bip32_derivation>, <TestCaseFunction test_is_xkey_consistent_with_key_origin_info>, <TestCaseFunction test_is_xprv>, <TestCaseFunction test_is_xpub>, <TestCaseFunction test_normalize_bip32_derivation>, <TestCaseFunction test_version_bytes>, <TestCaseFunction test_xpub_from_xprv>, <TestCaseFunction test_xpub_type>, <TestCaseFunction test_xtype_from_derivation>, <TestCaseFunction test_version_bytes>, <TestCaseFunction test_address_from_private_key>, <TestCaseFunction test_address_to_scripthash>, <TestCaseFunction test_is_address_bad_checksums>, <TestCaseFunction test_is_compressed_privkey>, <TestCaseFunction test_is_minikey>, <TestCaseFunction test_is_private_key>, <TestCaseFunction test_is_valid_address>, <TestCaseFunction test_public_key_from_private_key>, <TestCaseFunction test_segwit_uncompressed_pubkey>, <TestCaseFunction test_serialize_privkey>, <TestCaseFunction test_wif_with_invalid_magic_byte_for_compressed_pubkey>, <TestCaseFunction test_base43>, <TestCaseFunction test_base58>, <TestCaseFunction test_base58check>, <TestCaseFunction test_taproot_output_script>, <TestCaseFunction test_taproot_tweak_homomorphism>, <TestCaseFunction test_doing_multiple_swaps_after_single_new_header>, <TestCaseFunction test_forking_and_swapping>, <TestCaseFunction test_get_chains_that_contain_header>, <TestCaseFunction test_get_height_of_last_common_block_with_chain>, <TestCaseFunction test_parents_after_forking>, <TestCaseFunction test_target_to_bits>, <TestCaseFunction test_expected_hash_mismatch>, <TestCaseFunction test_insufficient_pow>, <TestCaseFunction test_prev_hash_mismatch>, <TestCaseFunction test_target_mismatch>, <TestCaseFunction test_valid_header>, <TestCaseFunction test_derive_payment_secret_from_payment_preimage>, <TestCaseFunction test_features>, <TestCaseFunction test_min_final_cltv_expiry_decoding>, <TestCaseFunction test_min_final_cltv_expiry_roundtrip>, <TestCaseFunction test_n_decoding>, <TestCaseFunction test_payment_secret>, <TestCaseFunction test_roundtrip>, <TestCaseFunction test_shorten_amount>, <TestCaseFunction test_validate_and_compare_features>, <TestCaseFunction test_bucket_candidates_with_empty_buckets>, <TestCaseFunction test_convert_xkey>, <TestCaseFunction test_encrypt_decrypt>, <TestCaseFunction test_eval_bool>, <TestCaseFunction test_export_private_key_deterministic>, <TestCaseFunction test_export_private_key_imported>, <TestCaseFunction test_setconfig_auth>, <TestCaseFunction test_setconfig_non_auth_boolean>, <TestCaseFunction test_setconfig_non_auth_list>, <TestCaseFunction test_setconfig_non_auth_number>, <TestCaseFunction test_setconfig_non_auth_number_as_string>, <TestCaseFunction test_bumpfee>, <TestCaseFunction test_convert_xkey>, <TestCaseFunction test_getprivatekeyforpath>, <TestCaseFunction test_importprivkey>, <TestCaseFunction test_payto>, <TestCaseFunction test_payto__confirmed_only>, <TestCaseFunction test_paytomany_multiple_max_spends>, <TestCaseFunction test_serialize>, <TestCaseFunction test_serialize_custom_nsequence>, <TestCaseFunction test_signtransaction_with_wallet>, <TestCaseFunction test_signtransaction_without_wallet>, <TestCaseFunction test_saving_contacts>, <TestCaseFunction test_can_unify_large_folder_yet_to_be_unified>, <TestCaseFunction test_can_unify_two_std_wallets_both_have_ks_and_sto_enc>, <TestCaseFunction test_can_unify_two_std_wallets_one_has_ks_enc_other_has_both_enc>, <TestCaseFunction test_can_unify_two_std_wallets_one_without_password>, <TestCaseFunction test_cannot_unify_mixed_wallets>, <TestCaseFunction test_cannot_unify_two_std_wallets_both_have_ks_and_sto_enc>, <TestCaseFunction test_wp_command_with_diskfile_wallet_has_password>, <TestCaseFunction test_wp_command_with_diskfile_wallet_no_password>, <TestCaseFunction test_wp_command_with_inmemory_wallet_has_password>, <TestCaseFunction test_wp_command_with_inmemory_wallet_no_password>, <TestCaseFunction test_checksums>, <TestCaseFunction test_multisig_descriptor_with_mixed_range>, <TestCaseFunction test_parse_descriptor_context>, <TestCaseFunction test_parse_descriptor_replace_h>, <TestCaseFunction test_parse_descriptor_unknown_notation_for_hardened_derivation>, <TestCaseFunction test_parse_descriptor_with_key_at_end_with_origin>, <TestCaseFunction test_parse_descriptor_with_key_at_end_without_origin>, <TestCaseFunction test_parse_descriptor_with_origin>, <TestCaseFunction test_parse_descriptor_with_origin_fingerprint_only>, <TestCaseFunction test_parse_descriptor_with_range>, <TestCaseFunction test_parse_descriptor_without_origin>, <TestCaseFunction test_parse_descriptor_ypub_zpub_forbidden>, <TestCaseFunction test_parse_empty_descriptor>, <TestCaseFunction test_parse_multisig_descriptor_with_origin>, <TestCaseFunction test_parse_multisig_descriptor_with_range>, <TestCaseFunction test_pubkey_provider_deriv_path>, <TestCaseFunction test_sortedmulti_ranged_pubkey_order>, <TestCaseFunction test_sortedmulti_unranged_pubkey_order>, <TestCaseFunction test_tr_descriptor>, <TestCaseFunction test_tr_descriptor_bip386>, <TestCaseFunction test_uncompressed_pubkey_in_segwit>, <TestCaseFunction test_from_str>, <TestCaseFunction test_from_str_with_inference>, <TestCaseFunction test_to_friendly_name>, <TestCaseFunction test_wallet_get_request_by_addr>, <TestCaseFunction test_wallet_gets_paid_onchain_in_the_past>, <TestCaseFunction test_wallet_reuse_addr_of_expired_request>, <TestCaseFunction test_wallet_reuse_unused_fallback_onchain_addr_when_getting_paid_with_lightning>, <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_on_ln>, <TestCaseFunction test_wallet_with_ln_creates_payreq_and_gets_paid_onchain>, <TestCaseFunction test_wallet_without_ln_creates_payreq_and_gets_paid_onchain>, <TestCaseFunction test_arg_validation>, <TestCaseFunction test_fee>, <TestCaseFunction test_AddHTLCNegativeBalance>, <TestCaseFunction test_SimpleAddSettleWorkflow>, <TestCaseFunction test_UpdateFeeReceiverCommits>, <TestCaseFunction test_UpdateFeeSenderCommits>, <TestCaseFunction test_concurrent_reversed_payment>, <TestCaseFunction test_AddHTLCNegativeBalance>, <TestCaseFunction test_SimpleAddSettleWorkflow>, <TestCaseFunction test_UpdateFeeReceiverCommits>, <TestCaseFunction test_UpdateFeeSenderCommits>, <TestCaseFunction test_concurrent_reversed_payment>, <TestCaseFunction test_DesyncHTLCs>, <TestCaseFunction test_DesyncHTLCs>, <TestCaseFunction test_part1>, <TestCaseFunction test_part1>, <TestCaseFunction test_DustLimit>, <TestCaseFunction test_DustLimit>, <TestCaseFunction test_adding_htlc_between_send_ctx_and_recv_rev>, <TestCaseFunction test_adding_htlcs_race>, <TestCaseFunction test_remove_htlc_while_owing_commitment>, <TestCaseFunction test_single_htlc_full_lifecycle>, <TestCaseFunction test_unacked_local_updates>, <TestCaseFunction test_decode_onion_error>, <TestCaseFunction test_encode_decode_msg__commitment_signed>, <TestCaseFunction test_encode_decode_msg__init>, <TestCaseFunction test_encode_decode_msg__ints_can_be_passed_as_bytes>, <TestCaseFunction test_encode_decode_msg__missing_mandatory_field_gets_set_to_zeroes>, <TestCaseFunction test_read_bigsize_int>, <TestCaseFunction test_read_tlv_stream_tests1>, <TestCaseFunction test_read_tlv_stream_tests2>, <TestCaseFunction test_read_tlv_stream_tests3>, <TestCaseFunction test_write_bigsize_int>, <TestCaseFunction test_channel_usage_after_closing>, <TestCaseFunction test_check_invoice_before_payment>, <TestCaseFunction test_close_upfront_shutdown_script>, <TestCaseFunction test_error>, <TestCaseFunction test_legacy_shutdown_high>, <TestCaseFunction test_legacy_shutdown_low>, <TestCaseFunction test_modern_shutdown_with_overlap>, <TestCaseFunction test_payment_bundle>, <TestCaseFunction test_payment_bundle_timeout>, <TestCaseFunction test_payment_race>, <TestCaseFunction test_payment_recv_mpp_confusion1>, <TestCaseFunction test_payment_recv_mpp_confusion2>, <TestCaseFunction test_payments_stresstest>, <TestCaseFunction test_reestablish>, <TestCaseFunction test_reestablish_replay_messages_rev_then_sig>, <TestCaseFunction test_reestablish_replay_messages_sig_then_rev>, <TestCaseFunction test_reestablish_with_old_state>, <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length>, <TestCaseFunction test_sending_weird_messages__unknown_even_type>, <TestCaseFunction test_sending_weird_messages_that_should_be_ignored>, <TestCaseFunction test_simple_payment_failure>, <TestCaseFunction test_simple_payment_failure_with_hold_invoice>, <TestCaseFunction test_simple_payment_success>, <TestCaseFunction test_simple_payment_success_with_hold_invoice>, <TestCaseFunction test_warning>, <TestCaseFunction test_fail_pending_htlcs_on_shutdown>, <TestCaseFunction test_payment_multihop>, <TestCaseFunction test_payment_multihop_route_around_failure>, <TestCaseFunction test_payment_multihop_temp_node_failure>, <TestCaseFunction test_payment_multihop_with_preselected_path>, <TestCaseFunction test_payment_multipart>, <TestCaseFunction test_payment_multipart_trampoline_e2e>, <TestCaseFunction test_payment_multipart_trampoline_legacy>, <TestCaseFunction test_payment_multipart_with_hold_invoice>, <TestCaseFunction test_payment_multipart_with_timeout>, <TestCaseFunction test_payment_multipart_wrong_invoice>, <TestCaseFunction test_payment_trampoline_e2e_direct>, <TestCaseFunction test_payment_trampoline_e2e_indirect>, <TestCaseFunction test_payment_trampoline_legacy>, <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints>, <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created>, <TestCaseFunction test_trampoline_mpp_consolidation>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure>, <TestCaseFunction test_channel_usage_after_closing>, <TestCaseFunction test_check_invoice_before_payment>, <TestCaseFunction test_close_upfront_shutdown_script>, <TestCaseFunction test_error>, <TestCaseFunction test_legacy_shutdown_high>, <TestCaseFunction test_legacy_shutdown_low>, <TestCaseFunction test_modern_shutdown_with_overlap>, <TestCaseFunction test_payment_bundle>, <TestCaseFunction test_payment_bundle_timeout>, <TestCaseFunction test_payment_race>, <TestCaseFunction test_payment_recv_mpp_confusion1>, <TestCaseFunction test_payment_recv_mpp_confusion2>, <TestCaseFunction test_payments_stresstest>, <TestCaseFunction test_reestablish>, <TestCaseFunction test_reestablish_replay_messages_rev_then_sig>, <TestCaseFunction test_reestablish_replay_messages_sig_then_rev>, <TestCaseFunction test_reestablish_with_old_state>, <TestCaseFunction test_sending_weird_messages__known_msg_with_insufficient_length>, <TestCaseFunction test_sending_weird_messages__unknown_even_type>, <TestCaseFunction test_sending_weird_messages_that_should_be_ignored>, <TestCaseFunction test_simple_payment_failure>, <TestCaseFunction test_simple_payment_failure_with_hold_invoice>, <TestCaseFunction test_simple_payment_success>, <TestCaseFunction test_simple_payment_success_with_hold_invoice>, <TestCaseFunction test_warning>, <TestCaseFunction test_fail_pending_htlcs_on_shutdown>, <TestCaseFunction test_payment_multihop>, <TestCaseFunction test_payment_multihop_route_around_failure>, <TestCaseFunction test_payment_multihop_temp_node_failure>, <TestCaseFunction test_payment_multihop_with_preselected_path>, <TestCaseFunction test_payment_multipart>, <TestCaseFunction test_payment_multipart_trampoline_e2e>, <TestCaseFunction test_payment_multipart_trampoline_legacy>, <TestCaseFunction test_payment_multipart_with_hold_invoice>, <TestCaseFunction test_payment_multipart_with_timeout>, <TestCaseFunction test_payment_multipart_wrong_invoice>, <TestCaseFunction test_payment_trampoline_e2e_direct>, <TestCaseFunction test_payment_trampoline_e2e_indirect>, <TestCaseFunction test_payment_trampoline_legacy>, <TestCaseFunction test_payment_with_temp_channel_failure_and_liquidity_hints>, <TestCaseFunction test_refuse_to_forward_htlc_that_corresponds_to_payreq_we_created>, <TestCaseFunction test_trampoline_mpp_consolidation>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice>, <TestCaseFunction test_trampoline_mpp_consolidation_with_hold_invoice_failure>, <TestCaseFunction test_decode_onion_error>, <TestCaseFunction test_find_path_for_payment>, <TestCaseFunction test_find_path_liquidity_hints>, <TestCaseFunction test_find_path_liquidity_hints_inflight_htlcs>, <TestCaseFunction test_liquidity_hints>, <TestCaseFunction test_new_onion_packet>, <TestCaseFunction test_process_onion_packet>, <TestCaseFunction test_extract_nodeid>, <TestCaseFunction test_loop>, <TestCaseFunction test_responder>, <TestCaseFunction test_split_host_port>, <TestCaseFunction test_decode>, <TestCaseFunction test_encode>, <TestCaseFunction test_lightning_address_to_url>, <TestCaseFunction test_channel_type>, <TestCaseFunction test_commitment_tx_anchors_test_vectors>, <TestCaseFunction test_commitment_tx_with_all_five_HTLCs_untrimmed_minimum_feerate>, <TestCaseFunction test_commitment_tx_with_fee_greater_than_funder_amount>, <TestCaseFunction test_commitment_tx_with_one_output>, <TestCaseFunction test_decode_imported_channel_backup_v0>, <TestCaseFunction test_decode_imported_channel_backup_v1>, <TestCaseFunction test_extract_commitment_number_from_tx>, <TestCaseFunction test_get_compressed_pubkey_from_bech32>, <TestCaseFunction test_key_derivation>, <TestCaseFunction test_ln_compare_features>, <TestCaseFunction test_ln_features_for_init_message>, <TestCaseFunction test_ln_features_for_invoice>, <TestCaseFunction test_ln_features_supports>, <TestCaseFunction test_ln_features_validate_transitive_dependencies>, <TestCaseFunction test_lnworker_decode_channel_update_msg>, <TestCaseFunction test_per_commitment_secret_from_seed>, <TestCaseFunction test_shachain_produce_consume>, <TestCaseFunction test_shachain_store>, <TestCaseFunction test_simple_commitment_tx_with_no_HTLCs>, <TestCaseFunction test_mnemonic_to_seed>, <TestCaseFunction test_mnemonic_to_seed_basic>, <TestCaseFunction test_random_seeds>, <TestCaseFunction test>, <TestCaseFunction test_checksum>, <TestCaseFunction test_cjk_normalization>, <TestCaseFunction test_calc_seed_type>, <TestCaseFunction test_can_seed_have_passphrase>, <TestCaseFunction test_is_matching_seed>, <TestCaseFunction test_new_seed>, <TestCaseFunction test_old_seed>, <TestCaseFunction test_make_group_prefix>, <TestCaseFunction test_slip39_vectors>, <TestCaseFunction test_payment_below_min_part_size>, <TestCaseFunction test_saturation>, <TestCaseFunction test_send_to_single_node>, <TestCaseFunction test_suggest_part_penalty>, <TestCaseFunction test_suggest_splits>, <TestCaseFunction test_suggest_splits_single_channel>, <TestCaseFunction test_can_connect_during_backward>, <TestCaseFunction test_chain_false_during_binary>, <TestCaseFunction test_fork_conflict>, <TestCaseFunction test_fork_noconflict>, <TestCaseFunction test_bip21>, <TestCaseFunction test_bip70>, <TestCaseFunction test_bolt11>, <TestCaseFunction test_email_and_domain>, <TestCaseFunction test_invoice_from_payment_identifier>, <TestCaseFunction test_lnurl>, <TestCaseFunction test_maybe_extract_lightning_payment_identifier>, <TestCaseFunction test_multiline>, <TestCaseFunction test_spk>, <TestCaseFunction test_valid_psbt_001>, <TestCaseFunction test_valid_psbt_002>, <TestCaseFunction test_valid_psbt_003>, <TestCaseFunction test_valid_psbt_004>, <TestCaseFunction test_valid_psbt_005>, <TestCaseFunction test_valid_psbt_006>, <TestCaseFunction test_valid_psbt_007>, <TestCaseFunction test_valid_psbt_008>, <TestCaseFunction test_valid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo>, <TestCaseFunction test_invalid_psbt_001>, <TestCaseFunction test_invalid_psbt_002>, <TestCaseFunction test_invalid_psbt_003>, <TestCaseFunction test_invalid_psbt_004>, <TestCaseFunction test_invalid_psbt_005>, <TestCaseFunction test_invalid_psbt_006>, <TestCaseFunction test_invalid_psbt_007>, <TestCaseFunction test_invalid_psbt_008>, <TestCaseFunction test_invalid_psbt_009>, <TestCaseFunction test_invalid_psbt_010>, <TestCaseFunction test_invalid_psbt_011>, <TestCaseFunction test_invalid_psbt_012>, <TestCaseFunction test_invalid_psbt_013>, <TestCaseFunction test_invalid_psbt_014>, <TestCaseFunction test_invalid_psbt_015>, <TestCaseFunction test_invalid_psbt_016>, <TestCaseFunction test_invalid_psbt_017>, <TestCaseFunction test_invalid_psbt_018>, <TestCaseFunction test_invalid_psbt__input_with_both_witness_utxo_and_nonwitness_utxo_that_are_inconsistent>, <TestCaseFunction test_psbt_fails_signer_checks_001>, <TestCaseFunction test_psbt_fails_signer_checks_002>, <TestCaseFunction test_psbt_fails_signer_checks_003>, <TestCaseFunction test_psbt_fails_signer_checks_004>, <TestCaseFunction test_psbt_combiner_unknown_fields>, <TestCaseFunction test_version_0_noisemap>, <TestCaseFunction test_version_1_noisemap>, <TestCaseFunction test_version_1_noisemap_indexerror>, <TestCaseFunction test_can_set_options_set_in_user_config>, <TestCaseFunction test_cannot_set_options_passed_by_command_line>, <TestCaseFunction test_configvars_convert_getter>, <TestCaseFunction test_configvars_from_key>, <TestCaseFunction test_configvars_get_default_value>, <TestCaseFunction test_configvars_is_modifiable>, <TestCaseFunction test_configvars_is_set>, <TestCaseFunction test_configvars_set_and_get>, <TestCaseFunction test_depth_target_to_fee>, <TestCaseFunction test_fee_to_depth>, <TestCaseFunction test_simple_config_command_line_overrides_everything>, <TestCaseFunction test_simple_config_key_rename>, <TestCaseFunction test_simple_config_user_config_is_used_if_others_arent_specified>, <TestCaseFunction test_user_config_is_not_written_with_read_only_config>, <TestCaseFunction test_no_path_means_no_result>, <TestCaseFunction test_path_with_reprd_object>, <TestCaseFunction test_path_without_config_file>, <TestCaseFunction test_claim_tx_for_successful_reverse_swap>, <TestCaseFunction test_claim_tx_for_timing_out_forward_swap>, <TestCaseFunction test_upgrade_from_client_1_9_8_seeded>, <TestCaseFunction test_upgrade_from_client_2_0_4_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_0_4_multisig>, <TestCaseFunction test_upgrade_from_client_2_0_4_seeded>, <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_0_4_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_0_4_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_1_1_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_1_1_multisig>, <TestCaseFunction test_upgrade_from_client_2_1_1_seeded>, <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_1_1_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_1_1_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_2_0_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_2_0_multisig>, <TestCaseFunction test_upgrade_from_client_2_2_0_seeded>, <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_2_0_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_2_0_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_3_2_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_3_2_multisig>, <TestCaseFunction test_upgrade_from_client_2_3_2_seeded>, <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_3_2_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_3_2_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_4_3_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_4_3_multisig>, <TestCaseFunction test_upgrade_from_client_2_4_3_seeded>, <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_4_3_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_4_3_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_5_4_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_5_4_multisig>, <TestCaseFunction test_upgrade_from_client_2_5_4_seeded>, <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_multiacc>, <TestCaseFunction test_upgrade_from_client_2_5_4_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_5_4_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_6_4_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_6_4_multisig>, <TestCaseFunction test_upgrade_from_client_2_6_4_seeded>, <TestCaseFunction test_upgrade_from_client_2_6_4_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_7_18_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_7_18_multisig>, <TestCaseFunction test_upgrade_from_client_2_7_18_seeded>, <TestCaseFunction test_upgrade_from_client_2_7_18_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_7_18_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18>, <TestCaseFunction test_upgrade_from_client_2_8_3_multisig>, <TestCaseFunction test_upgrade_from_client_2_8_3_seeded>, <TestCaseFunction test_upgrade_from_client_2_8_3_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_8_3_watchaddresses>, <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys>, <TestCaseFunction test_upgrade_from_client_2_9_3_importedkeys_keystore_changes>, <TestCaseFunction test_upgrade_from_client_2_9_3_multisig>, <TestCaseFunction test_upgrade_from_client_2_9_3_old_seeded_with_realistic_history>, <TestCaseFunction test_upgrade_from_client_2_9_3_seeded>, <TestCaseFunction test_upgrade_from_client_2_9_3_trezor_singleacc>, <TestCaseFunction test_upgrade_from_client_2_9_3_watchaddresses>, <TestCaseFunction test_upgrade_from_client_3_2_3_ledger_standard_keystore_changes>, <TestCaseFunction test_upgrade_from_client_3_3_8_xpub_with_realistic_history>, <TestCaseFunction test_upgrade_from_client_4_5_2_9dk_with_ln>, <TestCaseFunction test_bool>, <TestCaseFunction test_bytes>, <TestCaseFunction test_compact_size>, <TestCaseFunction test_string>, <TestCaseFunction test_convert_raw_tx_to_hex>, <TestCaseFunction test_estimated_output_size>, <TestCaseFunction test_estimated_tx_size>, <TestCaseFunction test_get_address_from_output_script>, <TestCaseFunction test_match_against_script_template>, <TestCaseFunction test_tx_deserialize_for_signed_network_tx>, <TestCaseFunction test_tx_from_any>, <TestCaseFunction test_tx_serialize_methods_for_network_tx>, <TestCaseFunction test_tx_serialize_methods_for_psbt>, <TestCaseFunction test_tx_serialize_methods_for_psbt_that_is_ready_to_be_finalized>, <TestCaseFunction test_tx_setting_locktime_invalidates_ser_cache>, <TestCaseFunction test_tx_setting_version_invalidates_ser_cache>, <TestCaseFunction test_tx_signed_segwit>, <TestCaseFunction test_tx_update_signatures>, <TestCaseFunction test_txid_bitcoin_core_0001>, <TestCaseFunction test_txid_bitcoin_core_0002>, <TestCaseFunction test_txid_bitcoin_core_0003>, <TestCaseFunction test_txid_bitcoin_core_0004>, <TestCaseFunction test_txid_bitcoin_core_0005>, <TestCaseFunction test_txid_bitcoin_core_0006>, <TestCaseFunction test_txid_bitcoin_core_0007>, <TestCaseFunction test_txid_bitcoin_core_0008>, <TestCaseFunction test_txid_bitcoin_core_0009>, <TestCaseFunction test_txid_bitcoin_core_0010>, <TestCaseFunction test_txid_bitcoin_core_0011>, <TestCaseFunction test_txid_bitcoin_core_0012>, <TestCaseFunction test_txid_bitcoin_core_0013>, <TestCaseFunction test_txid_bitcoin_core_0014>, <TestCaseFunction test_txid_bitcoin_core_0015>, <TestCaseFunction test_txid_bitcoin_core_0016>, <TestCaseFunction test_txid_bitcoin_core_0017>, <TestCaseFunction test_txid_bitcoin_core_0018>, <TestCaseFunction test_txid_bitcoin_core_0019>, <TestCaseFunction test_txid_bitcoin_core_0020>, <TestCaseFunction test_txid_bitcoin_core_0021>, <TestCaseFunction test_txid_bitcoin_core_0022>, <TestCaseFunction test_txid_bitcoin_core_0023>, <TestCaseFunction test_txid_bitcoin_core_0024>, <TestCaseFunction test_txid_bitcoin_core_0025>, <TestCaseFunction test_txid_bitcoin_core_0026>, <TestCaseFunction test_txid_bitcoin_core_0027>, <TestCaseFunction test_txid_bitcoin_core_0028>, <TestCaseFunction test_txid_bitcoin_core_0029>, <TestCaseFunction test_txid_bitcoin_core_0030>, <TestCaseFunction test_txid_bitcoin_core_0031>, <TestCaseFunction test_txid_bitcoin_core_0032>, <TestCaseFunction test_txid_bitcoin_core_0033>, <TestCaseFunction test_txid_bitcoin_core_0034>, <TestCaseFunction test_txid_bitcoin_core_0035>, <TestCaseFunction test_txid_bitcoin_core_0036>, <TestCaseFunction test_txid_bitcoin_core_0037>, <TestCaseFunction test_txid_bitcoin_core_0038>, <TestCaseFunction test_txid_bitcoin_core_0039>, <TestCaseFunction test_txid_bitcoin_core_0040>, <TestCaseFunction test_txid_bitcoin_core_0041>, <TestCaseFunction test_txid_bitcoin_core_0042>, <TestCaseFunction test_txid_bitcoin_core_0043>, <TestCaseFunction test_txid_bitcoin_core_0044>, <TestCaseFunction test_txid_bitcoin_core_0045>, <TestCaseFunction test_txid_bitcoin_core_0046>, <TestCaseFunction test_txid_bitcoin_core_0047>, <TestCaseFunction test_txid_bitcoin_core_0048>, <TestCaseFunction test_txid_bitcoin_core_0049>, <TestCaseFunction test_txid_bitcoin_core_0050>, <TestCaseFunction test_txid_bitcoin_core_0051>, <TestCaseFunction test_txid_bitcoin_core_0052>, <TestCaseFunction test_txid_bitcoin_core_0053>, <TestCaseFunction test_txid_bitcoin_core_0054>, <TestCaseFunction test_txid_bitcoin_core_0055>, <TestCaseFunction test_txid_bitcoin_core_0056>, <TestCaseFunction test_txid_bitcoin_core_0057>, <TestCaseFunction test_txid_bitcoin_core_0058>, <TestCaseFunction test_txid_bitcoin_core_0059>, <TestCaseFunction test_txid_bitcoin_core_0060>, <TestCaseFunction test_txid_bitcoin_core_0061>, <TestCaseFunction test_txid_bitcoin_core_0062>, <TestCaseFunction test_txid_bitcoin_core_0063>, <TestCaseFunction test_txid_bitcoin_core_0064>, <TestCaseFunction test_txid_bitcoin_core_0065>, <TestCaseFunction test_txid_bitcoin_core_0066>, <TestCaseFunction test_txid_bitcoin_core_0067>, <TestCaseFunction test_txid_bitcoin_core_0068>, <TestCaseFunction test_txid_bitcoin_core_0069>, <TestCaseFunction test_txid_bitcoin_core_0070>, <TestCaseFunction test_txid_bitcoin_core_0071>, <TestCaseFunction test_txid_bitcoin_core_0072>, <TestCaseFunction test_txid_bitcoin_core_0073>, <TestCaseFunction test_txid_bitcoin_core_0074>, <TestCaseFunction test_txid_bitcoin_core_0075>, <TestCaseFunction test_txid_bitcoin_core_0076>, <TestCaseFunction test_txid_bitcoin_core_0077>, <TestCaseFunction test_txid_bitcoin_core_0078>, <TestCaseFunction test_txid_bitcoin_core_0079>, <TestCaseFunction test_txid_bitcoin_core_0080>, <TestCaseFunction test_txid_bitcoin_core_0081>, <TestCaseFunction test_txid_bitcoin_core_0082>, <TestCaseFunction test_txid_bitcoin_core_0083>, <TestCaseFunction test_txid_bitcoin_core_0084>, <TestCaseFunction test_txid_bitcoin_core_0085>, <TestCaseFunction test_txid_bitcoin_core_0086>, <TestCaseFunction test_txid_bitcoin_core_0087>, <TestCaseFunction test_txid_bitcoin_core_0088>, <TestCaseFunction test_txid_bitcoin_core_0089>, <TestCaseFunction test_txid_bitcoin_core_0090>, <TestCaseFunction test_txid_bitcoin_core_0091>, <TestCaseFunction test_txid_bitcoin_core_0092>, <TestCaseFunction test_txid_coinbase_to_p2pk>, <TestCaseFunction test_txid_coinbase_to_p2pkh>, <TestCaseFunction test_txid_input_p2wsh_p2sh_not_multisig>, <TestCaseFunction test_txid_invalid_op_return>, <TestCaseFunction test_txid_negative_version_num>, <TestCaseFunction test_txid_p2pk_to_p2pkh>, <TestCaseFunction test_txid_p2pk_to_p2sh>, <TestCaseFunction test_txid_p2pk_to_p2wpkh>, <TestCaseFunction test_txid_p2pkh_to_p2pkh>, <TestCaseFunction test_txid_p2pkh_to_p2sh>, <TestCaseFunction test_txid_p2pkh_to_p2wpkh>, <TestCaseFunction test_txid_p2sh_to_p2pkh>, <TestCaseFunction test_txid_p2sh_to_p2sh>, <TestCaseFunction test_txid_p2sh_to_p2wpkh>, <TestCaseFunction test_txid_p2wpkh_to_p2pkh>, <TestCaseFunction test_txid_p2wpkh_to_p2sh>, <TestCaseFunction test_txid_p2wpkh_to_p2wpkh>, <TestCaseFunction test_txid_regression_issue_3899>, <TestCaseFunction test_txid_regression_issue_4333>, <TestCaseFunction test_txid_segwit_coinbase_to_p2pk>, <TestCaseFunction test_txid_segwit_coinbase_to_p2pkh>, <TestCaseFunction test_txid_segwit_coinbase_to_p2sh>, <TestCaseFunction test_version_field>, <TestCaseFunction test_spending_op_cltv_p2sh>, <TestCaseFunction test_spending_op_cltv_p2wsh>, <TestCaseFunction test_check_sighash_types_sighash_all>, <TestCaseFunction test_check_sighash_types_sighash_all_anyonecanpay>, <TestCaseFunction test_check_sighash_types_sighash_none>, <TestCaseFunction test_check_sighash_types_sighash_none_anyonecanpay>, <TestCaseFunction test_check_sighash_types_sighash_single>, <TestCaseFunction test_check_sighash_types_sighash_single_anyonecanpay>, <TestCaseFunction test_taproot_keypath_spending>, <TestCaseFunction test_age>, <TestCaseFunction test_chunks>, <TestCaseFunction test_error_text_bytes_to_safe_str>, <TestCaseFunction test_error_text_str_to_safe_str>, <TestCaseFunction test_format_fee_decimal>, <TestCaseFunction test_format_fee_float>, <TestCaseFunction test_format_fee_precision>, <TestCaseFunction test_format_satoshis>, <TestCaseFunction test_format_satoshis_add_thousands_sep>, <TestCaseFunction test_format_satoshis_decimal>, <TestCaseFunction test_format_satoshis_diff_negative>, <TestCaseFunction test_format_satoshis_diff_positive>, <TestCaseFunction test_format_satoshis_msat_resolution>, <TestCaseFunction test_format_satoshis_negative>, <TestCaseFunction test_format_satoshis_plain>, <TestCaseFunction test_format_satoshis_plain_decimal>, <TestCaseFunction test_format_satoshis_plain_to_mbtc>, <TestCaseFunction test_format_satoshis_to_mbtc>, <TestCaseFunction test_format_satoshis_whitespaces>, <TestCaseFunction test_format_satoshis_whitespaces_negative>, <TestCaseFunction test_is_hash256_str>, <TestCaseFunction test_is_hex_str>, <TestCaseFunction test_is_int_or_float>, <TestCaseFunction test_is_integer>, <TestCaseFunction test_is_ip_address>, <TestCaseFunction test_is_non_negative_int_or_float>, <TestCaseFunction test_is_non_negative_integer>, <TestCaseFunction test_is_private_netaddress>, <TestCaseFunction test_is_subpath>, <TestCaseFunction test_list_enabled_bits>, <TestCaseFunction test_parse_URI_address>, <TestCaseFunction test_parse_URI_address_amount>, <TestCaseFunction test_parse_URI_address_label>, <TestCaseFunction test_parse_URI_address_message>, <TestCaseFunction test_parse_URI_address_request_url>, <TestCaseFunction test_parse_URI_ignore_args>, <TestCaseFunction test_parse_URI_invalid>, <TestCaseFunction test_parse_URI_invalid_address>, <TestCaseFunction test_parse_URI_lightning_consistency>, <TestCaseFunction test_parse_URI_multiple_args>, <TestCaseFunction test_parse_URI_no_address_request_url>, <TestCaseFunction test_parse_URI_only_address>, <TestCaseFunction test_parse_URI_parameter_pollution>, <TestCaseFunction test_parse_URI_unsupported_req_key>, <TestCaseFunction test_verify_fail_f_tx_even>, <TestCaseFunction test_verify_fail_f_tx_odd>, <TestCaseFunction test_verify_ok_t_tx>, <TestCaseFunction test_read_dictionary_from_file>, <TestCaseFunction test_storage_imported_add_privkeys_persistence_test>, <TestCaseFunction test_storage_prevouts_by_scripthash_persistence>, <TestCaseFunction test_write_dictionary_to_file>, <TestCaseFunction test_empty_resets>, <TestCaseFunction test_save_fiat_and_reset>, <TestCaseFunction test_save_garbage>, <TestCaseFunction test_too_high_precision_value_resets_with_no_saved_value>, <TestCaseFunction test_create_new_wallet>, <TestCaseFunction test_restore_wallet_from_text_addresses>, <TestCaseFunction test_restore_wallet_from_text_mnemonic>, <TestCaseFunction test_restore_wallet_from_text_no_storage>, <TestCaseFunction test_restore_wallet_from_text_privkeys>, <TestCaseFunction test_restore_wallet_from_text_xkey_that_is_also_a_valid_electrum_seed_by_chance>, <TestCaseFunction test_restore_wallet_from_text_xprv>, <TestCaseFunction test_restore_wallet_from_text_xpub>, <TestCaseFunction test_update_password_of_imported_wallet>, <TestCaseFunction test_update_password_of_standard_wallet>, <TestCaseFunction test_update_password_with_app_restarts>, <TestCaseFunction test_bip32_extended_version_bytes>, <TestCaseFunction test_bip39_multisig_seed_bip45_standard>, <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit>, <TestCaseFunction test_bip39_seed_bip44_standard>, <TestCaseFunction test_bip39_seed_bip44_standard_passphrase>, <TestCaseFunction test_bip39_seed_bip49_p2sh_segwit>, <TestCaseFunction test_bip39_seed_bip84_native_segwit>, <TestCaseFunction test_electrum_multisig_seed_segwit>, <TestCaseFunction test_electrum_multisig_seed_standard>, <TestCaseFunction test_electrum_seed_2fa_legacy_post27>, <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_24words>, <TestCaseFunction test_electrum_seed_2fa_legacy_pre27_25words>, <TestCaseFunction test_electrum_seed_2fa_segwit>, <TestCaseFunction test_electrum_seed_old>, <TestCaseFunction test_electrum_seed_segwit>, <TestCaseFunction test_electrum_seed_segwit_passphrase>, <TestCaseFunction test_electrum_seed_standard>, <TestCaseFunction test_slip39_extendable_basic_2of5_bip49_p2sh_segwit>, <TestCaseFunction test_slip39_extendable_basic_3of6_bip44_standard>, <TestCaseFunction test_slip39_extendable_groups_128bit_bip84_native_segwit>, <TestCaseFunction test_slip39_extendable_groups_256bit_bip49_p2sh_segwit>, <TestCaseFunction test_slip39_non_extendable_basic_2of5_bip49_p2sh_segwit>, <TestCaseFunction test_slip39_non_extendable_basic_3of6_bip44_standard>, <TestCaseFunction test_slip39_non_extendable_groups_128bit_bip84_native_segwit>, <TestCaseFunction test_slip39_non_extendable_groups_256bit_bip49_p2sh_segwit>, <TestCaseFunction test_bip32_extended_version_bytes>, <TestCaseFunction test_bip39_multisig_seed_p2sh_segwit_testnet>, <TestCaseFunction test_coinjoin_between_two_p2wpkh_electrum_seeds>, <TestCaseFunction test_cpfp_p2pkh>, <TestCaseFunction test_cpfp_p2wpkh>, <TestCaseFunction test_dscancel>, <TestCaseFunction test_export_psbt__rm_witness_utxo_from_non_segwit_input>, <TestCaseFunction test_export_psbt_with_xpubs__multisig>, <TestCaseFunction test_export_psbt_with_xpubs__singlesig>, <TestCaseFunction test_get_spendable_coins>, <TestCaseFunction test_imported_wallet_usechange_off>, <TestCaseFunction test_imported_wallet_usechange_on>, <TestCaseFunction test_imported_wallet_usechange_on__no_more_unused_addresses>, <TestCaseFunction test_join_psbts__merge_duplicate_outputs>, <TestCaseFunction test_rbf>, <TestCaseFunction test_rbf_batching__cannot_batch_as_would_need_to_use_ismine_outputs_of_basetx>, <TestCaseFunction test_rbf_batching__merge_duplicate_outputs>, <TestCaseFunction test_sending_between_p2sh_1of2_and_p2wpkh_p2sh>, <TestCaseFunction test_sending_between_p2sh_2of3_and_uncompressed_p2pkh>, <TestCaseFunction test_sending_between_p2wpkh_and_compressed_p2pkh>, <TestCaseFunction test_sending_between_p2wsh_2of3_and_p2wsh_p2sh_2of2>, <TestCaseFunction test_sighash_warnings>, <TestCaseFunction test_standard_wallet_cannot_sign_multisig_input_even_if_cosigner>, <TestCaseFunction test_sweep_compressed_p2pk>, <TestCaseFunction test_sweep_compressed_p2pkh>, <TestCaseFunction test_sweep_p2wpkh>, <TestCaseFunction test_sweep_p2wpkh_p2sh>, <TestCaseFunction test_sweep_uncompressed_p2pk>, <TestCaseFunction test_sweep_uncompressed_p2pkh>, <TestCaseFunction test_wallet_does_not_create_zero_input_tx>, <TestCaseFunction test_wallet_history_chain_of_unsigned_transactions>, <TestCaseFunction test_we_dont_sign_tx_including_dummy_address>, <TestCaseFunction test_offline_signing_beyond_gap_limit>, <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2sh>, <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh>, <TestCaseFunction test_sending_offline_hd_multisig_online_addr_p2wsh_p2sh>, <TestCaseFunction test_sending_offline_old_electrum_seed_online_mpk>, <TestCaseFunction test_sending_offline_wif_online_addr_p2pkh>, <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh>, <TestCaseFunction test_sending_offline_wif_online_addr_p2wpkh_p2sh>, <TestCaseFunction test_sending_offline_xprv_online_addr_p2pkh>, <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh>, <TestCaseFunction test_sending_offline_xprv_online_addr_p2wpkh_p2sh>, <TestCaseFunction test_sending_offline_xprv_online_xpub_p2pkh>, <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh>, <TestCaseFunction test_sending_offline_xprv_online_xpub_p2wpkh_p2sh>, <TestCaseFunction test_signing_where_offline_ks_does_not_have_keyorigin_but_psbt_contains_it>, <TestCaseFunction test_duplicate_masterkeys_in_multisig>, <TestCaseFunction test_heterogeneous_xpub_types_in_multisig>, <TestCaseFunction test_restoring_old_wallet_txorder1>, <TestCaseFunction test_restoring_old_wallet_txorder2>, <TestCaseFunction test_restoring_old_wallet_txorder3>, <TestCaseFunction test_restoring_wallet_txorder1>, <TestCaseFunction test_restoring_wallet_with_manual_delete>, <TestCaseFunction test_restoring_wallet_without_manual_delete>, <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_partial_tx>, <TestCaseFunction test_get_tx_status_feerate_for_local_2of3_multisig_signed_tx>, <TestCaseFunction test_importing_and_deleting_addresses>, <TestCaseFunction test_no_advanced>, <TestCaseFunction test_proxy>, <TestCaseFunction test_proxy_and_server>, <TestCaseFunction test_server>, <TestCaseFunction test_2fa>, <TestCaseFunction test_create_standard_wallet_haveseed_bip39>, <TestCaseFunction test_create_standard_wallet_haveseed_electrum>, <TestCaseFunction test_create_standard_wallet_newseed>, <TestCaseFunction test_generalizedtime>]
            start_path: /home/reconfigure/electrum
            startdir: /home/reconfigure/electrum
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=1 testscollected=750>
    pytest_keyboard_interrupt [hook]
        excinfo: <ExceptionInfo Interrupted('1 error during collection') tblen=15>
    finish pytest_keyboard_interrupt --> [] [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=<ExitCode.INTERRUPTED: 2> testsfailed=1 testscollected=750>
        exitstatus: 2
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7fb93a960250>
          exitstatus: 2
          config: <_pytest.config.Config object at 0x7fb950228490>
        pytest_report_teststatus [hook]
            report: <CollectReport 'tests/test_qml_types.py' lenresult=0 outcome='failed'>
            config: <_pytest.config.Config object at 0x7fb950228490>
        finish pytest_report_teststatus --> ('error', 'E', 'ERROR') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7fb950228490>
    finish pytest_unconfigure --> [] [hook]
